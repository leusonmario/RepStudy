import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getMaxWaitTime();
        int int8 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean9 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions11.getWriteConcern();
        boolean boolean16 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11);
        java.lang.String str18 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 5);
        char[] charArray23 = mongoProperties0.getPassword();
        char[] charArray24 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertNull(charArray24);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions1.isSocketKeepAlive();
        int int10 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout((int) (byte) 0);
        boolean boolean19 = mongoClientOptions1.equals((java.lang.Object) builder14);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder32 = builder27.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) (byte) 0);
        boolean boolean37 = mongoClientOptions1.equals((java.lang.Object) (byte) 0);
        int int38 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder3.build();
        javax.net.SocketFactory socketFactory7 = mongoClientOptions6.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory8 = mongoClientOptions6.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(socketFactory7);
        org.junit.Assert.assertNotNull(dBDecoderFactory8);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties8.createMongoClient(mongoClientOptions12);
        mongoProperties8.setAuthenticationDatabase("");
        char[] charArray22 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties8.setPassword(charArray22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getHeartbeatThreadCount();
        int int29 = mongoClientOptions25.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties8.createMongoClient(mongoClientOptions25, environment30);
        int int32 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder7.dbEncoderFactory(dBEncoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionLifeTime(20000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setAuthenticationDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        boolean boolean33 = mongoClientOptions30.isSocketKeepAlive();
        java.lang.String str34 = mongoClientOptions30.getDescription();
        int int35 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions30);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str39 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions14.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.dbDecoderFactory(dBDecoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        int int3 = mongoClientOptions1.getConnectTimeout();
        java.lang.String str4 = mongoClientOptions1.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory5 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10000 + "'", int3 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory5);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(0);
        javax.net.SocketFactory socketFactory11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketFactory(socketFactory11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions14.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.dbDecoderFactory(dBDecoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectRetryFrequency(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.acceptableLatencyDifference(500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.heartbeatConnectRetryFrequency(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder3.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions1.getDbEncoderFactory();
        int int10 = mongoClientOptions1.getLocalThreshold();
        int int11 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getConnectTimeout();
        long long11 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setHost("hi!");
        java.lang.String str21 = mongoProperties18.getDatabase();
        java.lang.String str22 = mongoProperties18.getUri();
        java.lang.Integer int23 = mongoProperties18.getPort();
        java.lang.String str24 = mongoProperties18.getHost();
        char[] charArray25 = null;
        mongoProperties18.setPassword(charArray25);
        java.lang.String str27 = mongoProperties18.getMongoClientDatabase();
        mongoProperties18.setUsername("hi!");
        java.lang.String str30 = mongoProperties18.getDatabase();
        mongoProperties18.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getThreadsAllowedToBlockForConnectionMultiplier();
        int int40 = mongoClientOptions38.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties18.createMongoClient(mongoClientOptions38, environment41);
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions38, environment43);
        java.lang.String str45 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder9.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder20 = builder9.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getHeartbeatThreadCount();
        int int55 = mongoClientOptions53.getHeartbeatSocketTimeout();
        int int56 = mongoClientOptions53.getHeartbeatThreadCount();
        long long57 = mongoClientOptions53.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory58 = mongoClientOptions53.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder51.socketFactory(socketFactory58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder36.socketFactory(socketFactory58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder31.socketFactory(socketFactory58);
        com.mongodb.MongoClientOptions.Builder builder62 = builder24.socketFactory(socketFactory58);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        com.mongodb.MongoClientOptions.Builder builder65 = builder62.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder62.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder68.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder71 = builder68.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder77 = builder73.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder80 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder86 = builder82.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder87 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder87.build();
        int int89 = mongoClientOptions88.getHeartbeatThreadCount();
        int int90 = mongoClientOptions88.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference91 = mongoClientOptions88.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder92 = builder82.readPreference(readPreference91);
        com.mongodb.MongoClientOptions.Builder builder93 = builder79.readPreference(readPreference91);
        com.mongodb.MongoClientOptions.Builder builder94 = builder67.readPreference(readPreference91);
        com.mongodb.MongoClientOptions.Builder builder95 = builder8.readPreference(readPreference91);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(socketFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 20000 + "'", int90 == 20000);
        org.junit.Assert.assertNotNull(readPreference91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setPort((java.lang.Integer) 15);
        mongoProperties9.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getHeartbeatThreadCount();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions15);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoProperties9);
        int int22 = mongoClientOptions1.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions1.getDbDecoderFactory();
        int int24 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str25 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions15);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions1.getSocketFactory();
        int int22 = mongoClientOptions1.getLocalThreshold();
        int int23 = mongoClientOptions1.getMinConnectionsPerHost();
        int int24 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str25 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions8.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions8.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder15 = builder4.writeConcern(writeConcern14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder4.threadsAllowedToBlockForConnectionMultiplier(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        boolean boolean14 = mongoClientOptions5.isSocketKeepAlive();
        boolean boolean15 = mongoClientOptions5.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions5.getSocketFactory();
        java.lang.Class<?> wildcardClass17 = socketFactory16.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getMaxWaitTime();
        int int22 = mongoClientOptions18.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder7.socketFactory(socketFactory23);
        com.mongodb.WriteConcern writeConcern26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder25.writeConcern(writeConcern26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxConnectionIdleTime(32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setPort((java.lang.Integer) 15);
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("");
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions7.getLocalThreshold();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        int int12 = mongoClientOptions7.getConnectionsPerHost();
        int int13 = mongoClientOptions7.getLocalThreshold();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions7, environment14);
        int int16 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean17 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str18 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minHeartbeatFrequency(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean29 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean30 = mongoClientOptions18.isCursorFinalizerEnabled();
        long long31 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions18.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions1.isSocketKeepAlive();
        boolean boolean12 = mongoClientOptions1.isAlwaysUseMBeans();
        int int13 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.description("test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getHeartbeatThreadCount();
        int int15 = mongoClientOptions1.getConnectionsPerHost();
        int int16 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        long long7 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions9.getReadPreference();
        int int12 = mongoClientOptions9.getMaxWaitTime();
        int int13 = mongoClientOptions9.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions9.getWriteConcern();
        boolean boolean15 = mongoClientOptions9.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions9.getWriteConcern();
        boolean boolean17 = mongoClientOptions1.equals((java.lang.Object) writeConcern16);
        int int18 = mongoClientOptions1.getLocalThreshold();
        int int19 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("hi!");
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getHeartbeatThreadCount();
        int int33 = mongoClientOptions31.getHeartbeatSocketTimeout();
        int int34 = mongoClientOptions31.getLocalThreshold();
        int int35 = mongoClientOptions31.getHeartbeatFrequency();
        boolean boolean36 = mongoClientOptions31.isSocketKeepAlive();
        int int37 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int38 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        int int39 = mongoClientOptions31.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions31.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder21.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder15.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.ReadPreference readPreference43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder44 = builder42.readPreference(readPreference43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5000 + "'", int35 == 5000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatFrequency(5);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getDatabase();
        java.lang.String str18 = mongoProperties14.getUri();
        java.lang.Integer int19 = mongoProperties14.getPort();
        java.lang.String str20 = mongoProperties14.getUri();
        mongoProperties14.setDatabase("test");
        java.lang.String str23 = mongoProperties14.getMongoClientDatabase();
        mongoProperties14.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getLocalThreshold();
        int int30 = mongoClientOptions26.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions26.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions26.getDbDecoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties14.createMongoClient(mongoClientOptions26, environment33);
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions26);
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str38 = mongoProperties0.getDatabase();
        char[] charArray39 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "test" + "'", str23, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(charArray39);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.localThreshold((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        java.lang.Integer int10 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency(35);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.threadsAllowedToBlockForConnectionMultiplier(32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMinConnectionsPerHost();
        int int5 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions15);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions1.getSocketFactory();
        int int22 = mongoClientOptions1.getLocalThreshold();
        int int23 = mongoClientOptions1.getMinConnectionsPerHost();
        boolean boolean24 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean25 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMaxConnectionLifeTime();
        java.lang.String str28 = mongoClientOptions18.toString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.acceptableLatencyDifference(500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.dbDecoderFactory(dBDecoderFactory14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount(32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean8 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean10 = mongoClientOptions6.isAutoConnectRetry();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions6, environment12);
        int int14 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions6.getHeartbeatThreadCount();
        int int16 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions1.getMaxConnectionIdleTime();
        java.lang.String str10 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatThreadCount();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int16 = mongoClientOptions13.getHeartbeatThreadCount();
        long long17 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder7.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxWaitTime(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getDatabase();
        java.lang.String str26 = mongoProperties22.getUri();
        java.lang.Integer int27 = mongoProperties22.getPort();
        java.lang.String str28 = mongoProperties22.getHost();
        mongoProperties22.setUsername("");
        java.lang.Integer int31 = mongoProperties22.getPort();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        boolean boolean34 = mongoClientOptions33.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setHost("hi!");
        java.lang.String str38 = mongoProperties35.getDatabase();
        java.lang.String str39 = mongoProperties35.getUri();
        java.lang.Integer int40 = mongoProperties35.getPort();
        java.lang.String str41 = mongoProperties35.getHost();
        mongoProperties35.setUsername("");
        boolean boolean44 = mongoClientOptions33.equals((java.lang.Object) mongoProperties35);
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties22.createMongoClient(mongoClientOptions33, environment45);
        int int47 = mongoClientOptions33.getMaxConnectionIdleTime();
        int int48 = mongoClientOptions33.getConnectTimeout();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder21.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder6.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder63.build();
        int int65 = mongoClientOptions64.getMaxConnectionLifeTime();
        boolean boolean66 = mongoClientOptions64.isAutoConnectRetry();
        boolean boolean67 = mongoClientOptions64.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions64.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder69 = builder60.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder70.build();
        int int72 = mongoClientOptions71.getMaxConnectionLifeTime();
        boolean boolean73 = mongoClientOptions71.isAutoConnectRetry();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference75 = mongoClientOptions71.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder60.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder6.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatThreadCount((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder83 = builder80.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10000 + "'", int48 == 10000);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(readPreference75);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatThreadCount(32);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getHeartbeatThreadCount();
        int int44 = mongoClientOptions42.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions42.getReadPreference();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder47 = builder40.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder31.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder50 = builder31.heartbeatFrequency(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getUri();
        mongoProperties3.setPort((java.lang.Integer) 20000);
        char[] charArray16 = mongoProperties3.getPassword();
        mongoProperties3.setPort((java.lang.Integer) (-1));
        java.lang.String str19 = mongoProperties3.getAuthenticationDatabase();
        mongoProperties3.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.build();
        int int8 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions19.getDbDecoderFactory();
        int int23 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str24 = mongoClientOptions19.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatThreadCount();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int16 = mongoClientOptions13.getHeartbeatThreadCount();
        long long17 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder7.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxWaitTime(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getDatabase();
        java.lang.String str26 = mongoProperties22.getUri();
        java.lang.Integer int27 = mongoProperties22.getPort();
        java.lang.String str28 = mongoProperties22.getHost();
        mongoProperties22.setUsername("");
        java.lang.Integer int31 = mongoProperties22.getPort();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        boolean boolean34 = mongoClientOptions33.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setHost("hi!");
        java.lang.String str38 = mongoProperties35.getDatabase();
        java.lang.String str39 = mongoProperties35.getUri();
        java.lang.Integer int40 = mongoProperties35.getPort();
        java.lang.String str41 = mongoProperties35.getHost();
        mongoProperties35.setUsername("");
        boolean boolean44 = mongoClientOptions33.equals((java.lang.Object) mongoProperties35);
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties22.createMongoClient(mongoClientOptions33, environment45);
        int int47 = mongoClientOptions33.getMaxConnectionIdleTime();
        int int48 = mongoClientOptions33.getConnectTimeout();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder21.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder6.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder63.build();
        int int65 = mongoClientOptions64.getMaxConnectionLifeTime();
        boolean boolean66 = mongoClientOptions64.isAutoConnectRetry();
        boolean boolean67 = mongoClientOptions64.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions64.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder69 = builder60.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder70.build();
        int int72 = mongoClientOptions71.getMaxConnectionLifeTime();
        boolean boolean73 = mongoClientOptions71.isAutoConnectRetry();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference75 = mongoClientOptions71.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder60.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder6.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder82 = builder80.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10000 + "'", int48 == 10000);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(readPreference75);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectRetryFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("hi!");
        java.lang.String str8 = mongoProperties5.getDatabase();
        java.lang.String str9 = mongoProperties5.getDatabase();
        mongoProperties5.setUsername("mongodb://localhost/test");
        mongoProperties5.setGridFsDatabase("");
        mongoProperties5.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties5.createMongoClient(mongoClientOptions21, environment24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setHost("hi!");
        java.lang.String str32 = mongoProperties29.getDatabase();
        java.lang.String str33 = mongoProperties29.getUri();
        java.lang.Integer int34 = mongoProperties29.getPort();
        java.lang.String str35 = mongoProperties29.getHost();
        mongoProperties29.setUsername("");
        boolean boolean38 = mongoClientOptions27.equals((java.lang.Object) mongoProperties29);
        java.lang.String str39 = mongoProperties29.getUri();
        mongoProperties29.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.setHost("hi!");
        mongoProperties42.setUri("");
        char[] charArray49 = new char[] { 'a', '#' };
        mongoProperties42.setPassword(charArray49);
        char[] charArray56 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties42.setPassword(charArray56);
        mongoProperties29.setPassword(charArray56);
        mongoProperties5.setPassword(charArray56);
        mongoProperties0.setPassword(charArray56);
        java.lang.Class<?> wildcardClass61 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str62 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str63 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a, #]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions5.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions5.equals((java.lang.Object) mongoClientOptions14);
        boolean boolean16 = mongoClientOptions14.isAutoConnectRetry();
        java.lang.String str17 = mongoClientOptions14.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(writeConcern18);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        java.lang.String str11 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost(35);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.minHeartbeatFrequency((int) ' ');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions10.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder18.readPreference(readPreference24);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        java.lang.String str7 = mongoProperties4.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties4.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties4.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties4.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient16 = mongoProperties4.createMongoClient(mongoClientOptions12);
        boolean boolean17 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.dbEncoderFactory(dBEncoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getHeartbeatThreadCount();
        int int30 = mongoClientOptions26.getMinHeartbeatFrequency();
        int int31 = mongoClientOptions26.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder33 = builder24.readPreference(readPreference32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder24.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getMaxConnectionLifeTime();
        boolean boolean41 = mongoClientOptions39.isCursorFinalizerEnabled();
        boolean boolean42 = mongoClientOptions39.isAlwaysUseMBeans();
        int int43 = mongoClientOptions39.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder37.dbDecoderFactory(dBDecoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder19.dbDecoderFactory(dBDecoderFactory44);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder19.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 120000 + "'", int43 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions5.getMinConnectionsPerHost();
        int int10 = mongoClientOptions5.getHeartbeatSocketTimeout();
        java.lang.String str11 = mongoClientOptions5.toString();
        java.lang.String str12 = mongoClientOptions5.getDescription();
        int int13 = mongoClientOptions5.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions5.getHeartbeatThreadCount();
        boolean boolean15 = mongoClientOptions5.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getHeartbeatThreadCount();
        long long23 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder2.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder28 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatThreadCount();
        int int32 = mongoClientOptions30.getHeartbeatSocketTimeout();
        int int33 = mongoClientOptions30.getHeartbeatThreadCount();
        long long34 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions30.getSocketFactory();
        boolean boolean36 = mongoClientOptions30.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions30.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setPort((java.lang.Integer) 15);
        mongoProperties38.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatThreadCount();
        int int46 = mongoClientOptions44.getHeartbeatSocketTimeout();
        int int47 = mongoClientOptions44.getHeartbeatThreadCount();
        long long48 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClient mongoClient49 = mongoProperties38.createMongoClient(mongoClientOptions44);
        boolean boolean50 = mongoClientOptions30.equals((java.lang.Object) mongoProperties38);
        javax.net.SocketFactory socketFactory51 = mongoClientOptions30.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder28.socketFactory(socketFactory51);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("hi!");
        java.lang.String str8 = mongoProperties5.getDatabase();
        java.lang.String str9 = mongoProperties5.getUri();
        java.lang.Integer int10 = mongoProperties5.getPort();
        java.lang.Class<?> wildcardClass11 = mongoProperties5.getFieldNamingStrategy();
        java.lang.String str12 = mongoProperties5.getGridFsDatabase();
        char[] charArray13 = mongoProperties5.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties14.createMongoClient(mongoClientOptions18);
        mongoProperties14.setAuthenticationDatabase("");
        char[] charArray28 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties14.setPassword(charArray28);
        mongoProperties14.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties14.createMongoClient(mongoClientOptions33, environment34);
        int int36 = mongoClientOptions33.getConnectTimeout();
        int int37 = mongoClientOptions33.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties5.createMongoClient(mongoClientOptions33, environment38);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.setHost("hi!");
        mongoProperties40.setUri("");
        char[] charArray47 = new char[] { 'a', '#' };
        mongoProperties40.setPassword(charArray47);
        char[] charArray54 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties40.setPassword(charArray54);
        mongoProperties5.setPassword(charArray54);
        mongoProperties0.setPassword(charArray54);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#,  ,  , a,  ]");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        java.lang.String str17 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder3.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder3.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions16.getReadPreference();
        boolean boolean23 = mongoClientOptions16.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = builder14.writeConcern(writeConcern25);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder14.build();
        int int28 = mongoClientOptions27.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 27017 + "'", int28 == 27017);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 32);
        java.lang.String str32 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        java.lang.Integer int10 = mongoProperties0.getPort();
        java.lang.String str11 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("hi!");
        java.lang.String str8 = mongoProperties5.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        com.mongodb.MongoClient mongoClient10 = mongoProperties5.createMongoClient(mongoClientOptions9);
        mongoProperties5.setAuthenticationDatabase("");
        java.lang.String str13 = mongoProperties5.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties14.createMongoClient(mongoClientOptions18);
        mongoProperties14.setAuthenticationDatabase("");
        char[] charArray28 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties14.setPassword(charArray28);
        mongoProperties14.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatThreadCount();
        int int35 = mongoClientOptions33.getHeartbeatSocketTimeout();
        int int36 = mongoClientOptions33.getLocalThreshold();
        int int37 = mongoClientOptions33.getHeartbeatFrequency();
        boolean boolean38 = mongoClientOptions33.isSocketKeepAlive();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties14.createMongoClient(mongoClientOptions33, environment39);
        mongoProperties14.setHost("mongodb://localhost/test");
        mongoProperties14.setPort((java.lang.Integer) 15);
        char[] charArray45 = mongoProperties14.getPassword();
        mongoProperties5.setPassword(charArray45);
        mongoProperties0.setPassword(charArray45);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getHeartbeatThreadCount();
        int int51 = mongoClientOptions49.getHeartbeatSocketTimeout();
        int int52 = mongoClientOptions49.getMaxWaitTime();
        long long53 = mongoClientOptions49.getMaxAutoConnectRetryTime();
        int int54 = mongoClientOptions49.getMaxConnectionLifeTime();
        java.lang.String str55 = mongoClientOptions49.getDescription();
        int int56 = mongoClientOptions49.getConnectionsPerHost();
        int int57 = mongoClientOptions49.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties0.createMongoClient(mongoClientOptions49, environment58);
        java.lang.String str60 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(mongoClient10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 120000 + "'", int52 == 120000);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 500 + "'", int57 == 500);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.heartbeatFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass19 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray28 = mongoProperties0.getPassword();
        char[] charArray29 = mongoProperties0.getPassword();
        java.lang.String str30 = mongoProperties0.getHost();
        java.lang.String str31 = mongoProperties0.getDatabase();
        java.lang.String str32 = mongoProperties0.getHost();
        java.lang.String str33 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions9.getReadPreference();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder5.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions25.getReadPreference();
        boolean boolean28 = mongoClientOptions20.equals((java.lang.Object) readPreference27);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean49 = mongoClientOptions47.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions47.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference54 = mongoClientOptions52.getReadPreference();
        boolean boolean55 = mongoClientOptions47.equals((java.lang.Object) readPreference54);
        javax.net.SocketFactory socketFactory56 = mongoClientOptions47.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder37.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder32.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder70.build();
        int int72 = mongoClientOptions71.getMaxConnectionLifeTime();
        boolean boolean73 = mongoClientOptions71.isAutoConnectRetry();
        boolean boolean74 = mongoClientOptions71.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory75 = mongoClientOptions71.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder76 = builder67.socketFactory(socketFactory75);
        com.mongodb.MongoClientOptions.Builder builder77 = builder32.socketFactory(socketFactory75);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(readPreference54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(socketFactory75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str10 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions1.getReadPreference();
        int int10 = mongoClientOptions1.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions1.toString();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions1.getWriteConcern();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(writeConcern19);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions1.isAutoConnectRetry();
        int int9 = mongoClientOptions1.getConnectTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions1.getReadPreference();
        java.lang.String str11 = mongoClientOptions1.getDescription();
        java.lang.String str12 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectionsPerHost(5);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getUsername();
        java.lang.String str2 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "test" + "'", str2, "test");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions11.isSocketKeepAlive();
        int int14 = mongoClientOptions11.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setHost("hi!");
        java.lang.String str27 = mongoProperties24.getDatabase();
        java.lang.String str28 = mongoProperties24.getUri();
        java.lang.Integer int29 = mongoProperties24.getPort();
        java.lang.String str30 = mongoProperties24.getHost();
        mongoProperties24.setUsername("");
        boolean boolean33 = mongoClientOptions22.equals((java.lang.Object) mongoProperties24);
        long long34 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getLocalThreshold();
        int int40 = mongoClientOptions36.getHeartbeatFrequency();
        boolean boolean41 = mongoClientOptions22.equals((java.lang.Object) mongoClientOptions36);
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder20.dbEncoderFactory(dBEncoderFactory42);
        java.lang.Class<?> wildcardClass44 = dBEncoderFactory42.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5000 + "'", int40 == 5000);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str12 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getMaxConnectionLifeTime();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        boolean boolean17 = mongoClientOptions14.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions14.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions14.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        boolean boolean21 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions14, environment22);
        mongoProperties0.setPort((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mongoClient23);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxConnectionIdleTime(100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.maxWaitTime(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder36.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) 15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getUri();
        mongoProperties0.setUsername("test");
        java.lang.String str15 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        boolean boolean50 = mongoClientOptions49.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.setHost("hi!");
        java.lang.String str54 = mongoProperties51.getDatabase();
        java.lang.String str55 = mongoProperties51.getUri();
        java.lang.Integer int56 = mongoProperties51.getPort();
        java.lang.String str57 = mongoProperties51.getHost();
        mongoProperties51.setUsername("");
        boolean boolean60 = mongoClientOptions49.equals((java.lang.Object) mongoProperties51);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder63.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder63.cursorFinalizerEnabled(true);
        boolean boolean70 = mongoClientOptions49.equals((java.lang.Object) builder63);
        com.mongodb.MongoClientOptions.Builder builder72 = builder63.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder73.build();
        int int75 = mongoClientOptions74.getMaxConnectionLifeTime();
        boolean boolean76 = mongoClientOptions74.isAutoConnectRetry();
        int int77 = mongoClientOptions74.getAcceptableLatencyDifference();
        long long78 = mongoClientOptions74.getMaxAutoConnectRetryTime();
        java.lang.String str79 = mongoClientOptions74.getDescription();
        int int80 = mongoClientOptions74.getHeartbeatFrequency();
        int int81 = mongoClientOptions74.getAcceptableLatencyDifference();
        int int82 = mongoClientOptions74.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory83 = mongoClientOptions74.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder84 = builder63.dbDecoderFactory(dBDecoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder47.dbDecoderFactory(dBDecoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "mongodb://localhost/test" + "'", str55, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 15 + "'", int77 == 15);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5000 + "'", int80 == 5000);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 15 + "'", int81 == 15);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 500 + "'", int82 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectRetryFrequency((int) (byte) 100);
        boolean boolean16 = mongoClientOptions1.equals((java.lang.Object) builder15);
        boolean boolean17 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions1.getDbDecoderFactory();
        java.lang.String str19 = mongoClientOptions1.toString();
        int int20 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatThreadCount();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder19.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions50.getReadPreference();
        com.mongodb.ReadPreference readPreference54 = mongoClientOptions50.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder55 = builder48.readPreference(readPreference54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder39.readPreference(readPreference54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder10.readPreference(readPreference54);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatConnectRetryFrequency(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(readPreference54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        java.lang.String str8 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatSocketTimeout(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getDatabase();
        java.lang.String str18 = mongoProperties14.getUri();
        java.lang.Integer int19 = mongoProperties14.getPort();
        java.lang.String str20 = mongoProperties14.getHost();
        char[] charArray21 = null;
        mongoProperties14.setPassword(charArray21);
        java.lang.String str23 = mongoProperties14.getMongoClientDatabase();
        mongoProperties14.setUsername("hi!");
        java.lang.String str26 = mongoProperties14.getDatabase();
        mongoProperties14.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getThreadsAllowedToBlockForConnectionMultiplier();
        int int36 = mongoClientOptions34.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties14.createMongoClient(mongoClientOptions34, environment37);
        int int39 = mongoClientOptions34.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions34.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder13.socketFactory(socketFactory40);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "test" + "'", str23, "test");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean16 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean17 = mongoClientOptions13.isAutoConnectRetry();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties6.createMongoClient(mongoClientOptions13, environment18);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.requiredReplicaSetName("");
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) "");
        javax.net.SocketFactory socketFactory28 = mongoClientOptions13.getSocketFactory();
        int int29 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions13, environment30);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setHost("hi!");
        java.lang.String str35 = mongoProperties32.getDatabase();
        java.lang.String str36 = mongoProperties32.getUri();
        java.lang.Integer int37 = mongoProperties32.getPort();
        java.lang.String str38 = mongoProperties32.getHost();
        mongoProperties32.setUsername("");
        java.lang.Integer int41 = mongoProperties32.getPort();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        boolean boolean44 = mongoClientOptions43.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties45.setHost("hi!");
        java.lang.String str48 = mongoProperties45.getDatabase();
        java.lang.String str49 = mongoProperties45.getUri();
        java.lang.Integer int50 = mongoProperties45.getPort();
        java.lang.String str51 = mongoProperties45.getHost();
        mongoProperties45.setUsername("");
        boolean boolean54 = mongoClientOptions43.equals((java.lang.Object) mongoProperties45);
        org.springframework.core.env.Environment environment55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties32.createMongoClient(mongoClientOptions43, environment55);
        int int57 = mongoClientOptions43.getHeartbeatThreadCount();
        int int58 = mongoClientOptions43.getHeartbeatThreadCount();
        int int59 = mongoClientOptions43.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties0.createMongoClient(mongoClientOptions43, environment60);
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions43.getDbDecoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mongodb://localhost/test" + "'", str49, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getHeartbeatThreadCount();
        int int10 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.readPreference(readPreference12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder13.writeConcern(writeConcern22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder23.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder23.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder47 = builder23.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getHeartbeatThreadCount();
        int int51 = mongoClientOptions49.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference52 = mongoClientOptions49.getReadPreference();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions49.getWriteConcern();
        long long54 = mongoClientOptions49.getMaxAutoConnectRetryTime();
        int int55 = mongoClientOptions49.getHeartbeatThreadCount();
        long long56 = mongoClientOptions49.getMaxAutoConnectRetryTime();
        int int57 = mongoClientOptions49.getHeartbeatConnectTimeout();
        int int58 = mongoClientOptions49.getHeartbeatThreadCount();
        int int59 = mongoClientOptions49.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions49.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder61 = builder47.writeConcern(writeConcern60);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertNotNull(readPreference52);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20000 + "'", int57 == 20000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 15 + "'", int59 == 15);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatThreadCount();
        int int26 = mongoClientOptions24.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions24.getHeartbeatThreadCount();
        int int28 = mongoClientOptions24.getMinHeartbeatFrequency();
        int int29 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder20.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder9.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getMaxConnectionLifeTime();
        boolean boolean44 = mongoClientOptions42.isAutoConnectRetry();
        int int45 = mongoClientOptions42.getAcceptableLatencyDifference();
        long long46 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        java.lang.String str47 = mongoClientOptions42.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions42.getWriteConcern();
        int int49 = mongoClientOptions42.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference50 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder51 = builder36.readPreference(readPreference50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder32.readPreference(readPreference50);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 15 + "'", int45 == 15);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 500 + "'", int49 == 500);
        org.junit.Assert.assertNotNull(readPreference50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str20 = mongoProperties0.getHost();
        java.lang.String str21 = mongoProperties0.getDatabase();
        java.lang.String str22 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getMaxConnectionLifeTime();
        int int40 = mongoClientOptions38.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions38.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder32.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxConnectionLifeTime((int) 'a');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties9.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getLocalThreshold();
        int int32 = mongoClientOptions28.getHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions28.isSocketKeepAlive();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties9.createMongoClient(mongoClientOptions28, environment34);
        mongoProperties9.setHost("mongodb://localhost/test");
        mongoProperties9.setPort((java.lang.Integer) 15);
        char[] charArray40 = mongoProperties9.getPassword();
        mongoProperties0.setPassword(charArray40);
        java.lang.String str42 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatThreadCount();
        int int46 = mongoClientOptions44.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient47 = mongoProperties0.createMongoClient(mongoClientOptions44);
        int int48 = mongoClientOptions44.getHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 120000 + "'", int46 == 120000);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5000 + "'", int48 == 5000);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str8 = mongoProperties0.getHost();
        char[] charArray9 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        int int37 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions31, environment38);
        int int40 = mongoClientOptions31.getLocalThreshold();
        int int41 = mongoClientOptions31.getMinHeartbeatFrequency();
        boolean boolean42 = mongoClientOptions31.isAutoConnectRetry();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions31.getSocketFactory();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(socketFactory43);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUsername("test");
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setHost("hi!");
        java.lang.String str10 = mongoProperties7.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties7.createMongoClient(mongoClientOptions11);
        mongoProperties7.setAuthenticationDatabase("");
        char[] charArray21 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties7.setPassword(charArray21);
        mongoProperties7.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getLocalThreshold();
        int int30 = mongoClientOptions26.getHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions26.isSocketKeepAlive();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties7.createMongoClient(mongoClientOptions26, environment32);
        mongoProperties7.setDatabase("hi!");
        char[] charArray36 = mongoProperties7.getPassword();
        java.lang.String str37 = mongoProperties7.getAuthenticationDatabase();
        boolean boolean38 = mongoClientOptions1.equals((java.lang.Object) str37);
        boolean boolean39 = mongoClientOptions1.isAutoConnectRetry();
        int int40 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int41 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str42 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions1.getDescription();
        int int17 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int18 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        int int12 = mongoClientOptions9.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions9.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder7.socketFactory(socketFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.localThreshold(35);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder22 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectTimeout(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder51 = builder49.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        int int10 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getHeartbeatThreadCount();
        long long32 = mongoClientOptions28.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions28.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder26.socketFactory(socketFactory33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder11.socketFactory(socketFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.socketFactory(socketFactory33);
        com.mongodb.MongoClientOptions.Builder builder38 = builder6.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        mongoProperties3.setDatabase("");
        mongoProperties3.setAuthenticationDatabase("test");
        mongoProperties3.setUsername("");
        char[] charArray19 = mongoProperties3.getPassword();
        mongoProperties3.setGridFsDatabase("hi!");
        java.lang.String str22 = mongoProperties3.getHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectTimeout();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getSocketTimeout();
        int int11 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("");
        mongoProperties0.setUri("");
        java.lang.String str20 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getDatabase();
        java.lang.String str26 = mongoProperties22.getUri();
        java.lang.Integer int27 = mongoProperties22.getPort();
        java.lang.String str28 = mongoProperties22.getHost();
        mongoProperties22.setUsername("");
        boolean boolean31 = mongoClientOptions20.equals((java.lang.Object) mongoProperties22);
        long long32 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatThreadCount();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        int int37 = mongoClientOptions34.getLocalThreshold();
        int int38 = mongoClientOptions34.getHeartbeatFrequency();
        boolean boolean39 = mongoClientOptions20.equals((java.lang.Object) mongoClientOptions34);
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder17.dbEncoderFactory(dBEncoderFactory40);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.setHost("hi!");
        java.lang.String str45 = mongoProperties42.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties42.createMongoClient(mongoClientOptions46);
        mongoProperties42.setAuthenticationDatabase("");
        char[] charArray56 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties42.setPassword(charArray56);
        mongoProperties42.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties42.createMongoClient(mongoClientOptions61, environment62);
        com.mongodb.DBDecoderFactory dBDecoderFactory64 = mongoClientOptions61.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder41.dbDecoderFactory(dBDecoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder10.dbDecoderFactory(dBDecoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder10.threadsAllowedToBlockForConnectionMultiplier(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(dBDecoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatThreadCount(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClient11);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxWaitTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxAutoConnectRetryTime(10L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        int int12 = mongoClientOptions9.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions9.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder7.socketFactory(socketFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.localThreshold(35);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder14.build();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions21.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(writeConcern22);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatFrequency();
        int int11 = mongoClientOptions9.getConnectTimeout();
        int int12 = mongoClientOptions9.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectionsPerHost((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatThreadCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        int int22 = mongoClientOptions19.getConnectTimeout();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        int int14 = mongoClientOptions11.getHeartbeatFrequency();
        int int15 = mongoClientOptions11.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder3.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.acceptableLatencyDifference((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        int int8 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setHost("hi!");
        mongoProperties26.setUri("");
        char[] charArray33 = new char[] { 'a', '#' };
        mongoProperties26.setPassword(charArray33);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setHost("hi!");
        java.lang.String str38 = mongoProperties35.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties35.createMongoClient(mongoClientOptions39);
        mongoProperties35.setAuthenticationDatabase("");
        char[] charArray49 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties35.setPassword(charArray49);
        mongoProperties26.setPassword(charArray49);
        mongoProperties0.setPassword(charArray49);
        java.lang.String str53 = mongoProperties0.getUri();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getMaxConnectionLifeTime();
        int int59 = mongoClientOptions57.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient60 = mongoProperties0.createMongoClient(mongoClientOptions57);
        int int61 = mongoClientOptions57.getConnectionsPerHost();
        boolean boolean62 = mongoClientOptions57.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getLocalThreshold();
        int int6 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int7 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions22.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions22.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder20.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.maxConnectionLifeTime(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean11 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.requiredReplicaSetName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder5.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        int int7 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        boolean boolean8 = mongoClientOptions1.isAutoConnectRetry();
        int int9 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.Integer int11 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getLocalThreshold();
        int int9 = mongoClientOptions1.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder11.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions5.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions5.equals((java.lang.Object) mongoClientOptions14);
        java.lang.String str16 = mongoClientOptions5.toString();
        int int17 = mongoClientOptions5.getLocalThreshold();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions5.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions5.getDbDecoderFactory();
        int int20 = mongoClientOptions5.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        boolean boolean9 = mongoClientOptions1.isAutoConnectRetry();
        int int10 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setHost("test");
        mongoProperties0.setPort((java.lang.Integer) 1);
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder5 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatThreadCount();
        int int54 = mongoClientOptions52.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions52.getHeartbeatThreadCount();
        long long56 = mongoClientOptions52.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions52.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder50.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder35.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder30.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder61 = builder23.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatConnectTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties64 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties64.setHost("hi!");
        java.lang.String str67 = mongoProperties64.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions68 = null;
        com.mongodb.MongoClient mongoClient69 = mongoProperties64.createMongoClient(mongoClientOptions68);
        mongoProperties64.setAuthenticationDatabase("");
        char[] charArray78 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties64.setPassword(charArray78);
        mongoProperties64.setDatabase("");
        java.lang.Class<?> wildcardClass82 = mongoProperties64.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder83 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder83.build();
        int int85 = mongoClientOptions84.getMaxConnectionLifeTime();
        boolean boolean86 = mongoClientOptions84.isAutoConnectRetry();
        int int87 = mongoClientOptions84.getAcceptableLatencyDifference();
        long long88 = mongoClientOptions84.getMaxAutoConnectRetryTime();
        int int89 = mongoClientOptions84.getLocalThreshold();
        com.mongodb.MongoClient mongoClient90 = mongoProperties64.createMongoClient(mongoClientOptions84);
        com.mongodb.DBEncoderFactory dBEncoderFactory91 = mongoClientOptions84.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder92 = builder61.dbEncoderFactory(dBEncoderFactory91);
        com.mongodb.MongoClientOptions.Builder builder93 = builder15.dbEncoderFactory(dBEncoderFactory91);
        com.mongodb.MongoClientOptions.Builder builder94 = builder4.dbEncoderFactory(dBEncoderFactory91);
        com.mongodb.MongoClientOptions.Builder builder96 = builder4.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder98 = builder4.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(mongoClient69);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 15 + "'", int87 == 15);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 15 + "'", int89 == 15);
        org.junit.Assert.assertNotNull(mongoClient90);
        org.junit.Assert.assertNotNull(dBEncoderFactory91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout(52);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        int int9 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions1.getLocalThreshold();
        int int11 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        mongoProperties0.setGridFsDatabase("");
        char[] charArray14 = mongoProperties0.getPassword();
        char[] charArray15 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(charArray15);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str12 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions20.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions20, environment23);
        int int25 = mongoClientOptions20.getConnectionsPerHost();
        int int26 = mongoClientOptions20.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions15.isAlwaysUseMBeans();
        int int19 = mongoClientOptions15.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatThreadCount(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.String str15 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("");
        mongoProperties0.clearPassword();
        java.lang.String str19 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions21.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions21.getDbEncoderFactory();
        java.lang.String str25 = mongoClientOptions21.getDescription();
        java.lang.String str26 = mongoClientOptions21.toString();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions21);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient27);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.heartbeatThreadCount(500);
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.heartbeatConnectRetryFrequency(35);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        long long18 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions14.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime(35);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatThreadCount();
        int int35 = mongoClientOptions33.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder37 = builder27.readPreference(readPreference36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder27.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getMaxConnectionLifeTime();
        boolean boolean43 = mongoClientOptions41.isAutoConnectRetry();
        boolean boolean44 = mongoClientOptions41.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder39.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.alwaysUseMBeans(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.setHost("hi!");
        java.lang.String str54 = mongoProperties51.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties51.createMongoClient(mongoClientOptions55);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getMaxConnectionLifeTime();
        boolean boolean60 = mongoClientOptions58.isCursorFinalizerEnabled();
        boolean boolean61 = mongoClientOptions58.isAlwaysUseMBeans();
        boolean boolean62 = mongoClientOptions58.isAutoConnectRetry();
        org.springframework.core.env.Environment environment63 = null;
        com.mongodb.MongoClient mongoClient64 = mongoProperties51.createMongoClient(mongoClientOptions58, environment63);
        int int65 = mongoClientOptions58.getHeartbeatConnectRetryFrequency();
        int int66 = mongoClientOptions58.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder46.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder20.dbEncoderFactory(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 500 + "'", int65 == 500);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean28 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean29 = mongoClientOptions18.isCursorFinalizerEnabled();
        int int30 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions18.getLocalThreshold();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout(15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getDatabase();
        java.lang.String str16 = mongoProperties12.getUri();
        java.lang.Integer int17 = mongoProperties12.getPort();
        java.lang.String str18 = mongoProperties12.getHost();
        mongoProperties12.setUsername("");
        boolean boolean21 = mongoClientOptions10.equals((java.lang.Object) mongoProperties12);
        java.lang.String str22 = mongoProperties12.getUri();
        mongoProperties12.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        mongoProperties25.setUri("");
        char[] charArray32 = new char[] { 'a', '#' };
        mongoProperties25.setPassword(charArray32);
        char[] charArray39 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties25.setPassword(charArray39);
        mongoProperties12.setPassword(charArray39);
        mongoProperties0.setPassword(charArray39);
        java.lang.Integer int43 = mongoProperties0.getPort();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int43);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getSocketTimeout();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatThreadCount();
        int int39 = mongoClientOptions37.getHeartbeatSocketTimeout();
        int int40 = mongoClientOptions37.getHeartbeatThreadCount();
        java.lang.String str41 = mongoClientOptions37.toString();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions37.getWriteConcern();
        int int43 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder29.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder25.readPreference(readPreference44);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions21.isAutoConnectRetry();
        int int24 = mongoClientOptions21.getAcceptableLatencyDifference();
        long long25 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        java.lang.String str26 = mongoClientOptions21.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions21.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder17.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory3 = mongoClientOptions1.getDbEncoderFactory();
        int int4 = mongoClientOptions1.getMinConnectionsPerHost();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions14.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.dbDecoderFactory(dBDecoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.heartbeatConnectRetryFrequency((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatThreadCount((int) (short) 10);
        java.lang.Class<?> wildcardClass10 = builder9.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions5.getDbDecoderFactory();
        int int15 = mongoClientOptions5.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatThreadCount(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder13.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getMaxConnectionLifeTime();
        boolean boolean30 = mongoClientOptions28.isCursorFinalizerEnabled();
        boolean boolean31 = mongoClientOptions28.isAlwaysUseMBeans();
        int int32 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions28.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder26.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder26.heartbeatConnectRetryFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder37.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder40 = builder37.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.setHost("hi!");
        java.lang.String str54 = mongoProperties51.getUsername();
        java.lang.Class<?> wildcardClass55 = mongoProperties51.getFieldNamingStrategy();
        java.lang.String str56 = mongoProperties51.getAuthenticationDatabase();
        java.lang.String str57 = mongoProperties51.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        int int60 = mongoClientOptions59.getMaxConnectionLifeTime();
        boolean boolean61 = mongoClientOptions59.isAutoConnectRetry();
        boolean boolean62 = mongoClientOptions59.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient63 = mongoProperties51.createMongoClient(mongoClientOptions59);
        boolean boolean64 = mongoClientOptions59.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions59.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder50.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder46.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder26.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder12.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder71 = builder12.maxConnectionIdleTime(27017);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean31 = mongoClientOptions29.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions34.getReadPreference();
        boolean boolean37 = mongoClientOptions29.equals((java.lang.Object) readPreference36);
        javax.net.SocketFactory socketFactory38 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder19.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder12.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder12.connectionsPerHost((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder44 = builder12.heartbeatThreadCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        int int15 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean16 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        boolean boolean30 = mongoClientOptions29.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setHost("hi!");
        java.lang.String str34 = mongoProperties31.getDatabase();
        java.lang.String str35 = mongoProperties31.getUri();
        java.lang.Integer int36 = mongoProperties31.getPort();
        java.lang.String str37 = mongoProperties31.getHost();
        mongoProperties31.setUsername("");
        boolean boolean40 = mongoClientOptions29.equals((java.lang.Object) mongoProperties31);
        long long41 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatThreadCount();
        int int45 = mongoClientOptions43.getHeartbeatSocketTimeout();
        int int46 = mongoClientOptions43.getLocalThreshold();
        int int47 = mongoClientOptions43.getHeartbeatFrequency();
        boolean boolean48 = mongoClientOptions29.equals((java.lang.Object) mongoClientOptions43);
        javax.net.SocketFactory socketFactory49 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder8.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb://localhost/test" + "'", str35, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5000 + "'", int47 == 5000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        int int7 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("test");
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory8 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder7.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        int int14 = mongoClientOptions11.getHeartbeatThreadCount();
        java.lang.String str15 = mongoClientOptions11.toString();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions11.getWriteConcern();
        int int17 = mongoClientOptions11.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions11.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.readPreference(readPreference18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder3.maxConnectionIdleTime(5000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setUri("test");
        java.lang.String str12 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatThreadCount();
        int int45 = mongoClientOptions43.getHeartbeatSocketTimeout();
        int int46 = mongoClientOptions43.getHeartbeatThreadCount();
        long long47 = mongoClientOptions43.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory48 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder41.socketFactory(socketFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder26.socketFactory(socketFactory48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder21.socketFactory(socketFactory48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder14.socketFactory(socketFactory48);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties55.setHost("hi!");
        java.lang.String str58 = mongoProperties55.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties55.createMongoClient(mongoClientOptions59);
        mongoProperties55.setAuthenticationDatabase("");
        char[] charArray69 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties55.setPassword(charArray69);
        mongoProperties55.setDatabase("");
        java.lang.Class<?> wildcardClass73 = mongoProperties55.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        int int76 = mongoClientOptions75.getMaxConnectionLifeTime();
        boolean boolean77 = mongoClientOptions75.isAutoConnectRetry();
        int int78 = mongoClientOptions75.getAcceptableLatencyDifference();
        long long79 = mongoClientOptions75.getMaxAutoConnectRetryTime();
        int int80 = mongoClientOptions75.getLocalThreshold();
        com.mongodb.MongoClient mongoClient81 = mongoProperties55.createMongoClient(mongoClientOptions75);
        com.mongodb.DBEncoderFactory dBEncoderFactory82 = mongoClientOptions75.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder83 = builder52.dbEncoderFactory(dBEncoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder6.dbEncoderFactory(dBEncoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder86 = builder6.maxWaitTime(100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(socketFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 15 + "'", int78 == 15);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 15 + "'", int80 == 15);
        org.junit.Assert.assertNotNull(mongoClient81);
        org.junit.Assert.assertNotNull(dBEncoderFactory82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectTimeout(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        boolean boolean25 = mongoClientOptions11.isCursorFinalizerEnabled();
        int int26 = mongoClientOptions11.getSocketTimeout();
        int int27 = mongoClientOptions11.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        int int16 = mongoClientOptions10.getMinConnectionsPerHost();
        int int17 = mongoClientOptions10.getLocalThreshold();
        int int18 = mongoClientOptions10.getSocketTimeout();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions10, environment20);
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions10.getDbDecoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions25);
        mongoProperties21.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass29 = mongoProperties21.getFieldNamingStrategy();
        char[] charArray30 = new char[] {};
        mongoProperties21.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        mongoProperties0.setPort((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[]");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("hi!");
        char[] charArray8 = null;
        mongoProperties0.setPassword(charArray8);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("");
        java.lang.String str4 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str15 = mongoProperties0.getHost();
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(27017);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatThreadCount();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getHeartbeatThreadCount();
        long long16 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions12.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.connectionsPerHost(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getGridFsDatabase();
        mongoProperties3.setUri("hi!");
        java.lang.String str16 = mongoProperties3.getGridFsDatabase();
        mongoProperties3.setDatabase("hi!");
        mongoProperties3.clearPassword();
        mongoProperties3.setHost("test");
        mongoProperties3.setPort((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        int int14 = mongoClientOptions10.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions10.equals((java.lang.Object) mongoClientOptions17);
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions10);
        mongoProperties0.setUri("");
        java.lang.String str23 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getHeartbeatThreadCount();
        int int32 = mongoClientOptions28.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions28.getReadPreference();
        boolean boolean35 = mongoClientOptions28.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder26.dbEncoderFactory(dBEncoderFactory36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder26.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatConnectRetryFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getMaxConnectionLifeTime();
        boolean boolean47 = mongoClientOptions45.isAutoConnectRetry();
        int int48 = mongoClientOptions45.getAcceptableLatencyDifference();
        long long49 = mongoClientOptions45.getMaxAutoConnectRetryTime();
        java.lang.String str50 = mongoClientOptions45.getDescription();
        int int51 = mongoClientOptions45.getHeartbeatFrequency();
        int int52 = mongoClientOptions45.getAcceptableLatencyDifference();
        int int53 = mongoClientOptions45.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions45.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder41.dbDecoderFactory(dBDecoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder63.build();
        int int65 = mongoClientOptions64.getHeartbeatThreadCount();
        int int66 = mongoClientOptions64.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions64.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder58.readPreference(readPreference67);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder58.build();
        boolean boolean70 = mongoClientOptions69.isCursorFinalizerEnabled();
        int int71 = mongoClientOptions69.getLocalThreshold();
        boolean boolean72 = mongoClientOptions69.isSocketKeepAlive();
        int int73 = mongoClientOptions69.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions69.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder75 = builder41.readPreference(readPreference74);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5000 + "'", int51 == 5000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 15 + "'", int52 == 15);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 15 + "'", int71 == 15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getDatabase();
        java.lang.String str18 = mongoProperties14.getUri();
        mongoProperties14.setDatabase("mongodb://localhost/test");
        java.lang.Integer int21 = mongoProperties14.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        mongoProperties22.setUri("");
        char[] charArray29 = new char[] { 'a', '#' };
        mongoProperties22.setPassword(charArray29);
        char[] charArray36 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties22.setPassword(charArray36);
        mongoProperties14.setPassword(charArray36);
        mongoProperties0.setPassword(charArray36);
        java.lang.String str40 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  ,  , a,  ]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions7.getLocalThreshold();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        int int12 = mongoClientOptions7.getConnectionsPerHost();
        int int13 = mongoClientOptions7.getLocalThreshold();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions7, environment14);
        int int16 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str17 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int34 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("test");
        char[] charArray37 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatThreadCount();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder7.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        boolean boolean24 = mongoClientOptions23.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        java.lang.String str28 = mongoProperties25.getDatabase();
        java.lang.String str29 = mongoProperties25.getUri();
        java.lang.Integer int30 = mongoProperties25.getPort();
        java.lang.String str31 = mongoProperties25.getHost();
        mongoProperties25.setUsername("");
        boolean boolean34 = mongoClientOptions23.equals((java.lang.Object) mongoProperties25);
        java.lang.String str35 = mongoClientOptions23.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder21.dbEncoderFactory(dBEncoderFactory36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder0.dbEncoderFactory(dBEncoderFactory36);
        com.mongodb.MongoClientOptions.Builder builder40 = builder0.socketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxWaitTime((int) (byte) 10);
        java.lang.Class<?> wildcardClass17 = builder10.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        mongoProperties6.setUri("");
        char[] charArray13 = new char[] { 'a', '#' };
        mongoProperties6.setPassword(charArray13);
        mongoProperties0.setPassword(charArray13);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str21 = mongoProperties0.getUri();
        char[] charArray22 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUri("hi!");
        java.lang.Integer int27 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #]");
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions22.getHeartbeatThreadCount();
        java.lang.String str26 = mongoClientOptions22.toString();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectTimeout();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        int int11 = mongoClientOptions1.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions1.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        int int8 = mongoClientOptions1.getHeartbeatFrequency();
        int int9 = mongoClientOptions1.getMinConnectionsPerHost();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        boolean boolean11 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str12 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5000 + "'", int8 == 5000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setHost("hi!");
        java.lang.String str10 = mongoProperties7.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties7.createMongoClient(mongoClientOptions11);
        mongoProperties7.setAuthenticationDatabase("");
        char[] charArray21 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties7.setPassword(charArray21);
        mongoProperties7.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getLocalThreshold();
        int int30 = mongoClientOptions26.getHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions26.isSocketKeepAlive();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties7.createMongoClient(mongoClientOptions26, environment32);
        mongoProperties7.setDatabase("hi!");
        char[] charArray36 = mongoProperties7.getPassword();
        java.lang.String str37 = mongoProperties7.getAuthenticationDatabase();
        boolean boolean38 = mongoClientOptions1.equals((java.lang.Object) str37);
        int int39 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean40 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5000 + "'", int39 == 5000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatFrequency();
        int int11 = mongoClientOptions9.getConnectTimeout();
        int int12 = mongoClientOptions9.getConnectTimeout();
        int int13 = mongoClientOptions9.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        long long4 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        int int7 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str8 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.String str17 = mongoProperties0.getUri();
        java.lang.String str18 = mongoProperties0.getDatabase();
        java.lang.Integer int19 = mongoProperties0.getPort();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        mongoProperties6.setPort((java.lang.Integer) 120000);
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties6.createMongoClient(mongoClientOptions33, environment34);
        mongoProperties6.setPort((java.lang.Integer) 20000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        int int42 = mongoClientOptions39.getMaxWaitTime();
        long long43 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        int int44 = mongoClientOptions39.getMaxConnectionLifeTime();
        int int45 = mongoClientOptions39.getHeartbeatFrequency();
        long long46 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties6.createMongoClient(mongoClientOptions39, environment47);
        mongoProperties6.setUri("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = mongoProperties6.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120000 + "'", int42 == 120000);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5000 + "'", int45 == 5000);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(mongoClient48);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatFrequency();
        int int4 = mongoClientOptions1.getConnectionsPerHost();
        int int5 = mongoClientOptions1.getLocalThreshold();
        int int6 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5000 + "'", int3 == 5000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20000 + "'", int6 == 20000);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        int int14 = mongoClientOptions5.getMinConnectionsPerHost();
        int int15 = mongoClientOptions5.getAcceptableLatencyDifference();
        boolean boolean16 = mongoClientOptions5.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getDatabase();
        java.lang.Class<?> wildcardClass15 = mongoProperties11.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getDatabase();
        java.lang.String str20 = mongoProperties16.getUri();
        java.lang.Integer int21 = mongoProperties16.getPort();
        java.lang.Class<?> wildcardClass22 = mongoProperties16.getFieldNamingStrategy();
        java.lang.String str23 = mongoProperties16.getGridFsDatabase();
        char[] charArray24 = mongoProperties16.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        java.lang.String str28 = mongoProperties25.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties25.createMongoClient(mongoClientOptions29);
        mongoProperties25.setAuthenticationDatabase("");
        char[] charArray39 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties25.setPassword(charArray39);
        mongoProperties25.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties25.createMongoClient(mongoClientOptions44, environment45);
        int int47 = mongoClientOptions44.getConnectTimeout();
        int int48 = mongoClientOptions44.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties16.createMongoClient(mongoClientOptions44, environment49);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.setHost("hi!");
        mongoProperties51.setUri("");
        char[] charArray58 = new char[] { 'a', '#' };
        mongoProperties51.setPassword(charArray58);
        char[] charArray65 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties51.setPassword(charArray65);
        mongoProperties16.setPassword(charArray65);
        mongoProperties11.setPassword(charArray65);
        mongoProperties0.setPassword(charArray65);
        char[] charArray70 = mongoProperties0.getPassword();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5000 + "'", int48 == 5000);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a, #]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#,  ,  , a,  ]");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("");
        java.lang.String str29 = mongoProperties0.getHost();
        java.lang.String str30 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder8.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        int int18 = mongoClientOptions15.getAcceptableLatencyDifference();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions15);
        char[] charArray23 = mongoProperties0.getPassword();
        java.lang.String str24 = mongoProperties0.getUsername();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatThreadCount();
        int int26 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setHost("hi!");
        java.lang.String str39 = mongoProperties36.getDatabase();
        java.lang.String str40 = mongoProperties36.getUri();
        java.lang.Integer int41 = mongoProperties36.getPort();
        java.lang.String str42 = mongoProperties36.getHost();
        mongoProperties36.setUsername("");
        boolean boolean45 = mongoClientOptions34.equals((java.lang.Object) mongoProperties36);
        java.lang.String str46 = mongoClientOptions34.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions34.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder32.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder11.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder10.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder52 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder10.connectTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb://localhost/test" + "'", str40, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        int int23 = mongoClientOptions19.getConnectTimeout();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        boolean boolean25 = mongoClientOptions19.isAlwaysUseMBeans();
        int int26 = mongoClientOptions19.getAcceptableLatencyDifference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setHost("hi!");
        java.lang.String str30 = mongoProperties27.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties27.createMongoClient(mongoClientOptions31);
        mongoProperties27.setAuthenticationDatabase("");
        char[] charArray41 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties27.setPassword(charArray41);
        mongoProperties27.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties27.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions46.getDbDecoderFactory();
        boolean boolean50 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions46);
        int int51 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int52 = mongoClientOptions19.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions12.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions12.getDbEncoderFactory();
        int int16 = mongoClientOptions12.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12, environment17);
        java.lang.String str19 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.acceptableLatencyDifference((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout(1);
        boolean boolean14 = mongoClientOptions1.equals((java.lang.Object) builder13);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setHost("hi!");
        java.lang.String str18 = mongoProperties15.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties15.createMongoClient(mongoClientOptions19);
        mongoProperties15.setAuthenticationDatabase("");
        char[] charArray29 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties15.setPassword(charArray29);
        mongoProperties15.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties15.createMongoClient(mongoClientOptions34, environment35);
        int int37 = mongoClientOptions34.getMaxConnectionIdleTime();
        boolean boolean38 = mongoClientOptions1.equals((java.lang.Object) int37);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setHost("");
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setHost("hi!");
        java.lang.String str30 = mongoProperties27.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties27.createMongoClient(mongoClientOptions31);
        mongoProperties27.setAuthenticationDatabase("");
        char[] charArray41 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties27.setPassword(charArray41);
        mongoProperties27.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties27.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder24.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder24.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder56 = builder24.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties60 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties60.setHost("hi!");
        java.lang.String str63 = mongoProperties60.getDatabase();
        java.lang.String str64 = mongoProperties60.getUri();
        java.lang.Integer int65 = mongoProperties60.getPort();
        java.lang.String str66 = mongoProperties60.getHost();
        mongoProperties60.setUsername("");
        boolean boolean69 = mongoClientOptions58.equals((java.lang.Object) mongoProperties60);
        java.lang.String str70 = mongoClientOptions58.toString();
        int int71 = mongoClientOptions58.getMaxWaitTime();
        java.lang.String str72 = mongoClientOptions58.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions58.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder24.dbDecoderFactory(dBDecoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder75.build();
        int int77 = mongoClientOptions76.getHeartbeatThreadCount();
        int int78 = mongoClientOptions76.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference79 = mongoClientOptions76.getReadPreference();
        com.mongodb.WriteConcern writeConcern80 = mongoClientOptions76.getWriteConcern();
        boolean boolean81 = mongoClientOptions76.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern82 = mongoClientOptions76.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder83 = builder24.writeConcern(writeConcern82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder9.writeConcern(writeConcern82);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder88 = builder84.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder89 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions90 = builder89.build();
        int int91 = mongoClientOptions90.getHeartbeatThreadCount();
        int int92 = mongoClientOptions90.getHeartbeatSocketTimeout();
        int int93 = mongoClientOptions90.getLocalThreshold();
        int int94 = mongoClientOptions90.getHeartbeatFrequency();
        int int95 = mongoClientOptions90.getMaxConnectionIdleTime();
        int int96 = mongoClientOptions90.getConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern97 = mongoClientOptions90.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder98 = builder88.writeConcern(writeConcern97);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "mongodb://localhost/test" + "'", str64, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 120000 + "'", int71 == 120000);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 20000 + "'", int78 == 20000);
        org.junit.Assert.assertNotNull(readPreference79);
        org.junit.Assert.assertNotNull(writeConcern80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(writeConcern82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(mongoClientOptions90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 20000 + "'", int92 == 20000);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 15 + "'", int93 == 15);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5000 + "'", int94 == 5000);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertNotNull(writeConcern97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatFrequency();
        int int4 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getLocalThreshold();
        boolean boolean17 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions15);
        int int18 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int19 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5000 + "'", int3 == 5000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        boolean boolean6 = mongoClientOptions5.isSocketKeepAlive();
        int int7 = mongoClientOptions5.getHeartbeatThreadCount();
        int int8 = mongoClientOptions5.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUsername("test");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setPort((java.lang.Integer) 120000);
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setUri("");
        java.lang.String str12 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getLocalThreshold();
        int int18 = mongoClientOptions14.getHeartbeatFrequency();
        int int19 = mongoClientOptions14.getMinConnectionsPerHost();
        boolean boolean20 = mongoClientOptions14.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions14.getWriteConcern();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions14, environment22);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertNotNull(mongoClient23);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        java.lang.String str7 = mongoClientOptions1.getRequiredReplicaSetName();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatThreadCount((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.acceptableLatencyDifference(0);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int7 = mongoClientOptions1.getConnectionsPerHost();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int9 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertNotNull(writeConcern10);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str5 = mongoClientOptions1.toString();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions1.getWriteConcern();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        java.lang.String str8 = mongoClientOptions1.toString();
        int int9 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int10 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory5 = mongoClientOptions1.getSocketFactory();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        int int7 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(socketFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.maxConnectionIdleTime(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions28.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions28.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.dbDecoderFactory(dBDecoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder33 = builder13.dbDecoderFactory(dBDecoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getHeartbeatThreadCount();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder52.readPreference(readPreference61);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder52.build();
        boolean boolean64 = mongoClientOptions63.isCursorFinalizerEnabled();
        int int65 = mongoClientOptions63.getLocalThreshold();
        boolean boolean66 = mongoClientOptions63.isSocketKeepAlive();
        int int67 = mongoClientOptions63.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern68 = mongoClientOptions63.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder69 = builder49.writeConcern(writeConcern68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder33.writeConcern(writeConcern68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder70.legacyDefaults();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(writeConcern68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions1.toString();
        int int17 = mongoClientOptions1.getSocketTimeout();
        java.lang.String str18 = mongoClientOptions1.getDescription();
        int int19 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder12.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions23.getWriteConcern();
        boolean boolean28 = mongoClientOptions23.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder12.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str8 = mongoClientOptions1.toString();
        int int9 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder3.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str28 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getMaxConnectionLifeTime();
        boolean boolean32 = mongoClientOptions30.isAutoConnectRetry();
        int int33 = mongoClientOptions30.getAcceptableLatencyDifference();
        long long34 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        java.lang.String str35 = mongoClientOptions30.getRequiredReplicaSetName();
        boolean boolean36 = mongoClientOptions30.isSocketKeepAlive();
        int int37 = mongoClientOptions30.getLocalThreshold();
        boolean boolean38 = mongoClientOptions30.isCursorFinalizerEnabled();
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions30);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.setHost("hi!");
        java.lang.String str43 = mongoProperties40.getDatabase();
        java.lang.String str44 = mongoProperties40.getUri();
        java.lang.String str45 = mongoProperties40.getUsername();
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getMaxConnectionLifeTime();
        boolean boolean49 = mongoClientOptions47.isCursorFinalizerEnabled();
        boolean boolean50 = mongoClientOptions47.isAlwaysUseMBeans();
        int int51 = mongoClientOptions47.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory52 = mongoClientOptions47.getDbDecoderFactory();
        int int53 = mongoClientOptions47.getConnectTimeout();
        boolean boolean54 = mongoClientOptions47.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient55 = mongoProperties40.createMongoClient(mongoClientOptions47);
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties0.createMongoClient(mongoClientOptions47, environment56);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb://localhost/test" + "'", str44, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 120000 + "'", int51 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10000 + "'", int53 == 10000);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertNotNull(mongoClient57);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        int int8 = mongoClientOptions1.getLocalThreshold();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions1.getHeartbeatThreadCount();
        int int11 = mongoClientOptions1.getConnectTimeout();
        boolean boolean12 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions21.getMaxWaitTime();
        long long25 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions21.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions21);
        long long28 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions21.getWriteConcern();
        int int30 = mongoClientOptions21.getConnectTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean50 = mongoClientOptions48.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions53.getReadPreference();
        boolean boolean56 = mongoClientOptions48.equals((java.lang.Object) readPreference55);
        com.mongodb.WriteConcern writeConcern57 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder58 = builder42.writeConcern(writeConcern57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder42.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(writeConcern57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getUri();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        int int18 = mongoClientOptions15.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClient mongoClient20 = mongoProperties3.createMongoClient(mongoClientOptions15);
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions15.getReadPreference();
        int int22 = mongoClientOptions15.getHeartbeatConnectTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setHost("hi!");
        java.lang.String str26 = mongoProperties23.getUsername();
        java.lang.Class<?> wildcardClass27 = mongoProperties23.getFieldNamingStrategy();
        java.lang.String str28 = mongoProperties23.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass29 = mongoProperties23.getFieldNamingStrategy();
        mongoProperties23.clearPassword();
        mongoProperties23.setUri("mongodb://localhost/test");
        mongoProperties23.clearPassword();
        boolean boolean34 = mongoClientOptions15.equals((java.lang.Object) mongoProperties23);
        int int35 = mongoClientOptions15.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions5.getDbDecoderFactory();
        long long15 = mongoClientOptions5.getMaxAutoConnectRetryTime();
        boolean boolean16 = mongoClientOptions5.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions5.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        mongoProperties0.setHost("");
        mongoProperties0.setUsername("");
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 5000);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        java.lang.String str6 = mongoClientOptions5.toString();
        int int7 = mongoClientOptions5.getLocalThreshold();
        int int8 = mongoClientOptions5.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder28 = builder19.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder19.minConnectionsPerHost(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setHost("hi!");
        java.lang.String str34 = mongoProperties31.getUsername();
        java.lang.Class<?> wildcardClass35 = mongoProperties31.getFieldNamingStrategy();
        java.lang.String str36 = mongoProperties31.getAuthenticationDatabase();
        java.lang.String str37 = mongoProperties31.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getMaxConnectionLifeTime();
        boolean boolean41 = mongoClientOptions39.isAutoConnectRetry();
        boolean boolean42 = mongoClientOptions39.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient43 = mongoProperties31.createMongoClient(mongoClientOptions39);
        java.lang.String str44 = mongoProperties31.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getMaxConnectionLifeTime();
        boolean boolean48 = mongoClientOptions46.isAutoConnectRetry();
        int int49 = mongoClientOptions46.getAcceptableLatencyDifference();
        long long50 = mongoClientOptions46.getMaxAutoConnectRetryTime();
        java.lang.String str51 = mongoClientOptions46.getDescription();
        int int52 = mongoClientOptions46.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient53 = mongoProperties31.createMongoClient(mongoClientOptions46);
        com.mongodb.WriteConcern writeConcern54 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder55 = builder19.writeConcern(writeConcern54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder0.writeConcern(writeConcern54);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5000 + "'", int52 == 5000);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(writeConcern54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatThreadCount((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectRetryFrequency(35);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatThreadCount((int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout(1);
        boolean boolean14 = mongoClientOptions1.equals((java.lang.Object) builder13);
        int int15 = mongoClientOptions1.getMinConnectionsPerHost();
        int int16 = mongoClientOptions1.getMaxWaitTime();
        int int17 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatThreadCount();
        int int32 = mongoClientOptions30.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions30.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder22.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        java.lang.String str40 = mongoClientOptions36.toString();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions36.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder22.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder13.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder47 = builder43.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getHeartbeatThreadCount();
        int int33 = mongoClientOptions31.getHeartbeatSocketTimeout();
        int int34 = mongoClientOptions31.getLocalThreshold();
        int int35 = mongoClientOptions31.getHeartbeatFrequency();
        boolean boolean36 = mongoClientOptions31.isSocketKeepAlive();
        int int37 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int38 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        int int39 = mongoClientOptions31.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions31.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder21.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder15.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.connectionsPerHost(500);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5000 + "'", int35 == 5000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        boolean boolean8 = mongoClientOptions1.equals((java.lang.Object) (-1.0f));
        long long9 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        mongoProperties0.setUri("test");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions10.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean28 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions31.getReadPreference();
        boolean boolean34 = mongoClientOptions26.equals((java.lang.Object) readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder20.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder37 = builder20.minConnectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        mongoProperties8.setUri("");
        char[] charArray15 = new char[] { 'a', '#' };
        mongoProperties8.setPassword(charArray15);
        char[] charArray22 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray22);
        java.lang.String str24 = mongoProperties8.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isCursorFinalizerEnabled();
        boolean boolean29 = mongoClientOptions26.isAlwaysUseMBeans();
        boolean boolean30 = mongoClientOptions26.isAutoConnectRetry();
        boolean boolean31 = mongoClientOptions26.isAutoConnectRetry();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties8.createMongoClient(mongoClientOptions26, environment32);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setHost("hi!");
        mongoProperties34.setUri("");
        char[] charArray41 = new char[] { 'a', '#' };
        mongoProperties34.setPassword(charArray41);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties43.setHost("hi!");
        java.lang.String str46 = mongoProperties43.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties43.createMongoClient(mongoClientOptions47);
        mongoProperties43.setAuthenticationDatabase("");
        char[] charArray57 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties43.setPassword(charArray57);
        mongoProperties34.setPassword(charArray57);
        mongoProperties8.setPassword(charArray57);
        mongoProperties0.setPassword(charArray57);
        java.lang.String str62 = mongoProperties0.getMongoClientDatabase();
        char[] charArray63 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "test" + "'", str62, "test");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, a, #,  , #,  ]");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder24 = builder14.readPreference(readPreference23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder11.readPreference(readPreference23);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setHost("hi!");
        java.lang.String str32 = mongoProperties29.getDatabase();
        java.lang.String str33 = mongoProperties29.getUri();
        java.lang.Integer int34 = mongoProperties29.getPort();
        java.lang.String str35 = mongoProperties29.getHost();
        mongoProperties29.setUsername("");
        boolean boolean38 = mongoClientOptions27.equals((java.lang.Object) mongoProperties29);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.cursorFinalizerEnabled(true);
        boolean boolean48 = mongoClientOptions27.equals((java.lang.Object) builder41);
        int int49 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions27.getConnectionsPerHost();
        int int51 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int52 = mongoClientOptions27.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = builder11.readPreference(readPreference53);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder56 = builder11.heartbeatThreadCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxAutoConnectRetryTime((long) (byte) 10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int11 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int9 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatThreadCount((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions1.toString();
        int int17 = mongoClientOptions1.getHeartbeatThreadCount();
        int int18 = mongoClientOptions1.getConnectionsPerHost();
        int int19 = mongoClientOptions1.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions1.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(socketFactory20);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout(15);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatThreadCount();
        int int26 = mongoClientOptions24.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions24.getHeartbeatThreadCount();
        long long28 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setHost("hi!");
        java.lang.String str36 = mongoProperties33.getDatabase();
        java.lang.String str37 = mongoProperties33.getUri();
        java.lang.Integer int38 = mongoProperties33.getPort();
        java.lang.String str39 = mongoProperties33.getHost();
        mongoProperties33.setUsername("");
        java.lang.Integer int42 = mongoProperties33.getPort();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        boolean boolean45 = mongoClientOptions44.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties46.setHost("hi!");
        java.lang.String str49 = mongoProperties46.getDatabase();
        java.lang.String str50 = mongoProperties46.getUri();
        java.lang.Integer int51 = mongoProperties46.getPort();
        java.lang.String str52 = mongoProperties46.getHost();
        mongoProperties46.setUsername("");
        boolean boolean55 = mongoClientOptions44.equals((java.lang.Object) mongoProperties46);
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties33.createMongoClient(mongoClientOptions44, environment56);
        int int58 = mongoClientOptions44.getMaxConnectionIdleTime();
        int int59 = mongoClientOptions44.getConnectTimeout();
        javax.net.SocketFactory socketFactory60 = mongoClientOptions44.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder32.socketFactory(socketFactory60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder17.socketFactory(socketFactory60);
        com.mongodb.MongoClientOptions.Builder builder63 = builder10.socketFactory(socketFactory60);
        com.mongodb.MongoClientOptions.Builder builder65 = builder10.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatConnectRetryFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb://localhost/test" + "'", str37, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb://localhost/test" + "'", str50, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(socketFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.socketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionLifeTime(10000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.minConnectionsPerHost(5);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        int int28 = mongoClientOptions18.getHeartbeatConnectTimeout();
        boolean boolean29 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean30 = mongoClientOptions18.isSocketKeepAlive();
        int int31 = mongoClientOptions18.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean13 = mongoClientOptions10.isSocketKeepAlive();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getConnectionsPerHost();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        mongoProperties0.setHost("test");
        java.lang.String str21 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.heartbeatConnectRetryFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions1.getDescription();
        boolean boolean17 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean18 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getConnectionsPerHost();
        int int11 = mongoClientOptions1.getMaxWaitTime();
        int int12 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatThreadCount((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder3.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions12.isAlwaysUseMBeans();
        int int16 = mongoClientOptions12.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions12.getDbDecoderFactory();
        int int18 = mongoClientOptions12.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions12.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.socketFactory(socketFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency(5000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions8.getLocalThreshold();
        int int12 = mongoClientOptions8.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions8.getReadPreference();
        java.lang.String str14 = mongoClientOptions8.getDescription();
        int int15 = mongoClientOptions8.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder4.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        int int28 = mongoClientOptions18.getHeartbeatConnectTimeout();
        boolean boolean29 = mongoClientOptions18.isAlwaysUseMBeans();
        int int30 = mongoClientOptions18.getConnectTimeout();
        java.lang.String str31 = mongoClientOptions18.getDescription();
        boolean boolean32 = mongoClientOptions18.isSocketKeepAlive();
        int int33 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions5.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions5.equals((java.lang.Object) mongoClientOptions14);
        boolean boolean16 = mongoClientOptions14.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions14.getReadPreference();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        int int37 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions31, environment38);
        mongoProperties0.setUsername("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient39);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxAutoConnectRetryTime((long) (byte) 0);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder9.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder9.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setHost("hi!");
        java.lang.String str23 = mongoProperties20.getDatabase();
        java.lang.String str24 = mongoProperties20.getUri();
        java.lang.Integer int25 = mongoProperties20.getPort();
        java.lang.String str26 = mongoProperties20.getHost();
        mongoProperties20.setUsername("");
        boolean boolean29 = mongoClientOptions18.equals((java.lang.Object) mongoProperties20);
        java.lang.String str30 = mongoClientOptions18.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions18.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder9.dbEncoderFactory(dBEncoderFactory31);
        boolean boolean33 = mongoClientOptions1.equals((java.lang.Object) dBEncoderFactory31);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb://localhost/test" + "'", str24, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int9 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean10 = mongoClientOptions1.isAlwaysUseMBeans();
        int int11 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        java.lang.String str20 = mongoClientOptions16.toString();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions16.getWriteConcern();
        int int22 = mongoClientOptions16.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int24 = mongoClientOptions16.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int26 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str5 = mongoClientOptions1.toString();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.Class<?> wildcardClass9 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("");
        java.lang.String str29 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str32 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str33 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder3.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        java.lang.String str7 = mongoClientOptions1.getRequiredReplicaSetName();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        java.lang.String str10 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean10 = mongoClientOptions1.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions1.getSocketFactory();
        boolean boolean12 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int30 = mongoClientOptions27.getMaxWaitTime();
        int int31 = mongoClientOptions27.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions27.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder25.socketFactory(socketFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.socketFactory(socketFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder6.socketFactory(socketFactory32);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder6.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatSocketTimeout(15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getLocalThreshold();
        int int10 = mongoClientOptions6.getHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions6);
        java.lang.String str13 = mongoClientOptions6.getDescription();
        int int14 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        boolean boolean15 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        char[] charArray11 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        boolean boolean14 = mongoClientOptions5.isSocketKeepAlive();
        boolean boolean15 = mongoClientOptions5.isCursorFinalizerEnabled();
        int int16 = mongoClientOptions5.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setHost("hi!");
        java.lang.String str31 = mongoProperties28.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties28.createMongoClient(mongoClientOptions32);
        mongoProperties28.setAuthenticationDatabase("");
        char[] charArray42 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties28.setPassword(charArray42);
        mongoProperties28.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties28.createMongoClient(mongoClientOptions47, environment48);
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = mongoClientOptions47.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder25.dbDecoderFactory(dBDecoderFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder25.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder57 = builder25.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder59 = builder25.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder25.build();
        boolean boolean61 = mongoClientOptions5.equals((java.lang.Object) builder25);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertNotNull(dBDecoderFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectRetryFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        int int29 = mongoClientOptions25.getAcceptableLatencyDifference();
        java.lang.String str30 = mongoClientOptions25.getDescription();
        int int31 = mongoClientOptions25.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder9.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        java.lang.String str27 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str30 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        int int27 = mongoClientOptions20.getMinHeartbeatFrequency();
        java.lang.String str28 = mongoClientOptions20.getRequiredReplicaSetName();
        int int29 = mongoClientOptions20.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions20.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(socketFactory30);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectTimeout();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getSocketTimeout();
        int int11 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions25);
        mongoProperties21.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass29 = mongoProperties21.getFieldNamingStrategy();
        char[] charArray30 = new char[] {};
        mongoProperties21.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Integer int35 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[]");
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions18.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.dbDecoderFactory(dBDecoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatThreadCount();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions34.getReadPreference();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder32.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions43.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder41.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder23.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder6.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder50 = builder6.heartbeatConnectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder52 = builder6.connectionsPerHost(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        int int9 = mongoClientOptions1.getSocketTimeout();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions1.getDbDecoderFactory();
        int int12 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        int int37 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions31, environment38);
        java.lang.Class<?> wildcardClass40 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getHeartbeatThreadCount();
        int int44 = mongoClientOptions42.getHeartbeatSocketTimeout();
        int int45 = mongoClientOptions42.getLocalThreshold();
        int int46 = mongoClientOptions42.getHeartbeatFrequency();
        int int47 = mongoClientOptions42.getConnectionsPerHost();
        int int48 = mongoClientOptions42.getLocalThreshold();
        java.lang.String str49 = mongoClientOptions42.getDescription();
        java.lang.String str50 = mongoClientOptions42.getDescription();
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions42);
        java.lang.String str52 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder56.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder63.build();
        int int65 = mongoClientOptions64.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference66 = mongoClientOptions64.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions64.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory68 = mongoClientOptions64.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder56.dbDecoderFactory(dBDecoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.connectTimeout(10000);
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder73.build();
        com.mongodb.ReadPreference readPreference75 = mongoClientOptions74.getReadPreference();
        java.lang.String str76 = mongoClientOptions74.getDescription();
        com.mongodb.MongoClient mongoClient77 = mongoProperties0.createMongoClient(mongoClientOptions74);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 15 + "'", int45 == 15);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5000 + "'", int46 == 5000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(readPreference66);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(dBDecoderFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertNotNull(readPreference75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(mongoClient77);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass32 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass32);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions12.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions12.getDbDecoderFactory();
        int int17 = mongoClientOptions12.getHeartbeatThreadCount();
        int int18 = mongoClientOptions12.getHeartbeatFrequency();
        boolean boolean19 = mongoClientOptions12.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.readPreference(readPreference20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern4 = mongoClientOptions1.getWriteConcern();
        java.lang.String str5 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(writeConcern4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(10000);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions21.getReadPreference();
        java.lang.String str23 = mongoClientOptions21.getDescription();
        boolean boolean24 = mongoClientOptions21.isAlwaysUseMBeans();
        java.lang.String str25 = mongoClientOptions21.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        int int23 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions1.getConnectionsPerHost();
        int int25 = mongoClientOptions1.getLocalThreshold();
        int int26 = mongoClientOptions1.getSocketTimeout();
        long long27 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        boolean boolean21 = mongoClientOptions7.equals((java.lang.Object) "");
        int int22 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions7.getMaxWaitTime();
        int int24 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        boolean boolean9 = mongoClientOptions1.isSocketKeepAlive();
        int int10 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int11 = mongoClientOptions1.getHeartbeatThreadCount();
        int int12 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        int int10 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions1.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        int int23 = mongoClientOptions16.getConnectionsPerHost();
        java.lang.String str24 = mongoClientOptions16.getRequiredReplicaSetName();
        int int25 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions16, environment26);
        java.lang.Class<?> wildcardClass28 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        java.lang.Class<?> wildcardClass31 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str32 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        mongoProperties6.setUri("");
        char[] charArray13 = new char[] { 'a', '#' };
        mongoProperties6.setPassword(charArray13);
        mongoProperties0.setPassword(charArray13);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.Integer int18 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        java.lang.String str25 = mongoClientOptions20.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        int int27 = mongoClientOptions20.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions20.getReadPreference();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions20.getReadPreference();
        int int30 = mongoClientOptions20.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions20.getSocketTimeout();
        org.springframework.core.env.Environment environment32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions20, environment32);
            org.junit.Assert.fail("Expected exception of type com.mongodb.MongoException; message: host and port should be specified in host:port format");
        } catch (com.mongodb.MongoException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\000, \000]");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minHeartbeatFrequency(500);
        boolean boolean23 = mongoClientOptions1.equals((java.lang.Object) builder20);
        int int24 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int25 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minConnectionsPerHost(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getConnectionsPerHost();
        int int11 = mongoClientOptions1.getMaxWaitTime();
        int int12 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions21.getMaxWaitTime();
        long long25 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions21.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions21);
        long long28 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        boolean boolean29 = mongoClientOptions21.isAutoConnectRetry();
        int int30 = mongoClientOptions21.getAcceptableLatencyDifference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions13.getSocketFactory();
        int int15 = mongoClientOptions13.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        boolean boolean11 = mongoClientOptions9.isAutoConnectRetry();
        int int12 = mongoClientOptions9.getAcceptableLatencyDifference();
        long long13 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        java.lang.String str14 = mongoClientOptions9.getDescription();
        int int15 = mongoClientOptions9.getHeartbeatFrequency();
        int int16 = mongoClientOptions9.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions9.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions9.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder5.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder5.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getConnectTimeout();
        int int11 = mongoClientOptions9.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions9.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions9.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        mongoProperties6.setUri("");
        char[] charArray13 = new char[] { 'a', '#' };
        mongoProperties6.setPassword(charArray13);
        mongoProperties0.setPassword(charArray13);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str21 = mongoProperties0.getUri();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.requiredReplicaSetName("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setUri("");
        char[] charArray25 = new char[] { 'a', '#' };
        mongoProperties18.setPassword(charArray25);
        char[] charArray32 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties18.setPassword(charArray32);
        java.lang.String str34 = mongoProperties18.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMaxConnectionLifeTime();
        boolean boolean38 = mongoClientOptions36.isCursorFinalizerEnabled();
        boolean boolean39 = mongoClientOptions36.isAlwaysUseMBeans();
        boolean boolean40 = mongoClientOptions36.isAutoConnectRetry();
        boolean boolean41 = mongoClientOptions36.isAutoConnectRetry();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties18.createMongoClient(mongoClientOptions36, environment42);
        long long44 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        int int45 = mongoClientOptions36.getSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder17.dbEncoderFactory(dBEncoderFactory46);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean29 = mongoClientOptions18.isAutoConnectRetry();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions18.getWriteConcern();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(writeConcern30);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str5 = mongoClientOptions1.toString();
        int int6 = mongoClientOptions1.getLocalThreshold();
        int int7 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties8.createMongoClient(mongoClientOptions12);
        mongoProperties8.setAuthenticationDatabase("");
        char[] charArray22 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties8.setPassword(charArray22);
        mongoProperties8.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties8.createMongoClient(mongoClientOptions27, environment28);
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatConnectTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions1.getReadPreference();
        int int10 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime(32);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatFrequency(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setHost("test");
        mongoProperties0.setPort((java.lang.Integer) 1);
        java.lang.String str35 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb://localhost/test" + "'", str35, "mongodb://localhost/test");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        int int23 = mongoClientOptions19.getConnectTimeout();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int26 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount(32);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxAutoConnectRetryTime((long) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getLocalThreshold();
        int int18 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getDatabase();
        java.lang.String str16 = mongoProperties12.getUri();
        java.lang.Integer int17 = mongoProperties12.getPort();
        java.lang.String str18 = mongoProperties12.getHost();
        mongoProperties12.setUsername("");
        boolean boolean21 = mongoClientOptions10.equals((java.lang.Object) mongoProperties12);
        long long22 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        boolean boolean23 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean24 = mongoClientOptions1.equals((java.lang.Object) boolean23);
        long long25 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        java.lang.String str15 = mongoClientOptions10.getDescription();
        int int16 = mongoClientOptions10.getSocketTimeout();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions22.getLocalThreshold();
        java.lang.String str26 = mongoClientOptions22.toString();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions22);
        boolean boolean28 = mongoClientOptions22.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        boolean boolean45 = mongoClientOptions22.equals((java.lang.Object) builder43);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.connectTimeout((int) '4');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.heartbeatThreadCount(32);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatThreadCount(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime(5);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder29 = builder23.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder7.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean55 = mongoClientOptions53.isSocketKeepAlive();
        int int56 = mongoClientOptions53.getHeartbeatConnectTimeout();
        boolean boolean57 = mongoClientOptions53.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder58.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder61 = builder58.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        boolean boolean63 = mongoClientOptions53.equals((java.lang.Object) mongoClientOptions62);
        java.lang.String str64 = mongoClientOptions53.toString();
        int int65 = mongoClientOptions53.getLocalThreshold();
        com.mongodb.ReadPreference readPreference66 = mongoClientOptions53.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder67 = builder7.readPreference(readPreference66);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
        org.junit.Assert.assertNotNull(readPreference66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        boolean boolean23 = mongoClientOptions15.equals((java.lang.Object) readPreference22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions15.getDbDecoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions15, environment25);
        char[] charArray27 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(charArray27);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder7.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxWaitTime(35);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setGridFsDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder3.build();
        boolean boolean5 = mongoClientOptions4.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getDatabase();
        java.lang.String str10 = mongoProperties6.getUri();
        java.lang.Integer int11 = mongoProperties6.getPort();
        java.lang.String str12 = mongoProperties6.getHost();
        mongoProperties6.setUsername("");
        boolean boolean15 = mongoClientOptions4.equals((java.lang.Object) mongoProperties6);
        java.lang.String str16 = mongoProperties6.getGridFsDatabase();
        mongoProperties6.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setHost("hi!");
        mongoProperties19.setUri("");
        char[] charArray26 = new char[] { 'a', '#' };
        mongoProperties19.setPassword(charArray26);
        char[] charArray28 = mongoProperties19.getPassword();
        mongoProperties6.setPassword(charArray28);
        mongoProperties0.setPassword(charArray28);
        java.lang.String str31 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 32);
        java.lang.String str34 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, #]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb://localhost/test" + "'", str31, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        java.lang.String str23 = mongoClientOptions11.toString();
        int int24 = mongoClientOptions11.getHeartbeatThreadCount();
        int int25 = mongoClientOptions11.getConnectionsPerHost();
        int int26 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions11);
        char[] charArray28 = mongoProperties0.getPassword();
        java.lang.String str29 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatThreadCount();
        int int45 = mongoClientOptions43.getHeartbeatSocketTimeout();
        int int46 = mongoClientOptions43.getLocalThreshold();
        int int47 = mongoClientOptions43.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions43.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions43.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder39.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties53.setHost("hi!");
        java.lang.String str56 = mongoProperties53.getUsername();
        java.lang.Class<?> wildcardClass57 = mongoProperties53.getFieldNamingStrategy();
        java.lang.String str58 = mongoProperties53.getAuthenticationDatabase();
        java.lang.String str59 = mongoProperties53.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        int int62 = mongoClientOptions61.getMaxConnectionLifeTime();
        boolean boolean63 = mongoClientOptions61.isAutoConnectRetry();
        boolean boolean64 = mongoClientOptions61.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient65 = mongoProperties53.createMongoClient(mongoClientOptions61);
        java.lang.String str66 = mongoProperties53.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getMaxConnectionLifeTime();
        boolean boolean70 = mongoClientOptions68.isAutoConnectRetry();
        int int71 = mongoClientOptions68.getAcceptableLatencyDifference();
        long long72 = mongoClientOptions68.getMaxAutoConnectRetryTime();
        java.lang.String str73 = mongoClientOptions68.getDescription();
        int int74 = mongoClientOptions68.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient75 = mongoProperties53.createMongoClient(mongoClientOptions68);
        com.mongodb.WriteConcern writeConcern76 = mongoClientOptions68.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder77 = builder52.writeConcern(writeConcern76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder28.writeConcern(writeConcern76);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5000 + "'", int47 == 5000);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mongoClient65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 15 + "'", int71 == 15);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5000 + "'", int74 == 5000);
        org.junit.Assert.assertNotNull(mongoClient75);
        org.junit.Assert.assertNotNull(writeConcern76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        int int31 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        java.lang.String str15 = mongoClientOptions10.getDescription();
        int int16 = mongoClientOptions10.getSocketTimeout();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        java.lang.String str19 = mongoClientOptions10.getRequiredReplicaSetName();
        java.lang.String str20 = mongoClientOptions10.toString();
        int int21 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder14.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder3.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder3.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost(27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setHost("hi!");
        java.lang.String str20 = mongoProperties17.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties17.createMongoClient(mongoClientOptions21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        boolean boolean27 = mongoClientOptions24.isAlwaysUseMBeans();
        boolean boolean28 = mongoClientOptions24.isAutoConnectRetry();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties17.createMongoClient(mongoClientOptions24, environment29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.requiredReplicaSetName("");
        boolean boolean38 = mongoClientOptions24.equals((java.lang.Object) "");
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions24.getDbEncoderFactory();
        java.lang.String str40 = mongoClientOptions24.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.dbEncoderFactory(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.localThreshold(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setHost("hi!");
        java.lang.String str13 = mongoProperties10.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties10.createMongoClient(mongoClientOptions14);
        mongoProperties10.setAuthenticationDatabase("");
        char[] charArray24 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties10.setPassword(charArray24);
        mongoProperties10.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties10.createMongoClient(mongoClientOptions29, environment30);
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions29);
        int int34 = mongoClientOptions29.getMaxConnectionLifeTime();
        int int35 = mongoClientOptions29.getMinHeartbeatFrequency();
        int int36 = mongoClientOptions29.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(5);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions5.getDbDecoderFactory();
        long long15 = mongoClientOptions5.getMaxAutoConnectRetryTime();
        int int16 = mongoClientOptions5.getSocketTimeout();
        int int17 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        int int18 = mongoClientOptions5.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime(32);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatFrequency(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder55.acceptableLatencyDifference((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions1.getReadPreference();
        boolean boolean10 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectTimeout();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str11 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str20 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getDatabase();
        mongoProperties21.setHost("hi!");
        java.lang.String str27 = mongoProperties21.getHost();
        mongoProperties21.setUsername("test");
        java.lang.Class<?> wildcardClass30 = mongoProperties21.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setHost("hi!");
        java.lang.String str34 = mongoProperties31.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties31.createMongoClient(mongoClientOptions35);
        mongoProperties31.setAuthenticationDatabase("");
        java.lang.String str39 = mongoProperties31.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.setHost("hi!");
        java.lang.String str43 = mongoProperties40.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties40.createMongoClient(mongoClientOptions44);
        mongoProperties40.setAuthenticationDatabase("");
        char[] charArray54 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties40.setPassword(charArray54);
        mongoProperties40.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        int int60 = mongoClientOptions59.getHeartbeatThreadCount();
        int int61 = mongoClientOptions59.getHeartbeatSocketTimeout();
        int int62 = mongoClientOptions59.getLocalThreshold();
        int int63 = mongoClientOptions59.getHeartbeatFrequency();
        boolean boolean64 = mongoClientOptions59.isSocketKeepAlive();
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties40.createMongoClient(mongoClientOptions59, environment65);
        mongoProperties40.setHost("mongodb://localhost/test");
        mongoProperties40.setPort((java.lang.Integer) 15);
        char[] charArray71 = mongoProperties40.getPassword();
        mongoProperties31.setPassword(charArray71);
        mongoProperties21.setPassword(charArray71);
        mongoProperties0.setPassword(charArray71);
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 15 + "'", int62 == 15);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5000 + "'", int63 == 5000);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        char[] charArray8 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties9.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties9.createMongoClient(mongoClientOptions28, environment29);
        int int31 = mongoClientOptions28.getConnectTimeout();
        int int32 = mongoClientOptions28.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties0.createMongoClient(mongoClientOptions28, environment33);
        int int35 = mongoClientOptions28.getHeartbeatConnectRetryFrequency();
        int int36 = mongoClientOptions28.getConnectionsPerHost();
        int int37 = mongoClientOptions28.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getSocketTimeout();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions8.getSocketFactory();
        int int11 = mongoClientOptions8.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionLifeTime();
        boolean boolean27 = mongoClientOptions25.isAutoConnectRetry();
        boolean boolean28 = mongoClientOptions25.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder30 = builder21.readPreference(readPreference29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions32.isAutoConnectRetry();
        boolean boolean35 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions32.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder21.dbEncoderFactory(dBEncoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder10.dbEncoderFactory(dBEncoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.MongoClientOptions.Builder builder43 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder43.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        int int52 = mongoClientOptions51.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions51.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions51.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder49.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder10.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder58 = builder10.localThreshold(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold(35);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.connectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        java.lang.String str8 = mongoClientOptions1.getDescription();
        int int9 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        long long18 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions14.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder8.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions21.getMaxWaitTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        int int22 = mongoClientOptions19.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setHost("hi!");
        java.lang.String str37 = mongoProperties34.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties34.createMongoClient(mongoClientOptions38);
        mongoProperties34.setAuthenticationDatabase("");
        char[] charArray48 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties34.setPassword(charArray48);
        mongoProperties34.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        org.springframework.core.env.Environment environment54 = null;
        com.mongodb.MongoClient mongoClient55 = mongoProperties34.createMongoClient(mongoClientOptions53, environment54);
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions53.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder31.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder31.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder61 = builder31.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder63 = builder31.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder65 = builder31.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder31.build();
        boolean boolean67 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions66);
        boolean boolean68 = mongoClientOptions19.isAutoConnectRetry();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions10.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getLocalThreshold();
        int int18 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder16.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions27.getWriteConcern();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions27.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder1.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        boolean boolean64 = mongoClientOptions63.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties65.setHost("hi!");
        java.lang.String str68 = mongoProperties65.getDatabase();
        java.lang.String str69 = mongoProperties65.getUri();
        java.lang.Integer int70 = mongoProperties65.getPort();
        java.lang.String str71 = mongoProperties65.getHost();
        mongoProperties65.setUsername("");
        boolean boolean74 = mongoClientOptions63.equals((java.lang.Object) mongoProperties65);
        java.lang.String str75 = mongoClientOptions63.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder61.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder50.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder1.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.maxWaitTime(1);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb://localhost/test" + "'", str69, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder14.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder21.heartbeatThreadCount((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        int int9 = mongoClientOptions5.getLocalThreshold();
        boolean boolean10 = mongoClientOptions5.isAlwaysUseMBeans();
        int int11 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions5.getHeartbeatThreadCount();
        int int13 = mongoClientOptions5.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setPort((java.lang.Integer) 15);
        mongoProperties9.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getHeartbeatThreadCount();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions15);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoProperties9);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        boolean boolean24 = mongoClientOptions23.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        java.lang.String str28 = mongoProperties25.getDatabase();
        java.lang.String str29 = mongoProperties25.getUri();
        java.lang.Integer int30 = mongoProperties25.getPort();
        java.lang.String str31 = mongoProperties25.getHost();
        mongoProperties25.setUsername("");
        boolean boolean34 = mongoClientOptions23.equals((java.lang.Object) mongoProperties25);
        java.lang.String str35 = mongoProperties25.getUri();
        mongoProperties25.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setHost("hi!");
        mongoProperties38.setUri("");
        char[] charArray45 = new char[] { 'a', '#' };
        mongoProperties38.setPassword(charArray45);
        char[] charArray52 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties38.setPassword(charArray52);
        mongoProperties25.setPassword(charArray52);
        boolean boolean55 = mongoClientOptions1.equals((java.lang.Object) charArray52);
        int int56 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb://localhost/test" + "'", str35, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, #]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#,  ,  , a,  ]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getSocketTimeout();
        int int9 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxWaitTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        mongoProperties0.setDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 5000);
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass19 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int20 = mongoProperties0.getPort();
        char[] charArray21 = mongoProperties0.getPassword();
        java.lang.String str22 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions1.getWriteConcern();
        int int9 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.heartbeatConnectTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("test");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray9 = mongoProperties0.getPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        int int37 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions31, environment38);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str42 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass43 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str44 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatThreadCount();
        int int4 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5000 + "'", int4 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setHost("hi!");
        java.lang.String str13 = mongoProperties10.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties10.createMongoClient(mongoClientOptions14);
        mongoProperties10.setAuthenticationDatabase("");
        char[] charArray24 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties10.setPassword(charArray24);
        mongoProperties10.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties10.createMongoClient(mongoClientOptions29, environment30);
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions29);
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean4 = mongoClientOptions1.isAutoConnectRetry();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean10 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions8);
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(readPreference11);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxWaitTime(5);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions12.isAlwaysUseMBeans();
        java.lang.String str16 = mongoClientOptions12.getDescription();
        boolean boolean17 = mongoClientOptions12.isSocketKeepAlive();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions12, environment18);
        java.lang.String str20 = mongoClientOptions12.getDescription();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions12.getReadPreference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(readPreference21);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions17.getReadPreference();
        int int21 = mongoClientOptions17.getHeartbeatSocketTimeout();
        boolean boolean22 = mongoClientOptions17.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isAutoConnectRetry();
        boolean boolean26 = mongoClientOptions17.equals((java.lang.Object) mongoClientOptions24);
        int int27 = mongoClientOptions17.getConnectTimeout();
        int int28 = mongoClientOptions17.getSocketTimeout();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder30 = builder0.readPreference(readPreference29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder18.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatThreadCount((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectRetryFrequency(35);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder4.maxWaitTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions7.getLocalThreshold();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions7, environment15);
        int int17 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties13.getAuthenticationDatabase();
        java.lang.String str19 = mongoProperties13.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions21.isCursorFinalizerEnabled();
        boolean boolean24 = mongoClientOptions21.isAlwaysUseMBeans();
        int int25 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions21);
        javax.net.SocketFactory socketFactory27 = mongoClientOptions21.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.heartbeatConnectRetryFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder32 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder10.maxWaitTime(10000);
        java.lang.Class<?> wildcardClass35 = builder34.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "test" + "'", str19, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Integer int1 = mongoProperties0.getPort();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatThreadCount(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxWaitTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder3.socketFactory(socketFactory12);
        java.lang.Class<?> wildcardClass14 = builder3.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions25);
        mongoProperties21.setAuthenticationDatabase("");
        char[] charArray35 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties21.setPassword(charArray35);
        mongoProperties21.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties21.createMongoClient(mongoClientOptions40, environment41);
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions40.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder18.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatThreadCount();
        int int58 = mongoClientOptions56.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder60 = builder54.readPreference(readPreference59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder7.readPreference(readPreference59);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        java.lang.String str63 = mongoClientOptions62.toString();
        com.mongodb.ReadPreference readPreference64 = mongoClientOptions62.getReadPreference();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20000 + "'", int58 == 20000);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNotNull(readPreference64);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) 15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        boolean boolean14 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int15 = mongoClientOptions13.getLocalThreshold();
        boolean boolean16 = mongoClientOptions13.isSocketKeepAlive();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions19.getDbDecoderFactory();
        int int23 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions19.getHeartbeatConnectTimeout();
        java.lang.String str25 = mongoClientOptions19.toString();
        int int26 = mongoClientOptions19.getLocalThreshold();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        int int7 = mongoClientOptions1.getSocketTimeout();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        int int9 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass16 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isAutoConnectRetry();
        int int3 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 500 + "'", int3 == 500);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions14.getReadPreference();
        int int18 = mongoClientOptions14.getHeartbeatSocketTimeout();
        boolean boolean19 = mongoClientOptions14.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        boolean boolean22 = mongoClientOptions21.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions21);
        int int24 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions14.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions14, environment26);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions22.getMaxWaitTime();
        long long26 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int27 = mongoClientOptions22.getMaxConnectionLifeTime();
        java.lang.String str28 = mongoClientOptions22.getDescription();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions22.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder16.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.heartbeatConnectRetryFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxWaitTime(100);
        boolean boolean39 = mongoClientOptions1.equals((java.lang.Object) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("test");
        mongoProperties0.setHost("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        java.lang.String str4 = mongoClientOptions1.toString();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions23.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder15.dbDecoderFactory(dBDecoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectTimeout(10000);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = builder11.readPreference(readPreference34);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder11.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getHeartbeatThreadCount();
        int int10 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.readPreference(readPreference12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder4.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder4.maxConnectionLifeTime(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.heartbeatFrequency(10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.setHost("hi!");
        java.lang.String str45 = mongoProperties42.getDatabase();
        java.lang.String str46 = mongoProperties42.getUri();
        java.lang.Integer int47 = mongoProperties42.getPort();
        java.lang.String str48 = mongoProperties42.getHost();
        mongoProperties42.setUsername("");
        java.lang.Integer int51 = mongoProperties42.getPort();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        boolean boolean54 = mongoClientOptions53.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties55.setHost("hi!");
        java.lang.String str58 = mongoProperties55.getDatabase();
        java.lang.String str59 = mongoProperties55.getUri();
        java.lang.Integer int60 = mongoProperties55.getPort();
        java.lang.String str61 = mongoProperties55.getHost();
        mongoProperties55.setUsername("");
        boolean boolean64 = mongoClientOptions53.equals((java.lang.Object) mongoProperties55);
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties42.createMongoClient(mongoClientOptions53, environment65);
        int int67 = mongoClientOptions53.getMaxConnectionIdleTime();
        int int68 = mongoClientOptions53.getConnectTimeout();
        javax.net.SocketFactory socketFactory69 = mongoClientOptions53.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder70 = builder37.socketFactory(socketFactory69);
        com.mongodb.MongoClientOptions.Builder builder71 = builder24.socketFactory(socketFactory69);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "mongodb://localhost/test" + "'", str46, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "mongodb://localhost/test" + "'", str59, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertNotNull(socketFactory69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions32.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder24.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder11.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder6.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.maxConnectionLifeTime(35);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionLifeTime(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        mongoProperties3.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions20.getMinConnectionsPerHost();
        int int25 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient26 = mongoProperties3.createMongoClient(mongoClientOptions20);
        java.lang.String str27 = mongoProperties3.getGridFsDatabase();
        mongoProperties3.setPort((java.lang.Integer) 0);
        java.lang.String str30 = mongoProperties3.getHost();
        java.lang.Class<?> wildcardClass31 = mongoProperties3.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(wildcardClass31);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions32.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder22.dbEncoderFactory(dBEncoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder21.dbEncoderFactory(dBEncoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.dbEncoderFactory(dBEncoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder40 = builder9.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean48 = mongoClientOptions46.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions46.getDbEncoderFactory();
        int int50 = mongoClientOptions46.getLocalThreshold();
        int int51 = mongoClientOptions46.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("test");
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        javax.net.SocketFactory socketFactory68 = mongoClientOptions67.getSocketFactory();
        boolean boolean69 = mongoClientOptions46.equals((java.lang.Object) socketFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder9.socketFactory(socketFactory68);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(socketFactory68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean29 = mongoClientOptions18.isAutoConnectRetry();
        int int30 = mongoClientOptions18.getConnectTimeout();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder4.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions11.getWriteConcern();
        java.lang.String str14 = mongoClientOptions11.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(writeConcern13);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean8 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean10 = mongoClientOptions6.isAutoConnectRetry();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions6, environment12);
        int int14 = mongoClientOptions6.getAcceptableLatencyDifference();
        boolean boolean15 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions6.isSocketKeepAlive();
        int int17 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatThreadCount((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder53 = builder47.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setHost("hi!");
        java.lang.String str23 = mongoProperties20.getDatabase();
        java.lang.String str24 = mongoProperties20.getUri();
        java.lang.Integer int25 = mongoProperties20.getPort();
        java.lang.String str26 = mongoProperties20.getHost();
        mongoProperties20.setUsername("");
        boolean boolean29 = mongoClientOptions18.equals((java.lang.Object) mongoProperties20);
        java.lang.String str30 = mongoClientOptions18.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions18.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder34.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb://localhost/test" + "'", str24, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getHeartbeatThreadCount();
        int int10 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.readPreference(readPreference12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder13.writeConcern(writeConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder13.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder27 = builder13.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectionsPerHost(52);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatThreadCount((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder24 = builder19.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder19.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str8 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions15);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions1.getSocketFactory();
        int int22 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray11 = null;
        mongoProperties0.setPassword(charArray11);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) '#');
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.writeConcern(writeConcern21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder7.writeConcern(writeConcern21);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder7.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder7.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder7.localThreshold((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions13.isAutoConnectRetry();
        int int16 = mongoClientOptions13.getAcceptableLatencyDifference();
        long long17 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        java.lang.String str18 = mongoClientOptions13.getDescription();
        boolean boolean19 = mongoClientOptions13.isCursorFinalizerEnabled();
        long long20 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.dbDecoderFactory(dBDecoderFactory21);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getUri();
        mongoProperties3.setPort((java.lang.Integer) 20000);
        char[] charArray16 = mongoProperties3.getPassword();
        mongoProperties3.setPort((java.lang.Integer) 1);
        mongoProperties3.setUsername("mongodb://localhost/test");
        mongoProperties3.setUri("");
        mongoProperties3.setUri("test");
        mongoProperties3.setHost("hi!");
        java.lang.String str27 = mongoProperties3.getHost();
        java.lang.String str28 = mongoProperties3.getHost();
        java.lang.String str29 = mongoProperties3.getUsername();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        boolean boolean21 = mongoClientOptions13.equals((java.lang.Object) readPreference20);
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder7.writeConcern(writeConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) '#');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMaxConnectionLifeTime();
        int int28 = mongoClientOptions18.getConnectTimeout();
        boolean boolean29 = mongoClientOptions18.isCursorFinalizerEnabled();
        int int30 = mongoClientOptions18.getConnectTimeout();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.socketTimeout(35);
        javax.net.SocketFactory socketFactory28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketFactory(socketFactory28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        int int6 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int7 = mongoClientOptions1.getLocalThreshold();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int9 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.Class<?> wildcardClass11 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setHost("hi!");
        java.lang.String str21 = mongoProperties18.getDatabase();
        java.lang.String str22 = mongoProperties18.getUri();
        java.lang.Integer int23 = mongoProperties18.getPort();
        java.lang.String str24 = mongoProperties18.getHost();
        char[] charArray25 = null;
        mongoProperties18.setPassword(charArray25);
        java.lang.String str27 = mongoProperties18.getMongoClientDatabase();
        mongoProperties18.setUsername("hi!");
        java.lang.String str30 = mongoProperties18.getDatabase();
        mongoProperties18.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getThreadsAllowedToBlockForConnectionMultiplier();
        int int40 = mongoClientOptions38.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties18.createMongoClient(mongoClientOptions38, environment41);
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions38, environment43);
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setHost("");
        java.lang.String str49 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        mongoProperties0.setUsername("");
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions1.getDbEncoderFactory();
        int int9 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean10 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        boolean boolean21 = mongoClientOptions13.equals((java.lang.Object) readPreference20);
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        int int23 = mongoClientOptions13.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions13);
        boolean boolean25 = mongoClientOptions13.isSocketKeepAlive();
        int int26 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int27 = mongoClientOptions13.getHeartbeatFrequency();
        long long28 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder8.build();
        java.lang.String str44 = mongoClientOptions43.getRequiredReplicaSetName();
        int int45 = mongoClientOptions43.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb://localhost/test" + "'", str44, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions1.isSocketKeepAlive();
        boolean boolean12 = mongoClientOptions1.isAlwaysUseMBeans();
        int int13 = mongoClientOptions1.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxWaitTime((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setHost("hi!");
        java.lang.String str21 = mongoProperties18.getUsername();
        java.lang.Class<?> wildcardClass22 = mongoProperties18.getFieldNamingStrategy();
        java.lang.String str23 = mongoProperties18.getAuthenticationDatabase();
        java.lang.String str24 = mongoProperties18.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isCursorFinalizerEnabled();
        boolean boolean29 = mongoClientOptions26.isAlwaysUseMBeans();
        int int30 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient31 = mongoProperties18.createMongoClient(mongoClientOptions26);
        int int32 = mongoClientOptions26.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions26);
        boolean boolean34 = mongoClientOptions26.isAlwaysUseMBeans();
        int int35 = mongoClientOptions26.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "test" + "'", str24, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("test");
        java.lang.Class<?> wildcardClass11 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        int int8 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getDescription();
        java.lang.String str10 = mongoClientOptions1.toString();
        boolean boolean11 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatThreadCount(32);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setAuthenticationDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        boolean boolean33 = mongoClientOptions30.isSocketKeepAlive();
        java.lang.String str34 = mongoClientOptions30.getDescription();
        int int35 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions30);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getMaxConnectionLifeTime();
        boolean boolean40 = mongoClientOptions38.isCursorFinalizerEnabled();
        boolean boolean41 = mongoClientOptions38.isAlwaysUseMBeans();
        int int42 = mongoClientOptions38.getMaxWaitTime();
        java.lang.String str43 = mongoClientOptions38.getRequiredReplicaSetName();
        boolean boolean44 = mongoClientOptions38.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient45 = mongoProperties0.createMongoClient(mongoClientOptions38);
        mongoProperties0.setPort((java.lang.Integer) 35);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120000 + "'", int42 == 120000);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mongoClient45);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getMaxConnectionIdleTime();
        java.lang.String str8 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str9 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getHost();
        char[] charArray9 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference(500);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatSocketTimeout(10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }
}

