import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.ReadPreference readPreference1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder2 = builder0.readPreference(readPreference1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        java.lang.Class<?> wildcardClass4 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.dbDecoderFactory(dBDecoderFactory7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int int0 = org.springframework.boot.autoconfigure.mongo.MongoProperties.DEFAULT_PORT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 27017 + "'", int0 == 27017);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.WriteConcern writeConcern2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder3 = builder0.writeConcern(writeConcern2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.WriteConcern writeConcern7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder2.writeConcern(writeConcern7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        javax.net.SocketFactory socketFactory7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketFactory(socketFactory7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder5.threadsAllowedToBlockForConnectionMultiplier((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        javax.net.SocketFactory socketFactory10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder7.socketFactory(socketFactory10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        javax.net.SocketFactory socketFactory6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketFactory(socketFactory6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxAutoConnectRetryTime((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(27017);
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) 27017);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.heartbeatSocketTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatConnectTimeout((int) (short) 10);
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder34.heartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 15);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions32.getLocalThreshold();
        int int36 = mongoClientOptions32.getHeartbeatFrequency();
        boolean boolean37 = mongoClientOptions32.isSocketKeepAlive();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: can't specify port in construct and via host");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5000 + "'", int36 == 5000);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        java.lang.Class<?> wildcardClass6 = readPreference5.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        java.lang.Class<?> wildcardClass6 = mongoClient5.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.autoConnectRetry(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder0.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectRetryFrequency(27017);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder8.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions1.getDbEncoderFactory();
        java.lang.Class<?> wildcardClass15 = dBEncoderFactory14.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMaxConnectionLifeTime();
        java.lang.Class<?> wildcardClass28 = mongoClientOptions18.getClass();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        int int4 = mongoClientOptions1.getHeartbeatFrequency();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5000 + "'", int4 == 5000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatThreadCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory3 = mongoClientOptions1.getDbEncoderFactory();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.acceptableLatencyDifference(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions21.getReadPreference();
        boolean boolean24 = mongoClientOptions16.equals((java.lang.Object) readPreference23);
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions16.getWriteConcern();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions16);
            org.junit.Assert.fail("Expected exception of type com.mongodb.MongoException; message: host and port should be specified in host:port format");
        } catch (com.mongodb.MongoException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(writeConcern25);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatConnectTimeout((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder5.minHeartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.Class<?> wildcardClass11 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder15.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray9 = new char[] {};
        mongoProperties0.setPassword(charArray9);
        java.lang.Integer int11 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getHeartbeatThreadCount();
        long long23 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder2.socketFactory(socketFactory24);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder26.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int9 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions1.getDbDecoderFactory();
        int int11 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.autoConnectRetry(true);
        java.lang.Class<?> wildcardClass10 = builder5.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        int int40 = mongoClientOptions36.getMinHeartbeatFrequency();
        int int41 = mongoClientOptions36.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder8.readPreference(readPreference42);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder8.minConnectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        java.lang.String str7 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        boolean boolean14 = mongoClientOptions1.isAutoConnectRetry();
        int int15 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatThreadCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.minHeartbeatFrequency(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatThreadCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder7.heartbeatConnectRetryFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.heartbeatSocketTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.minHeartbeatFrequency(5000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.minHeartbeatFrequency((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.socketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder0.heartbeatThreadCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.String str6 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        int int27 = mongoClientOptions19.getConnectTimeout();
        int int28 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.heartbeatConnectRetryFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.threadsAllowedToBlockForConnectionMultiplier(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatFrequency();
        int int11 = mongoClientOptions9.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(5);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder6 = builder0.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.heartbeatFrequency(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatThreadCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str5 = mongoClientOptions1.toString();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions1.getWriteConcern();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatFrequency((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.heartbeatConnectRetryFrequency(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.WriteConcern writeConcern18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.writeConcern(writeConcern18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, a, #,  , #,  ]");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder12.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        java.lang.String str28 = mongoClientOptions23.getDescription();
        int int29 = mongoClientOptions23.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder3.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder3.minHeartbeatFrequency(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int9 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions1.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions1.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean13 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.connectionsPerHost((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder51 = builder49.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str5 = mongoClientOptions1.toString();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions1.getWriteConcern();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.socketTimeout(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionLifeTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setPort((java.lang.Integer) 120000);
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.socketTimeout(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        int int18 = mongoClientOptions15.getAcceptableLatencyDifference();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean23 = mongoClientOptions15.isSocketKeepAlive();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder4.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions20.getDbEncoderFactory();
        boolean boolean28 = mongoClientOptions20.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str11 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        int int7 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int8 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder8.heartbeatSocketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder8.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions1.isSocketKeepAlive();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder4.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        java.lang.Class<?> wildcardClass3 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties16.createMongoClient(mongoClientOptions20);
        mongoProperties16.setAuthenticationDatabase("");
        char[] charArray30 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties16.setPassword(charArray30);
        mongoProperties16.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties16.createMongoClient(mongoClientOptions35, environment36);
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder15.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency(27017);
        com.mongodb.ReadPreference readPreference42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder43 = builder39.readPreference(readPreference42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder5.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxWaitTime(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isAutoConnectRetry();
        int int3 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        java.lang.Class<?> wildcardClass5 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 500 + "'", int3 == 500);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("mongodb://localhost/test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        java.lang.Integer int21 = mongoProperties0.getPort();
        java.lang.String str22 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        long long18 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions14.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder8.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getMaxConnectionLifeTime();
        boolean boolean49 = mongoClientOptions47.isAutoConnectRetry();
        int int50 = mongoClientOptions47.getAcceptableLatencyDifference();
        long long51 = mongoClientOptions47.getMaxAutoConnectRetryTime();
        java.lang.String str52 = mongoClientOptions47.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions47.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder54 = builder43.writeConcern(writeConcern53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder8.writeConcern(writeConcern53);
        javax.net.SocketFactory socketFactory56 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketFactory(socketFactory56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.heartbeatConnectRetryFrequency(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getHeartbeatThreadCount();
        int int32 = mongoClientOptions28.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions28.getReadPreference();
        boolean boolean35 = mongoClientOptions28.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder26.dbEncoderFactory(dBEncoderFactory36);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder39 = builder26.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder15.dbDecoderFactory(dBDecoderFactory16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        mongoProperties3.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions20.getMinConnectionsPerHost();
        int int25 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient26 = mongoProperties3.createMongoClient(mongoClientOptions20);
        boolean boolean27 = mongoClientOptions20.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass19 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int20 = mongoProperties0.getPort();
        java.lang.String str21 = mongoProperties0.getUsername();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        int int12 = mongoClientOptions9.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions9.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder7.socketFactory(socketFactory13);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder7.maxConnectionLifeTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        boolean boolean8 = mongoClientOptions1.isAutoConnectRetry();
        java.lang.Class<?> wildcardClass9 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.acceptableLatencyDifference((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder4.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions25);
        mongoProperties21.setAuthenticationDatabase("");
        char[] charArray35 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties21.setPassword(charArray35);
        mongoProperties21.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties21.createMongoClient(mongoClientOptions40, environment41);
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions40.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder18.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.dbDecoderFactory(dBDecoderFactory43);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str7 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        java.lang.Class<?> wildcardClass31 = builder28.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties8.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties8.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties8.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient20 = mongoProperties8.createMongoClient(mongoClientOptions16);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoClient20);
        long long22 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions1.getWriteConcern();
        int int24 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatThreadCount();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder19.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions50.getReadPreference();
        com.mongodb.ReadPreference readPreference54 = mongoClientOptions50.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder55 = builder48.readPreference(readPreference54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder39.readPreference(readPreference54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder10.readPreference(readPreference54);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder57.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(readPreference54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatFrequency();
        int int4 = mongoClientOptions1.getConnectionsPerHost();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5000 + "'", int3 == 5000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str11 = mongoProperties0.getUsername();
        java.lang.Integer int12 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions5.getMinConnectionsPerHost();
        int int10 = mongoClientOptions5.getHeartbeatSocketTimeout();
        java.lang.String str11 = mongoClientOptions5.toString();
        java.lang.String str12 = mongoClientOptions5.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getHeartbeatThreadCount();
        int int10 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.readPreference(readPreference12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.dbEncoderFactory(dBEncoderFactory19);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder4.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatThreadCount((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minConnectionsPerHost((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.socketTimeout(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatThreadCount(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        int int7 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass10 = charArray9.getClass();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        java.lang.String str8 = mongoClientOptions1.toString();
        java.lang.Class<?> wildcardClass9 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        int int9 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        int int37 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions31, environment38);
        int int40 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean41 = mongoClientOptions31.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getHeartbeatThreadCount();
        int int15 = mongoClientOptions1.getConnectionsPerHost();
        int int16 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str17 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(readPreference8);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder16.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions27.getWriteConcern();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions27.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder1.writeConcern(writeConcern33);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.legacyDefaults();
        javax.net.SocketFactory socketFactory11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder7.socketFactory(socketFactory11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.threadsAllowedToBlockForConnectionMultiplier(5000);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions12.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions12.getDbEncoderFactory();
        int int16 = mongoClientOptions12.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12, environment17);
        java.lang.String str19 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertNotNull(readPreference9);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder34.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectRetryFrequency(15);
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.dbEncoderFactory(dBEncoderFactory11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isAutoConnectRetry();
        int int3 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties14.createMongoClient(mongoClientOptions18);
        mongoProperties14.setAuthenticationDatabase("");
        char[] charArray28 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties14.setPassword(charArray28);
        mongoProperties14.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties14.createMongoClient(mongoClientOptions33, environment34);
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder12.dbDecoderFactory(dBDecoderFactory36);
        boolean boolean38 = mongoClientOptions1.equals((java.lang.Object) builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 500 + "'", int3 == 500);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions11.isSocketKeepAlive();
        int int14 = mongoClientOptions11.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder18.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isAutoConnectRetry();
        int int29 = mongoClientOptions26.getAcceptableLatencyDifference();
        long long30 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        java.lang.String str31 = mongoClientOptions26.getDescription();
        int int32 = mongoClientOptions26.getHeartbeatFrequency();
        int int33 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.dbDecoderFactory(dBDecoderFactory35);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder15.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getHeartbeatThreadCount();
        long long23 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder2.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatThreadCount();
        int int39 = mongoClientOptions37.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions37.getReadPreference();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder42 = builder35.readPreference(readPreference41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder2.readPreference(readPreference41);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder2.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getDatabase();
        java.lang.String str15 = mongoProperties11.getUri();
        java.lang.Integer int16 = mongoProperties11.getPort();
        java.lang.String str17 = mongoProperties11.getHost();
        mongoProperties11.setUsername("");
        boolean boolean20 = mongoClientOptions9.equals((java.lang.Object) mongoProperties11);
        long long21 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getLocalThreshold();
        int int27 = mongoClientOptions23.getHeartbeatFrequency();
        boolean boolean28 = mongoClientOptions9.equals((java.lang.Object) mongoClientOptions23);
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions9.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.dbEncoderFactory(dBEncoderFactory29);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setHost("hi!");
        java.lang.String str34 = mongoProperties31.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties31.createMongoClient(mongoClientOptions35);
        mongoProperties31.setAuthenticationDatabase("");
        char[] charArray45 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties31.setPassword(charArray45);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getHeartbeatThreadCount();
        int int50 = mongoClientOptions48.getHeartbeatSocketTimeout();
        int int51 = mongoClientOptions48.getHeartbeatThreadCount();
        int int52 = mongoClientOptions48.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties31.createMongoClient(mongoClientOptions48, environment53);
        int int55 = mongoClientOptions48.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder30.dbEncoderFactory(dBEncoderFactory56);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder30.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 500 + "'", int52 == 500);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5000 + "'", int55 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        int int14 = mongoClientOptions5.getMinConnectionsPerHost();
        int int15 = mongoClientOptions5.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions5.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int10 = mongoClientOptions1.getLocalThreshold();
        int int11 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionLifeTime(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder7.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 10);
        java.lang.Class<?> wildcardClass20 = builder15.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        java.lang.String str13 = mongoClientOptions9.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        boolean boolean11 = mongoClientOptions9.isAutoConnectRetry();
        int int12 = mongoClientOptions9.getAcceptableLatencyDifference();
        long long13 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        java.lang.String str14 = mongoClientOptions9.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions9.getWriteConcern();
        int int16 = mongoClientOptions9.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder3.readPreference(readPreference17);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions17.getReadPreference();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder22 = builder11.readPreference(readPreference21);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        long long7 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getGridFsDatabase();
        mongoProperties3.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        mongoProperties16.setUri("");
        char[] charArray23 = new char[] { 'a', '#' };
        mongoProperties16.setPassword(charArray23);
        char[] charArray25 = mongoProperties16.getPassword();
        mongoProperties3.setPassword(charArray25);
        java.lang.Integer int27 = mongoProperties3.getPort();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #]");
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 32);
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, a, #,  , #,  ]");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions15);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions1.getSocketFactory();
        int int22 = mongoClientOptions1.getLocalThreshold();
        int int23 = mongoClientOptions1.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatThreadCount();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder26.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getHeartbeatThreadCount();
        int int59 = mongoClientOptions57.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions57.getReadPreference();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder55.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder46.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder17.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder65 = builder6.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatThreadCount(500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatThreadCount();
        int int26 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setHost("hi!");
        java.lang.String str39 = mongoProperties36.getDatabase();
        java.lang.String str40 = mongoProperties36.getUri();
        java.lang.Integer int41 = mongoProperties36.getPort();
        java.lang.String str42 = mongoProperties36.getHost();
        mongoProperties36.setUsername("");
        boolean boolean45 = mongoClientOptions34.equals((java.lang.Object) mongoProperties36);
        java.lang.String str46 = mongoClientOptions34.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions34.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder32.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder11.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder10.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder52 = builder10.acceptableLatencyDifference(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb://localhost/test" + "'", str40, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(10000);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        int int8 = mongoClientOptions1.getLocalThreshold();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions1.getSocketTimeout();
        int int11 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectionsPerHost(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder7.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties8.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties8.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties8.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient20 = mongoProperties8.createMongoClient(mongoClientOptions16);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoClient20);
        long long22 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions1.getWriteConcern();
        int int24 = mongoClientOptions1.getHeartbeatThreadCount();
        int int25 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5000 + "'", int25 == 5000);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.socketTimeout((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatThreadCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUsername("test");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatThreadCount();
        int int40 = mongoClientOptions38.getHeartbeatSocketTimeout();
        int int41 = mongoClientOptions38.getMaxWaitTime();
        int int42 = mongoClientOptions38.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions38.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder36.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder27.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder17.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder8.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder48 = builder8.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getDatabase();
        java.lang.String str15 = mongoProperties11.getUri();
        java.lang.Integer int16 = mongoProperties11.getPort();
        java.lang.String str17 = mongoProperties11.getHost();
        mongoProperties11.setUsername("");
        boolean boolean20 = mongoClientOptions9.equals((java.lang.Object) mongoProperties11);
        long long21 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getLocalThreshold();
        int int27 = mongoClientOptions23.getHeartbeatFrequency();
        boolean boolean28 = mongoClientOptions9.equals((java.lang.Object) mongoClientOptions23);
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions9.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.dbEncoderFactory(dBEncoderFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder6.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        boolean boolean21 = mongoClientOptions13.equals((java.lang.Object) readPreference20);
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        int int23 = mongoClientOptions13.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions13);
        int int25 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getUri();
        mongoProperties3.setPort((java.lang.Integer) 20000);
        char[] charArray16 = mongoProperties3.getPassword();
        mongoProperties3.setPort((java.lang.Integer) 1);
        mongoProperties3.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions22.getHeartbeatThreadCount();
        int int26 = mongoClientOptions22.getMinHeartbeatFrequency();
        int int27 = mongoClientOptions22.getSocketTimeout();
        boolean boolean29 = mongoClientOptions22.equals((java.lang.Object) (-1.0f));
        int int30 = mongoClientOptions22.getLocalThreshold();
        com.mongodb.MongoClient mongoClient31 = mongoProperties3.createMongoClient(mongoClientOptions22);
        mongoProperties3.setUri("test");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
        org.junit.Assert.assertNotNull(mongoClient31);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.dbEncoderFactory(dBEncoderFactory10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(32);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectRetryFrequency((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUsername("");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        mongoProperties3.setDatabase("");
        mongoProperties3.setAuthenticationDatabase("test");
        java.lang.String str17 = mongoProperties3.getUri();
        mongoProperties3.setUsername("hi!");
        mongoProperties3.clearPassword();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #]");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions10.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder8.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        int int13 = mongoClientOptions9.getConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getMaxWaitTime();
        int int40 = mongoClientOptions36.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder25.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder17.socketFactory(socketFactory41);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder46 = builder44.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 120000 + "'", int39 == 120000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions1.isAutoConnectRetry();
        int int9 = mongoClientOptions1.getConnectTimeout();
        java.lang.String str10 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions26);
        mongoProperties22.setAuthenticationDatabase("");
        char[] charArray36 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties22.setPassword(charArray36);
        mongoProperties22.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatThreadCount();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        int int44 = mongoClientOptions41.getLocalThreshold();
        int int45 = mongoClientOptions41.getHeartbeatFrequency();
        boolean boolean46 = mongoClientOptions41.isSocketKeepAlive();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties22.createMongoClient(mongoClientOptions41, environment47);
        mongoProperties22.setDatabase("hi!");
        char[] charArray51 = mongoProperties22.getPassword();
        java.lang.String str52 = mongoProperties22.getAuthenticationDatabase();
        mongoProperties22.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties54.setHost("hi!");
        java.lang.String str57 = mongoProperties54.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties54.createMongoClient(mongoClientOptions58);
        mongoProperties54.setAuthenticationDatabase("");
        char[] charArray68 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties54.setPassword(charArray68);
        mongoProperties22.setPassword(charArray68);
        mongoProperties0.setPassword(charArray68);
        java.lang.Class<?> wildcardClass72 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4 44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4 44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4,  , 4, 4]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5000 + "'", int45 == 5000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions17.getHeartbeatThreadCount();
        int int21 = mongoClientOptions17.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions17, environment22);
        int int24 = mongoClientOptions17.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions17.getDbEncoderFactory();
        int int26 = mongoClientOptions17.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions17.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        mongoProperties16.setUri("");
        char[] charArray23 = new char[] { 'a', '#' };
        mongoProperties16.setPassword(charArray23);
        char[] charArray29 = new char[] { '4', ' ', '4', '4' };
        mongoProperties16.setPassword(charArray29);
        mongoProperties12.setPassword(charArray29);
        mongoProperties12.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setHost("hi!");
        java.lang.String str37 = mongoProperties34.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties34.createMongoClient(mongoClientOptions38);
        mongoProperties34.setAuthenticationDatabase("");
        char[] charArray48 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties34.setPassword(charArray48);
        mongoProperties34.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getHeartbeatThreadCount();
        int int55 = mongoClientOptions53.getHeartbeatSocketTimeout();
        int int56 = mongoClientOptions53.getLocalThreshold();
        int int57 = mongoClientOptions53.getHeartbeatFrequency();
        boolean boolean58 = mongoClientOptions53.isSocketKeepAlive();
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties34.createMongoClient(mongoClientOptions53, environment59);
        mongoProperties34.setDatabase("hi!");
        char[] charArray63 = mongoProperties34.getPassword();
        java.lang.String str64 = mongoProperties34.getAuthenticationDatabase();
        mongoProperties34.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties66 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties66.setHost("hi!");
        java.lang.String str69 = mongoProperties66.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties66.createMongoClient(mongoClientOptions70);
        mongoProperties66.setAuthenticationDatabase("");
        char[] charArray80 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties66.setPassword(charArray80);
        mongoProperties34.setPassword(charArray80);
        mongoProperties12.setPassword(charArray80);
        mongoProperties0.setPassword(charArray80);
        java.lang.Class<?> wildcardClass85 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4 44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4 44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4,  , 4, 4]");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 15 + "'", int56 == 15);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5000 + "'", int57 == 5000);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        int int27 = mongoClientOptions18.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str7 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        java.lang.String str27 = mongoClientOptions20.toString();
        int int28 = mongoClientOptions20.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder3.socketFactory(socketFactory12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getMaxConnectionLifeTime();
        boolean boolean35 = mongoClientOptions33.isCursorFinalizerEnabled();
        boolean boolean36 = mongoClientOptions33.isAlwaysUseMBeans();
        int int37 = mongoClientOptions33.getMaxWaitTime();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder25.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        boolean boolean51 = mongoClientOptions50.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties52.setHost("hi!");
        java.lang.String str55 = mongoProperties52.getDatabase();
        java.lang.String str56 = mongoProperties52.getUri();
        java.lang.Integer int57 = mongoProperties52.getPort();
        java.lang.String str58 = mongoProperties52.getHost();
        mongoProperties52.setUsername("");
        boolean boolean61 = mongoClientOptions50.equals((java.lang.Object) mongoProperties52);
        long long62 = mongoClientOptions50.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder63.build();
        int int65 = mongoClientOptions64.getHeartbeatThreadCount();
        int int66 = mongoClientOptions64.getHeartbeatSocketTimeout();
        int int67 = mongoClientOptions64.getLocalThreshold();
        int int68 = mongoClientOptions64.getHeartbeatFrequency();
        boolean boolean69 = mongoClientOptions50.equals((java.lang.Object) mongoClientOptions64);
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions50.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder47.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder25.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder73 = builder13.dbEncoderFactory(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "mongodb://localhost/test" + "'", str56, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 15 + "'", int67 == 15);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5000 + "'", int68 == 5000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder51 = builder45.connectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setAuthenticationDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        boolean boolean33 = mongoClientOptions30.isSocketKeepAlive();
        java.lang.String str34 = mongoClientOptions30.getDescription();
        int int35 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions30);
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mongoClient36);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions11.isSocketKeepAlive();
        int int14 = mongoClientOptions11.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatSocketTimeout((int) '4');
        java.lang.Class<?> wildcardClass21 = builder20.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        int int7 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions18.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.socketTimeout((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties44.setHost("hi!");
        java.lang.String str47 = mongoProperties44.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties44.createMongoClient(mongoClientOptions48);
        mongoProperties44.setAuthenticationDatabase("");
        char[] charArray58 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties44.setPassword(charArray58);
        mongoProperties44.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        org.springframework.core.env.Environment environment64 = null;
        com.mongodb.MongoClient mongoClient65 = mongoProperties44.createMongoClient(mongoClientOptions63, environment64);
        com.mongodb.DBDecoderFactory dBDecoderFactory66 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder67 = builder43.dbDecoderFactory(dBDecoderFactory66);
        boolean boolean68 = mongoClientOptions18.equals((java.lang.Object) dBDecoderFactory66);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(mongoClient65);
        org.junit.Assert.assertNotNull(dBDecoderFactory66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions17);
        mongoProperties13.setAuthenticationDatabase("");
        char[] charArray27 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties13.setPassword(charArray27);
        mongoProperties13.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties13.createMongoClient(mongoClientOptions32, environment33);
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder12.heartbeatConnectTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions17);
        mongoProperties13.setAuthenticationDatabase("");
        char[] charArray27 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties13.setPassword(charArray27);
        mongoProperties13.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties13.createMongoClient(mongoClientOptions32, environment33);
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.socketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getMaxConnectionLifeTime();
        boolean boolean37 = mongoClientOptions35.isAutoConnectRetry();
        int int38 = mongoClientOptions35.getAcceptableLatencyDifference();
        long long39 = mongoClientOptions35.getMaxAutoConnectRetryTime();
        java.lang.String str40 = mongoClientOptions35.getDescription();
        int int41 = mongoClientOptions35.getHeartbeatFrequency();
        int int42 = mongoClientOptions35.getAcceptableLatencyDifference();
        int int43 = mongoClientOptions35.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions35.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder33.dbDecoderFactory(dBDecoderFactory46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout(20000);
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder51 = builder47.dbDecoderFactory(dBDecoderFactory50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5000 + "'", int41 == 5000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 500 + "'", int43 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.Class<?> wildcardClass9 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions21.getMaxWaitTime();
        long long25 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions21.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions21);
        boolean boolean28 = mongoClientOptions21.isAlwaysUseMBeans();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder7.minConnectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.connectTimeout(5000);
        com.mongodb.ReadPreference readPreference10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder7.readPreference(readPreference10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str8 = mongoClientOptions1.toString();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean50 = mongoClientOptions48.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions53.getReadPreference();
        boolean boolean56 = mongoClientOptions48.equals((java.lang.Object) readPreference55);
        com.mongodb.WriteConcern writeConcern57 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder58 = builder42.writeConcern(writeConcern57);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder59.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties63 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties63.setHost("hi!");
        java.lang.String str66 = mongoProperties63.getUsername();
        java.lang.Class<?> wildcardClass67 = mongoProperties63.getFieldNamingStrategy();
        java.lang.String str68 = mongoProperties63.getAuthenticationDatabase();
        java.lang.String str69 = mongoProperties63.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder70.build();
        int int72 = mongoClientOptions71.getMaxConnectionLifeTime();
        boolean boolean73 = mongoClientOptions71.isAutoConnectRetry();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient75 = mongoProperties63.createMongoClient(mongoClientOptions71);
        boolean boolean76 = mongoClientOptions71.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory77 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder62.dbEncoderFactory(dBEncoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder58.dbEncoderFactory(dBEncoderFactory77);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(writeConcern57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mongoClient75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        java.lang.String str22 = mongoProperties0.getUri();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties8.createMongoClient(mongoClientOptions12);
        mongoProperties8.setAuthenticationDatabase("");
        char[] charArray22 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties8.setPassword(charArray22);
        mongoProperties8.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties8.createMongoClient(mongoClientOptions27, environment28);
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(5);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        java.lang.Class<?> wildcardClass27 = mongoClientOptions18.getClass();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions1.isSocketKeepAlive();
        int int10 = mongoClientOptions1.getSocketTimeout();
        int int11 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str12 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getLocalThreshold();
        int int18 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setHost("hi!");
        java.lang.String str27 = mongoProperties24.getUsername();
        java.lang.Class<?> wildcardClass28 = mongoProperties24.getFieldNamingStrategy();
        java.lang.String str29 = mongoProperties24.getAuthenticationDatabase();
        java.lang.String str30 = mongoProperties24.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions32.isAutoConnectRetry();
        boolean boolean35 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient36 = mongoProperties24.createMongoClient(mongoClientOptions32);
        java.lang.String str37 = mongoProperties24.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getMaxConnectionLifeTime();
        boolean boolean41 = mongoClientOptions39.isAutoConnectRetry();
        int int42 = mongoClientOptions39.getAcceptableLatencyDifference();
        long long43 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        java.lang.String str44 = mongoClientOptions39.getDescription();
        int int45 = mongoClientOptions39.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient46 = mongoProperties24.createMongoClient(mongoClientOptions39);
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder48 = builder23.writeConcern(writeConcern47);
        java.lang.Class<?> wildcardClass49 = writeConcern47.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5000 + "'", int45 == 5000);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUri("hi!");
        char[] charArray10 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.heartbeatConnectRetryFrequency((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        boolean boolean5 = mongoClientOptions1.isSocketKeepAlive();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions11.getWriteConcern();
        boolean boolean16 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11);
        int int18 = mongoClientOptions11.getConnectionsPerHost();
        int int19 = mongoClientOptions11.getMaxWaitTime();
        int int20 = mongoClientOptions11.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxWaitTime(10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getMaxWaitTime();
        int int40 = mongoClientOptions36.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder25.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder17.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder46 = builder17.heartbeatThreadCount((int) '#');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 120000 + "'", int39 == 120000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatThreadCount();
        int int46 = mongoClientOptions44.getHeartbeatSocketTimeout();
        int int47 = mongoClientOptions44.getHeartbeatThreadCount();
        long long48 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions44.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder42.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder27.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder22.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder53 = builder15.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions31.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions31.getDbEncoderFactory();
        int int35 = mongoClientOptions31.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = builder25.writeConcern(writeConcern36);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatThreadCount();
        int int54 = mongoClientOptions52.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions52.getHeartbeatThreadCount();
        int int56 = mongoClientOptions52.getMinHeartbeatFrequency();
        int int57 = mongoClientOptions52.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions52.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder59 = builder48.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder25.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder12.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder62 = builder7.readPreference(readPreference58);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(writeConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 500 + "'", int56 == 500);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 120000 + "'", int57 == 120000);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions1.getMaxWaitTime();
        java.lang.Class<?> wildcardClass13 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        java.lang.String str8 = mongoClientOptions1.toString();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        boolean boolean50 = mongoClientOptions49.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.setHost("hi!");
        java.lang.String str54 = mongoProperties51.getDatabase();
        java.lang.String str55 = mongoProperties51.getUri();
        java.lang.Integer int56 = mongoProperties51.getPort();
        java.lang.String str57 = mongoProperties51.getHost();
        mongoProperties51.setUsername("");
        boolean boolean60 = mongoClientOptions49.equals((java.lang.Object) mongoProperties51);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder63.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder63.cursorFinalizerEnabled(true);
        boolean boolean70 = mongoClientOptions49.equals((java.lang.Object) builder63);
        com.mongodb.MongoClientOptions.Builder builder72 = builder63.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder73.build();
        int int75 = mongoClientOptions74.getMaxConnectionLifeTime();
        boolean boolean76 = mongoClientOptions74.isAutoConnectRetry();
        int int77 = mongoClientOptions74.getAcceptableLatencyDifference();
        long long78 = mongoClientOptions74.getMaxAutoConnectRetryTime();
        java.lang.String str79 = mongoClientOptions74.getDescription();
        int int80 = mongoClientOptions74.getHeartbeatFrequency();
        int int81 = mongoClientOptions74.getAcceptableLatencyDifference();
        int int82 = mongoClientOptions74.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory83 = mongoClientOptions74.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder84 = builder63.dbDecoderFactory(dBDecoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder47.dbDecoderFactory(dBDecoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder87 = builder47.heartbeatSocketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "mongodb://localhost/test" + "'", str55, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 15 + "'", int77 == 15);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5000 + "'", int80 == 5000);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 15 + "'", int81 == 15);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 500 + "'", int82 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) 35);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        java.lang.String str31 = mongoProperties6.getUsername();
        java.lang.String str32 = mongoProperties6.getGridFsDatabase();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 100);
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(32);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        mongoProperties3.setDatabase("");
        char[] charArray15 = mongoProperties3.getPassword();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charArray15);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions17.isAutoConnectRetry();
        int int20 = mongoClientOptions17.getAcceptableLatencyDifference();
        long long21 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        int int23 = mongoClientOptions17.getMinConnectionsPerHost();
        int int24 = mongoClientOptions17.getMinHeartbeatFrequency();
        long long25 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions17, environment27);
        java.lang.String str29 = mongoClientOptions17.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.minConnectionsPerHost(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        mongoProperties6.setUri("");
        char[] charArray13 = new char[] { 'a', '#' };
        mongoProperties6.setPassword(charArray13);
        mongoProperties0.setPassword(charArray13);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions22.isCursorFinalizerEnabled();
        boolean boolean25 = mongoClientOptions22.isAlwaysUseMBeans();
        int int26 = mongoClientOptions22.getMaxWaitTime();
        java.lang.String str27 = mongoClientOptions22.getRequiredReplicaSetName();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setHost("hi!");
        java.lang.String str31 = mongoProperties28.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties28.createMongoClient(mongoClientOptions32);
        mongoProperties28.setAuthenticationDatabase("");
        java.lang.String str36 = mongoProperties28.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties37.setHost("hi!");
        java.lang.String str40 = mongoProperties37.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties37.createMongoClient(mongoClientOptions41);
        mongoProperties37.setAuthenticationDatabase("");
        char[] charArray51 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties37.setPassword(charArray51);
        mongoProperties37.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatThreadCount();
        int int58 = mongoClientOptions56.getHeartbeatSocketTimeout();
        int int59 = mongoClientOptions56.getLocalThreshold();
        int int60 = mongoClientOptions56.getHeartbeatFrequency();
        boolean boolean61 = mongoClientOptions56.isSocketKeepAlive();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties37.createMongoClient(mongoClientOptions56, environment62);
        mongoProperties37.setHost("mongodb://localhost/test");
        mongoProperties37.setPort((java.lang.Integer) 15);
        char[] charArray68 = mongoProperties37.getPassword();
        mongoProperties28.setPassword(charArray68);
        boolean boolean70 = mongoClientOptions22.equals((java.lang.Object) mongoProperties28);
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getMaxConnectionLifeTime();
        boolean boolean74 = mongoClientOptions72.isAutoConnectRetry();
        int int75 = mongoClientOptions72.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory76 = mongoClientOptions72.getSocketFactory();
        java.lang.String str77 = mongoClientOptions72.getDescription();
        boolean boolean78 = mongoClientOptions22.equals((java.lang.Object) str77);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient79 = mongoProperties0.createMongoClient(mongoClientOptions22);
            org.junit.Assert.fail("Expected exception of type com.mongodb.MongoException; message: host and port should be specified in host:port format");
        } catch (com.mongodb.MongoException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\000, \000]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20000 + "'", int58 == 20000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 15 + "'", int59 == 15);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5000 + "'", int60 == 5000);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(socketFactory76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        java.lang.String str22 = mongoProperties0.getGridFsDatabase();
        java.lang.String str23 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder2 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setHost("hi!");
        java.lang.String str18 = mongoProperties15.getUsername();
        java.lang.Class<?> wildcardClass19 = mongoProperties15.getFieldNamingStrategy();
        java.lang.String str20 = mongoProperties15.getAuthenticationDatabase();
        java.lang.String str21 = mongoProperties15.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMaxConnectionLifeTime();
        boolean boolean25 = mongoClientOptions23.isCursorFinalizerEnabled();
        boolean boolean26 = mongoClientOptions23.isAlwaysUseMBeans();
        int int27 = mongoClientOptions23.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions23);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder12.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder1.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.connectionsPerHost(5000);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxAutoConnectRetryTime((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        java.lang.String str15 = mongoClientOptions10.getDescription();
        int int16 = mongoClientOptions10.getSocketTimeout();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        char[] charArray19 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(charArray19);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUsername("test");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        java.lang.Class<?> wildcardClass7 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        int int9 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        int int9 = mongoClientOptions1.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties16.createMongoClient(mongoClientOptions20);
        mongoProperties16.setAuthenticationDatabase("");
        char[] charArray30 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties16.setPassword(charArray30);
        mongoProperties16.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties16.createMongoClient(mongoClientOptions35, environment36);
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder15.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency(27017);
        java.lang.Class<?> wildcardClass42 = builder41.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        mongoProperties16.setUri("");
        char[] charArray23 = new char[] { 'a', '#' };
        mongoProperties16.setPassword(charArray23);
        char[] charArray29 = new char[] { '4', ' ', '4', '4' };
        mongoProperties16.setPassword(charArray29);
        mongoProperties12.setPassword(charArray29);
        mongoProperties12.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setHost("hi!");
        java.lang.String str37 = mongoProperties34.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties34.createMongoClient(mongoClientOptions38);
        mongoProperties34.setAuthenticationDatabase("");
        char[] charArray48 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties34.setPassword(charArray48);
        mongoProperties34.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getHeartbeatThreadCount();
        int int55 = mongoClientOptions53.getHeartbeatSocketTimeout();
        int int56 = mongoClientOptions53.getLocalThreshold();
        int int57 = mongoClientOptions53.getHeartbeatFrequency();
        boolean boolean58 = mongoClientOptions53.isSocketKeepAlive();
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties34.createMongoClient(mongoClientOptions53, environment59);
        mongoProperties34.setDatabase("hi!");
        char[] charArray63 = mongoProperties34.getPassword();
        java.lang.String str64 = mongoProperties34.getAuthenticationDatabase();
        mongoProperties34.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties66 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties66.setHost("hi!");
        java.lang.String str69 = mongoProperties66.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties66.createMongoClient(mongoClientOptions70);
        mongoProperties66.setAuthenticationDatabase("");
        char[] charArray80 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties66.setPassword(charArray80);
        mongoProperties34.setPassword(charArray80);
        mongoProperties12.setPassword(charArray80);
        mongoProperties0.setPassword(charArray80);
        char[] charArray85 = mongoProperties0.getPassword();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4 44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4 44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4,  , 4, 4]");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 15 + "'", int56 == 15);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5000 + "'", int57 == 5000);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[a, a, #,  , #,  ]");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        int int9 = mongoClientOptions5.getLocalThreshold();
        boolean boolean10 = mongoClientOptions5.isAlwaysUseMBeans();
        int int11 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions5.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions25);
        mongoProperties21.setAuthenticationDatabase("");
        char[] charArray35 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties21.setPassword(charArray35);
        mongoProperties21.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties21.createMongoClient(mongoClientOptions40, environment41);
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions40.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder18.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.minConnectionsPerHost((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxWaitTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder21.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.heartbeatFrequency(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder8.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isAutoConnectRetry();
        int int29 = mongoClientOptions26.getAcceptableLatencyDifference();
        long long30 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        java.lang.String str31 = mongoClientOptions26.getDescription();
        int int32 = mongoClientOptions26.getHeartbeatFrequency();
        int int33 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("mongodb://localhost/test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder42 = builder40.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions8.getReadPreference();
        int int11 = mongoClientOptions8.getMaxWaitTime();
        boolean boolean12 = mongoClientOptions5.equals((java.lang.Object) mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setHost("hi!");
        java.lang.String str35 = mongoProperties32.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties32.createMongoClient(mongoClientOptions36);
        mongoProperties32.setAuthenticationDatabase("");
        char[] charArray46 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties32.setPassword(charArray46);
        mongoProperties0.setPassword(charArray46);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        java.lang.Class<?> wildcardClass8 = builder3.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        java.lang.String str21 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str22 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        boolean boolean22 = mongoClientOptions19.isAlwaysUseMBeans();
        int int23 = mongoClientOptions19.getMaxWaitTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder15.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder11.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder28 = builder11.connectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder0.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setPort((java.lang.Integer) 120000);
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setUri("");
        java.lang.String str12 = mongoProperties0.getUsername();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        int int14 = mongoClientOptions11.getMaxWaitTime();
        int int15 = mongoClientOptions11.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions11.getSocketFactory();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions11.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder7.socketFactory(socketFactory17);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatThreadCount();
        int int54 = mongoClientOptions52.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions52.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.readPreference(readPreference55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder37.readPreference(readPreference55);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getHeartbeatThreadCount();
        int int70 = mongoClientOptions68.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference71 = mongoClientOptions68.getReadPreference();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions68.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder73 = builder66.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder57.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder28.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder76 = builder17.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder77 = builder8.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder78 = builder77.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertNotNull(readPreference71);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory3 = mongoClientOptions1.getDbEncoderFactory();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        int int5 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder3.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        int int16 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatThreadCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.heartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.maxAutoConnectRetryTime(10L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getConnectionsPerHost();
        int int7 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str8 = mongoClientOptions1.getDescription();
        java.lang.String str9 = mongoClientOptions1.getDescription();
        boolean boolean10 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        int int7 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int4 = mongoClientOptions1.getSocketTimeout();
        java.lang.String str5 = mongoClientOptions1.toString();
        java.lang.Class<?> wildcardClass6 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15 + "'", int3 == 15);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions17.isAutoConnectRetry();
        int int20 = mongoClientOptions17.getAcceptableLatencyDifference();
        long long21 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        int int23 = mongoClientOptions17.getMinConnectionsPerHost();
        int int24 = mongoClientOptions17.getMinHeartbeatFrequency();
        long long25 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions17, environment27);
        java.lang.String str29 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setPort((java.lang.Integer) 100);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder7.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getLocalThreshold();
        int int31 = mongoClientOptions29.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.socketFactory(socketFactory32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        boolean boolean14 = mongoClientOptions5.isSocketKeepAlive();
        boolean boolean15 = mongoClientOptions5.isCursorFinalizerEnabled();
        java.lang.String str16 = mongoClientOptions5.getDescription();
        int int17 = mongoClientOptions5.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.maxWaitTime(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        boolean boolean9 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions1.getDbEncoderFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        java.lang.Class<?> wildcardClass29 = mongoProperties11.getFieldNamingStrategy();
        java.lang.Integer int30 = mongoProperties11.getPort();
        java.lang.Class<?> wildcardClass31 = mongoProperties11.getFieldNamingStrategy();
        boolean boolean32 = mongoClientOptions1.equals((java.lang.Object) wildcardClass31);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str8 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str9 = mongoClientOptions1.toString();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str11 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getLocalThreshold();
        int int10 = mongoClientOptions6.getHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions6);
        java.lang.String str13 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        int int20 = mongoClientOptions15.getMinConnectionsPerHost();
        java.lang.String str21 = mongoClientOptions15.getDescription();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatConnectTimeout(1);
        boolean boolean28 = mongoClientOptions15.equals((java.lang.Object) builder27);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) mongoClientOptions15);
        int int30 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        boolean boolean21 = mongoClientOptions13.equals((java.lang.Object) readPreference20);
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        int int23 = mongoClientOptions13.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions13);
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(mongoClient24);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        boolean boolean10 = mongoClientOptions1.isSocketKeepAlive();
        int int11 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 10000);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Integer int18 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions20.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions20, environment24);
        int int26 = mongoClientOptions20.getConnectionsPerHost();
        java.lang.String str27 = mongoClientOptions20.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        java.lang.String str14 = mongoClientOptions5.toString();
        int int15 = mongoClientOptions5.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        java.lang.String str9 = mongoClientOptions8.getDescription();
        int int10 = mongoClientOptions8.getConnectTimeout();
        int int11 = mongoClientOptions8.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        long long7 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions1.getDbEncoderFactory();
        int int11 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("hi!");
        java.lang.String str8 = mongoProperties5.getDatabase();
        java.lang.String str9 = mongoProperties5.getDatabase();
        mongoProperties5.setUsername("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties5.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        mongoProperties13.setUri("");
        char[] charArray20 = new char[] { 'a', '#' };
        mongoProperties13.setPassword(charArray20);
        char[] charArray27 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties13.setPassword(charArray27);
        java.lang.String str29 = mongoProperties13.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        boolean boolean35 = mongoClientOptions31.isAutoConnectRetry();
        boolean boolean36 = mongoClientOptions31.isAutoConnectRetry();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties13.createMongoClient(mongoClientOptions31, environment37);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.setHost("hi!");
        mongoProperties39.setUri("");
        char[] charArray46 = new char[] { 'a', '#' };
        mongoProperties39.setPassword(charArray46);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setHost("hi!");
        java.lang.String str51 = mongoProperties48.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties48.createMongoClient(mongoClientOptions52);
        mongoProperties48.setAuthenticationDatabase("");
        char[] charArray62 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties48.setPassword(charArray62);
        mongoProperties39.setPassword(charArray62);
        mongoProperties13.setPassword(charArray62);
        mongoProperties5.setPassword(charArray62);
        mongoProperties0.setPassword(charArray62);
        java.lang.String str68 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a, #]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.Integer int16 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        com.mongodb.MongoClientOptions.Builder builder16 = builder11.maxWaitTime(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str7 = mongoClientOptions1.toString();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean13 = mongoClientOptions10.isSocketKeepAlive();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getConnectionsPerHost();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        java.lang.String str19 = mongoProperties0.getHost();
        java.lang.String str20 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        boolean boolean13 = mongoClientOptions11.isCursorFinalizerEnabled();
        boolean boolean14 = mongoClientOptions11.isAlwaysUseMBeans();
        java.lang.String str15 = mongoClientOptions11.getDescription();
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11, environment16);
        int int18 = mongoClientOptions11.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.acceptableLatencyDifference(15);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder3.build();
        int int9 = mongoClientOptions8.getMinHeartbeatFrequency();
        int int10 = mongoClientOptions8.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str12 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getDatabase();
        java.lang.String str18 = mongoProperties14.getUri();
        java.lang.Integer int19 = mongoProperties14.getPort();
        java.lang.String str20 = mongoProperties14.getUri();
        mongoProperties14.setDatabase("test");
        java.lang.String str23 = mongoProperties14.getMongoClientDatabase();
        mongoProperties14.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getLocalThreshold();
        int int30 = mongoClientOptions26.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions26.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions26.getDbDecoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties14.createMongoClient(mongoClientOptions26, environment33);
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions26);
        boolean boolean36 = mongoClientOptions26.isSocketKeepAlive();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "test" + "'", str23, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder28.maxConnectionIdleTime(32);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.minConnectionsPerHost((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.localThreshold(15);
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder5.dbDecoderFactory(dBDecoderFactory9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions8.isAlwaysUseMBeans();
        int int12 = mongoClientOptions8.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions8);
        int int14 = mongoClientOptions8.getMaxWaitTime();
        int int15 = mongoClientOptions8.getMaxWaitTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getHeartbeatThreadCount();
        int int15 = mongoClientOptions1.getConnectionsPerHost();
        int int16 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatSocketTimeout(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.connectionsPerHost((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionLifeTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties8.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties8.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties8.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient20 = mongoProperties8.createMongoClient(mongoClientOptions16);
        java.lang.String str21 = mongoProperties8.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMaxConnectionLifeTime();
        boolean boolean25 = mongoClientOptions23.isAutoConnectRetry();
        int int26 = mongoClientOptions23.getAcceptableLatencyDifference();
        long long27 = mongoClientOptions23.getMaxAutoConnectRetryTime();
        java.lang.String str28 = mongoClientOptions23.getDescription();
        int int29 = mongoClientOptions23.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient30 = mongoProperties8.createMongoClient(mongoClientOptions23);
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = builder7.writeConcern(writeConcern31);
        java.lang.Class<?> wildcardClass33 = writeConcern31.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5000 + "'", int29 == 5000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder22 = builder17.readPreference(readPreference21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minConnectionsPerHost(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectRetryFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        int int29 = mongoClientOptions25.getAcceptableLatencyDifference();
        java.lang.String str30 = mongoClientOptions25.getDescription();
        int int31 = mongoClientOptions25.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder9.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder34.dbEncoderFactory(dBEncoderFactory38);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder41 = builder34.maxConnectionLifeTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray7 = mongoProperties0.getPassword();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = charArray7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getLocalThreshold();
        int int10 = mongoClientOptions6.getHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions6);
        java.lang.String str13 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        int int20 = mongoClientOptions15.getMinConnectionsPerHost();
        java.lang.String str21 = mongoClientOptions15.getDescription();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatConnectTimeout(1);
        boolean boolean28 = mongoClientOptions15.equals((java.lang.Object) builder27);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) mongoClientOptions15);
        java.lang.Class<?> wildcardClass30 = mongoClientOptions6.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        int int8 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatSocketTimeout(10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatConnectRetryFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str5 = mongoClientOptions1.toString();
        int int6 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions1.getMaxWaitTime();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isAutoConnectRetry();
        int int3 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 500 + "'", int3 == 500);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        int int18 = mongoClientOptions15.getAcceptableLatencyDifference();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions15);
        char[] charArray23 = mongoProperties0.getPassword();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(charArray23);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUsername("");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions5.getDbDecoderFactory();
        int int15 = mongoClientOptions5.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions5.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions5.isAlwaysUseMBeans();
        long long18 = mongoClientOptions5.getMaxAutoConnectRetryTime();
        java.lang.String str19 = mongoClientOptions5.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder7.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder7.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.autoConnectRetry(true);
        boolean boolean19 = mongoClientOptions1.equals((java.lang.Object) builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        java.lang.String str14 = mongoClientOptions5.toString();
        java.lang.String str15 = mongoClientOptions5.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setHost("hi!");
        java.lang.String str20 = mongoProperties17.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties17.createMongoClient(mongoClientOptions21);
        mongoProperties17.setAuthenticationDatabase("");
        char[] charArray31 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties17.setPassword(charArray31);
        mongoProperties17.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties17.createMongoClient(mongoClientOptions36, environment37);
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder16.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions1.isAutoConnectRetry();
        long long10 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray28 = mongoProperties0.getPassword();
        char[] charArray29 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        boolean boolean7 = mongoClientOptions6.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getDatabase();
        java.lang.String str12 = mongoProperties8.getUri();
        java.lang.Integer int13 = mongoProperties8.getPort();
        java.lang.String str14 = mongoProperties8.getHost();
        mongoProperties8.setUsername("");
        boolean boolean17 = mongoClientOptions6.equals((java.lang.Object) mongoProperties8);
        java.lang.String str18 = mongoProperties8.getUri();
        mongoProperties8.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        mongoProperties21.setUri("");
        char[] charArray28 = new char[] { 'a', '#' };
        mongoProperties21.setPassword(charArray28);
        char[] charArray35 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties21.setPassword(charArray35);
        mongoProperties8.setPassword(charArray35);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        int int42 = mongoClientOptions39.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties8.createMongoClient(mongoClientOptions39, environment43);
        int int45 = mongoClientOptions39.getMaxConnectionIdleTime();
        boolean boolean46 = mongoClientOptions1.equals((java.lang.Object) int45);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties8.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties8.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties8.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient20 = mongoProperties8.createMongoClient(mongoClientOptions16);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoClient20);
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(readPreference22);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        boolean boolean12 = mongoClientOptions10.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions10.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        javax.net.SocketFactory socketFactory13 = mongoClientOptions9.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(socketFactory13);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int9 = mongoProperties0.getPort();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder12.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        java.lang.String str28 = mongoClientOptions23.getDescription();
        int int29 = mongoClientOptions23.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder3.writeConcern(writeConcern30);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory3 = mongoClientOptions1.getDbEncoderFactory();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        java.lang.String str5 = mongoClientOptions1.toString();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        int int7 = mongoClientOptions1.getConnectTimeout();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.threadsAllowedToBlockForConnectionMultiplier(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost(35);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setHost("hi!");
        java.lang.String str27 = mongoProperties24.getDatabase();
        java.lang.String str28 = mongoProperties24.getUri();
        java.lang.Integer int29 = mongoProperties24.getPort();
        java.lang.String str30 = mongoProperties24.getHost();
        mongoProperties24.setUsername("");
        boolean boolean33 = mongoClientOptions22.equals((java.lang.Object) mongoProperties24);
        long long34 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getLocalThreshold();
        int int40 = mongoClientOptions36.getHeartbeatFrequency();
        boolean boolean41 = mongoClientOptions22.equals((java.lang.Object) mongoClientOptions36);
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder18.dbEncoderFactory(dBEncoderFactory42);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder43.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5000 + "'", int40 == 5000);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        java.lang.String str25 = mongoProperties0.getHost();
        java.lang.String str26 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int18 = mongoProperties0.getPort();
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        mongoProperties8.setUri("");
        char[] charArray15 = new char[] { 'a', '#' };
        mongoProperties8.setPassword(charArray15);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setHost("hi!");
        java.lang.String str23 = mongoProperties20.getDatabase();
        java.lang.String str24 = mongoProperties20.getUri();
        java.lang.Integer int25 = mongoProperties20.getPort();
        java.lang.String str26 = mongoProperties20.getHost();
        mongoProperties20.setUsername("");
        boolean boolean29 = mongoClientOptions18.equals((java.lang.Object) mongoProperties20);
        java.lang.String str30 = mongoProperties20.getUri();
        mongoProperties20.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setHost("hi!");
        mongoProperties33.setUri("");
        char[] charArray40 = new char[] { 'a', '#' };
        mongoProperties33.setPassword(charArray40);
        char[] charArray47 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties33.setPassword(charArray47);
        mongoProperties20.setPassword(charArray47);
        mongoProperties8.setPassword(charArray47);
        mongoProperties0.setPassword(charArray47);
        java.lang.Class<?> wildcardClass52 = charArray47.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #]");
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb://localhost/test" + "'", str24, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb://localhost/test" + "'", str30, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int8 = mongoClientOptions1.getHeartbeatFrequency();
        int int9 = mongoClientOptions1.getLocalThreshold();
        boolean boolean10 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5000 + "'", int8 == 5000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUri("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        javax.net.SocketFactory socketFactory27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder24.socketFactory(socketFactory27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setHost("hi!");
        java.lang.String str24 = mongoProperties21.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions25);
        mongoProperties21.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass29 = mongoProperties21.getFieldNamingStrategy();
        char[] charArray30 = new char[] {};
        mongoProperties21.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        java.lang.String str33 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setHost("hi!");
        java.lang.String str37 = mongoProperties34.getDatabase();
        java.lang.String str38 = mongoProperties34.getDatabase();
        mongoProperties34.setUsername("mongodb://localhost/test");
        mongoProperties34.setGridFsDatabase("");
        mongoProperties34.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean52 = mongoClientOptions50.isSocketKeepAlive();
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties34.createMongoClient(mongoClientOptions50, environment53);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        boolean boolean57 = mongoClientOptions56.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties58 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties58.setHost("hi!");
        java.lang.String str61 = mongoProperties58.getDatabase();
        java.lang.String str62 = mongoProperties58.getUri();
        java.lang.Integer int63 = mongoProperties58.getPort();
        java.lang.String str64 = mongoProperties58.getHost();
        mongoProperties58.setUsername("");
        boolean boolean67 = mongoClientOptions56.equals((java.lang.Object) mongoProperties58);
        java.lang.String str68 = mongoProperties58.getUri();
        mongoProperties58.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties71 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties71.setHost("hi!");
        mongoProperties71.setUri("");
        char[] charArray78 = new char[] { 'a', '#' };
        mongoProperties71.setPassword(charArray78);
        char[] charArray85 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties71.setPassword(charArray85);
        mongoProperties58.setPassword(charArray85);
        mongoProperties34.setPassword(charArray85);
        mongoProperties0.setPassword(charArray85);
        com.mongodb.MongoClientOptions.Builder builder90 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions91 = builder90.build();
        int int92 = mongoClientOptions91.getHeartbeatThreadCount();
        int int93 = mongoClientOptions91.getHeartbeatSocketTimeout();
        int int94 = mongoClientOptions91.getMaxWaitTime();
        long long95 = mongoClientOptions91.getMaxAutoConnectRetryTime();
        int int96 = mongoClientOptions91.getMaxConnectionLifeTime();
        java.lang.String str97 = mongoClientOptions91.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient98 = mongoProperties0.createMongoClient(mongoClientOptions91);
        java.lang.String str99 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "mongodb://localhost/test" + "'", str62, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "mongodb://localhost/test" + "'", str68, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[a, #]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 20000 + "'", int93 == 20000);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 120000 + "'", int94 == 120000);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(mongoClient98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getSocketTimeout();
        java.lang.Class<?> wildcardClass6 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectionsPerHost((int) (short) 1);
        com.mongodb.WriteConcern writeConcern8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder3.writeConcern(writeConcern8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        boolean boolean5 = mongoClientOptions1.isSocketKeepAlive();
        java.lang.String str6 = mongoClientOptions1.toString();
        int int7 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getHeartbeatThreadCount();
        int int47 = mongoClientOptions45.getHeartbeatSocketTimeout();
        int int48 = mongoClientOptions45.getHeartbeatThreadCount();
        long long49 = mongoClientOptions45.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions45.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder43.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder28.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder23.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder54 = builder16.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatConnectTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties57.setHost("hi!");
        java.lang.String str60 = mongoProperties57.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        com.mongodb.MongoClient mongoClient62 = mongoProperties57.createMongoClient(mongoClientOptions61);
        mongoProperties57.setAuthenticationDatabase("");
        char[] charArray71 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties57.setPassword(charArray71);
        mongoProperties57.setDatabase("");
        java.lang.Class<?> wildcardClass75 = mongoProperties57.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        int int78 = mongoClientOptions77.getMaxConnectionLifeTime();
        boolean boolean79 = mongoClientOptions77.isAutoConnectRetry();
        int int80 = mongoClientOptions77.getAcceptableLatencyDifference();
        long long81 = mongoClientOptions77.getMaxAutoConnectRetryTime();
        int int82 = mongoClientOptions77.getLocalThreshold();
        com.mongodb.MongoClient mongoClient83 = mongoProperties57.createMongoClient(mongoClientOptions77);
        com.mongodb.DBEncoderFactory dBEncoderFactory84 = mongoClientOptions77.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder85 = builder54.dbEncoderFactory(dBEncoderFactory84);
        com.mongodb.MongoClientOptions.Builder builder86 = builder4.dbEncoderFactory(dBEncoderFactory84);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder88 = builder4.maxConnectionIdleTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(mongoClient62);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 15 + "'", int80 == 15);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 15 + "'", int82 == 15);
        org.junit.Assert.assertNotNull(mongoClient83);
        org.junit.Assert.assertNotNull(dBEncoderFactory84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        java.lang.Integer int13 = mongoProperties0.getPort();
        java.lang.String str14 = mongoProperties0.getUri();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16, environment19);
        java.lang.Integer int21 = mongoProperties0.getPort();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.localThreshold(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions7.getLocalThreshold();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions7, environment15);
        java.lang.Class<?> wildcardClass17 = mongoClientOptions7.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.acceptableLatencyDifference(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        int int8 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions5.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.connectTimeout(10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isAutoConnectRetry();
        java.lang.String str3 = mongoClientOptions1.toString();
        boolean boolean4 = mongoClientOptions1.isAutoConnectRetry();
        int int5 = mongoClientOptions1.getHeartbeatThreadCount();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties8.createMongoClient(mongoClientOptions12);
        mongoProperties8.setAuthenticationDatabase("");
        char[] charArray22 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties8.setPassword(charArray22);
        mongoProperties8.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties8.createMongoClient(mongoClientOptions27, environment28);
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatThreadCount();
        int int37 = mongoClientOptions35.getHeartbeatSocketTimeout();
        int int38 = mongoClientOptions35.getLocalThreshold();
        int int39 = mongoClientOptions35.getHeartbeatFrequency();
        boolean boolean40 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.dbDecoderFactory(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5000 + "'", int39 == 5000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatFrequency();
        int int4 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5000 + "'", int3 == 5000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionLifeTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isAutoConnectRetry();
        int int10 = mongoClientOptions7.getAcceptableLatencyDifference();
        long long11 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int12 = mongoClientOptions7.getLocalThreshold();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        java.lang.String str14 = mongoClientOptions7.toString();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions7, environment15);
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        java.lang.String str9 = mongoClientOptions8.getDescription();
        int int10 = mongoClientOptions8.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setHost("hi!");
        java.lang.String str13 = mongoProperties10.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties10.createMongoClient(mongoClientOptions14);
        mongoProperties10.setAuthenticationDatabase("");
        java.lang.String str18 = mongoProperties10.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setHost("hi!");
        java.lang.String str22 = mongoProperties19.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties19.createMongoClient(mongoClientOptions23);
        mongoProperties19.setAuthenticationDatabase("");
        char[] charArray33 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties19.setPassword(charArray33);
        mongoProperties19.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatThreadCount();
        int int40 = mongoClientOptions38.getHeartbeatSocketTimeout();
        int int41 = mongoClientOptions38.getLocalThreshold();
        int int42 = mongoClientOptions38.getHeartbeatFrequency();
        boolean boolean43 = mongoClientOptions38.isSocketKeepAlive();
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties19.createMongoClient(mongoClientOptions38, environment44);
        mongoProperties19.setHost("mongodb://localhost/test");
        mongoProperties19.setPort((java.lang.Integer) 15);
        char[] charArray50 = mongoProperties19.getPassword();
        mongoProperties10.setPassword(charArray50);
        mongoProperties0.setPassword(charArray50);
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5000 + "'", int42 == 5000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectTimeout();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str5 = mongoClientOptions1.toString();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions1.getWriteConcern();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions1.getSocketFactory();
        java.lang.String str10 = mongoClientOptions1.getDescription();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions1.getSocketFactory();
        int int12 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatSocketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setDatabase("test");
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions1.getDbEncoderFactory();
        int int7 = mongoClientOptions1.getLocalThreshold();
        int int8 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getUri();
        char[] charArray10 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("hi!");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean5 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions8.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions8.getWriteConcern();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        boolean boolean15 = mongoClientOptions8.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray28 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass29 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        boolean boolean22 = mongoClientOptions14.equals((java.lang.Object) readPreference21);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions14.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder4.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setHost("hi!");
        java.lang.String str31 = mongoProperties28.getDatabase();
        java.lang.String str32 = mongoProperties28.getUri();
        java.lang.Integer int33 = mongoProperties28.getPort();
        java.lang.String str34 = mongoProperties28.getHost();
        mongoProperties28.setUsername("");
        boolean boolean37 = mongoClientOptions26.equals((java.lang.Object) mongoProperties28);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.cursorFinalizerEnabled(true);
        boolean boolean47 = mongoClientOptions26.equals((java.lang.Object) builder40);
        com.mongodb.MongoClientOptions.Builder builder49 = builder40.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        int int52 = mongoClientOptions51.getMaxConnectionLifeTime();
        boolean boolean53 = mongoClientOptions51.isAutoConnectRetry();
        int int54 = mongoClientOptions51.getAcceptableLatencyDifference();
        long long55 = mongoClientOptions51.getMaxAutoConnectRetryTime();
        java.lang.String str56 = mongoClientOptions51.getDescription();
        int int57 = mongoClientOptions51.getHeartbeatFrequency();
        int int58 = mongoClientOptions51.getAcceptableLatencyDifference();
        int int59 = mongoClientOptions51.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory60 = mongoClientOptions51.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder40.dbDecoderFactory(dBDecoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder24.dbDecoderFactory(dBDecoderFactory60);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb://localhost/test" + "'", str32, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 15 + "'", int54 == 15);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5000 + "'", int57 == 5000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 15 + "'", int58 == 15);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 500 + "'", int59 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.autoConnectRetry(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int8 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean10 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions8);
        int int11 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxWaitTime((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder23.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectRetryFrequency(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        java.lang.String str15 = mongoClientOptions10.getDescription();
        int int16 = mongoClientOptions10.getSocketTimeout();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions10.getConnectTimeout();
        int int23 = mongoClientOptions10.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.requiredReplicaSetName("");
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory4 = mongoClientOptions1.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        java.lang.Class<?> wildcardClass6 = readPreference5.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Class<?> wildcardClass15 = mongoClient14.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.legacyDefaults();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatThreadCount();
        int int32 = mongoClientOptions30.getHeartbeatSocketTimeout();
        int int33 = mongoClientOptions30.getMaxWaitTime();
        int int34 = mongoClientOptions30.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions30.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder28.socketFactory(socketFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean48 = mongoClientOptions46.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        int int52 = mongoClientOptions51.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions51.getReadPreference();
        boolean boolean54 = mongoClientOptions46.equals((java.lang.Object) readPreference53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder40.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder19.readPreference(readPreference53);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions7.getConnectTimeout();
        int int18 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatThreadCount();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions12.getReadPreference();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder10.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder10.maxAutoConnectRetryTime((long) 5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.localThreshold(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder3.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getUri();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        long long12 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout((int) (byte) 100);
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.dbDecoderFactory(dBDecoderFactory11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions12.isAlwaysUseMBeans();
        java.lang.String str16 = mongoClientOptions12.getDescription();
        boolean boolean17 = mongoClientOptions12.isSocketKeepAlive();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions12, environment18);
        int int20 = mongoClientOptions12.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        boolean boolean8 = mongoClientOptions1.equals((java.lang.Object) (-1.0f));
        int int9 = mongoClientOptions1.getLocalThreshold();
        boolean boolean10 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions17.getHeartbeatThreadCount();
        int int21 = mongoClientOptions17.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions17, environment22);
        int int24 = mongoClientOptions17.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions17.getDbEncoderFactory();
        int int26 = mongoClientOptions17.getConnectTimeout();
        int int27 = mongoClientOptions17.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions17.getSocketFactory();
        int int29 = mongoClientOptions17.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
    }
}

