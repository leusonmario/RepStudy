import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test7501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7501");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        char[] charArray8 = mongoProperties0.getPassword();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test7502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7502");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isAutoConnectRetry();
        int int29 = mongoClientOptions26.getAcceptableLatencyDifference();
        long long30 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        java.lang.String str31 = mongoClientOptions26.getDescription();
        int int32 = mongoClientOptions26.getHeartbeatFrequency();
        int int33 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7503");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean39 = mongoClientOptions37.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions42.getReadPreference();
        boolean boolean45 = mongoClientOptions37.equals((java.lang.Object) readPreference44);
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder31.dbDecoderFactory(dBDecoderFactory46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getHeartbeatThreadCount();
        int int70 = mongoClientOptions68.getHeartbeatSocketTimeout();
        int int71 = mongoClientOptions68.getMaxWaitTime();
        int int72 = mongoClientOptions68.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory73 = mongoClientOptions68.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder66.socketFactory(socketFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder57.socketFactory(socketFactory73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder49.socketFactory(socketFactory73);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 120000 + "'", int71 == 120000);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertNotNull(socketFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test7504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7504");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory4 = mongoClientOptions1.getSocketFactory();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5000 + "'", int3 == 5000);
        org.junit.Assert.assertNotNull(socketFactory4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test7505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7505");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test7506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7506");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getMaxWaitTime();
        int int22 = mongoClientOptions18.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder7.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder26.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean39 = mongoClientOptions37.isSocketKeepAlive();
        int int40 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder26.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder7.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionLifeTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setHost("hi!");
        java.lang.String str51 = mongoProperties48.getDatabase();
        java.lang.String str52 = mongoProperties48.getUri();
        java.lang.Integer int53 = mongoProperties48.getPort();
        java.lang.String str54 = mongoProperties48.getHost();
        mongoProperties48.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getHeartbeatThreadCount();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions58.getReadPreference();
        int int62 = mongoClientOptions58.getAcceptableLatencyDifference();
        java.lang.String str63 = mongoClientOptions58.getDescription();
        int int64 = mongoClientOptions58.getSocketTimeout();
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties48.createMongoClient(mongoClientOptions58, environment65);
        int int67 = mongoClientOptions58.getSocketTimeout();
        int int68 = mongoClientOptions58.getHeartbeatConnectTimeout();
        int int69 = mongoClientOptions58.getHeartbeatSocketTimeout();
        int int70 = mongoClientOptions58.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions58.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder72 = builder45.writeConcern(writeConcern71);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "mongodb://localhost/test" + "'", str52, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 15 + "'", int62 == 15);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20000 + "'", int68 == 20000);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 20000 + "'", int69 == 20000);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10000 + "'", int70 == 10000);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test7507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7507");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 5);
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.springframework.core.env.Environment environment9 = null;
        com.mongodb.MongoClient mongoClient10 = mongoProperties0.createMongoClient(mongoClientOptions8, environment9);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClient10);
    }

    @Test
    public void test7508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7508");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test7509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7509");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str5 = mongoClientOptions1.toString();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions1.getWriteConcern();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        int int9 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test7510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7510");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions14.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.dbDecoderFactory(dBDecoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions24.isAutoConnectRetry();
        int int27 = mongoClientOptions24.getAcceptableLatencyDifference();
        long long28 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions24.getLocalThreshold();
        int int30 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions24.getHeartbeatThreadCount();
        int int32 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isCursorFinalizerEnabled();
        int int38 = mongoClientOptions36.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder12.socketFactory(socketFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test7511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7511");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test7512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7512");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        java.lang.Integer int21 = mongoProperties0.getPort();
        mongoProperties0.setUri("test");
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test7513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7513");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions1.isSocketKeepAlive();
        boolean boolean12 = mongoClientOptions1.isAlwaysUseMBeans();
        int int13 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test7514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7514");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        int int6 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int7 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test7515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7515");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setHost("hi!");
        java.lang.String str21 = mongoProperties18.getDatabase();
        java.lang.String str22 = mongoProperties18.getUri();
        java.lang.Integer int23 = mongoProperties18.getPort();
        java.lang.String str24 = mongoProperties18.getHost();
        mongoProperties18.setUsername("");
        boolean boolean27 = mongoClientOptions16.equals((java.lang.Object) mongoProperties18);
        java.lang.String str28 = mongoClientOptions16.toString();
        int int29 = mongoClientOptions16.getHeartbeatThreadCount();
        int int30 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str31 = mongoClientOptions16.getRequiredReplicaSetName();
        int int32 = mongoClientOptions16.getSocketTimeout();
        java.lang.String str33 = mongoClientOptions16.getDescription();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions16.getReadPreference();
        int int35 = mongoClientOptions16.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.dbDecoderFactory(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7516");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7517");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("test");
        java.lang.String str18 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test7518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7518");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        int int7 = mongoClientOptions1.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
    }

    @Test
    public void test7519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7519");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getMaxConnectionLifeTime();
        boolean boolean40 = mongoClientOptions38.isAutoConnectRetry();
        boolean boolean41 = mongoClientOptions38.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions38.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder34.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getMaxConnectionLifeTime();
        boolean boolean47 = mongoClientOptions45.isAutoConnectRetry();
        boolean boolean48 = mongoClientOptions45.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions45.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder34.dbEncoderFactory(dBEncoderFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder34.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = builder34.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        int int64 = mongoClientOptions63.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean65 = mongoClientOptions63.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference70 = mongoClientOptions68.getReadPreference();
        boolean boolean71 = mongoClientOptions63.equals((java.lang.Object) readPreference70);
        com.mongodb.DBDecoderFactory dBDecoderFactory72 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder73 = builder57.dbDecoderFactory(dBDecoderFactory72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder25.dbDecoderFactory(dBDecoderFactory72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder11.dbDecoderFactory(dBDecoderFactory72);
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        int int78 = mongoClientOptions77.getMaxConnectionLifeTime();
        boolean boolean79 = mongoClientOptions77.isAutoConnectRetry();
        int int80 = mongoClientOptions77.getAcceptableLatencyDifference();
        long long81 = mongoClientOptions77.getMaxAutoConnectRetryTime();
        java.lang.String str82 = mongoClientOptions77.getDescription();
        int int83 = mongoClientOptions77.getHeartbeatFrequency();
        int int84 = mongoClientOptions77.getConnectTimeout();
        boolean boolean85 = mongoClientOptions77.isAlwaysUseMBeans();
        int int86 = mongoClientOptions77.getMaxWaitTime();
        int int87 = mongoClientOptions77.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference88 = mongoClientOptions77.getReadPreference();
        int int89 = mongoClientOptions77.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory90 = mongoClientOptions77.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder91 = builder11.dbEncoderFactory(dBEncoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder93 = builder91.connectionsPerHost(500);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(readPreference70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 15 + "'", int80 == 15);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5000 + "'", int83 == 5000);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10000 + "'", int84 == 10000);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 120000 + "'", int86 == 120000);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(readPreference88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5000 + "'", int89 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test7520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7520");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7521");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str9 = mongoClientOptions1.getDescription();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test7522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7522");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        java.lang.String str14 = mongoClientOptions5.toString();
        java.lang.String str15 = mongoClientOptions5.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7523");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = builder1.build();
        int int3 = mongoClientOptions2.getHeartbeatThreadCount();
        int int4 = mongoClientOptions2.getHeartbeatSocketTimeout();
        int int5 = mongoClientOptions2.getMaxWaitTime();
        long long6 = mongoClientOptions2.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions2.getMaxConnectionLifeTime();
        java.lang.String str8 = mongoClientOptions2.getDescription();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions2.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.socketFactory(socketFactory9);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(mongoClientOptions2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20000 + "'", int4 == 20000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7524");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test7525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7525");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder24.heartbeatConnectTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test7526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7526");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int9 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str11 = mongoClientOptions1.getDescription();
        int int12 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test7527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7527");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getLocalThreshold();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions18.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(socketFactory20);
    }

    @Test
    public void test7528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7528");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray14 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(charArray14);
    }

    @Test
    public void test7529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7529");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7530");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(10000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7531");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setHost("");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str17 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
    }

    @Test
    public void test7532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7532");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(true);
        boolean boolean17 = mongoClientOptions1.equals((java.lang.Object) builder16);
        int int18 = mongoClientOptions1.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions1.getDbEncoderFactory();
        int int20 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test7533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7533");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxWaitTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder27.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
    }

    @Test
    public void test7534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7534");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        boolean boolean7 = mongoClientOptions6.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getDatabase();
        java.lang.String str12 = mongoProperties8.getUri();
        java.lang.Integer int13 = mongoProperties8.getPort();
        java.lang.String str14 = mongoProperties8.getHost();
        mongoProperties8.setUsername("");
        boolean boolean17 = mongoClientOptions6.equals((java.lang.Object) mongoProperties8);
        java.lang.String str18 = mongoClientOptions6.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder4.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test7535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7535");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder25.readPreference(readPreference31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder34.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder16.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.socketTimeout(52);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test7536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7536");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions1.getDbDecoderFactory();
        int int10 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean12 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7537");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        java.lang.String str25 = mongoProperties0.getHost();
        java.lang.Integer int26 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getLocalThreshold();
        int int32 = mongoClientOptions28.getHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions28.isSocketKeepAlive();
        int int34 = mongoClientOptions28.getHeartbeatConnectTimeout();
        java.lang.String str35 = mongoClientOptions28.getRequiredReplicaSetName();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions28, environment36);
        java.lang.String str38 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test7538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7538");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean4 = mongoClientOptions1.isAutoConnectRetry();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int6 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
    }

    @Test
    public void test7539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7539");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions8.isAlwaysUseMBeans();
        int int12 = mongoClientOptions8.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions8);
        boolean boolean14 = mongoClientOptions8.isCursorFinalizerEnabled();
        int int15 = mongoClientOptions8.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test7540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7540");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.heartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder55 = builder49.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder57 = builder49.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        int int60 = mongoClientOptions59.getHeartbeatThreadCount();
        int int61 = mongoClientOptions59.getHeartbeatSocketTimeout();
        int int62 = mongoClientOptions59.getLocalThreshold();
        int int63 = mongoClientOptions59.getHeartbeatFrequency();
        boolean boolean64 = mongoClientOptions59.isSocketKeepAlive();
        int int65 = mongoClientOptions59.getHeartbeatConnectTimeout();
        int int66 = mongoClientOptions59.getHeartbeatConnectRetryFrequency();
        int int67 = mongoClientOptions59.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory68 = mongoClientOptions59.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder49.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder43.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder26.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.heartbeatFrequency(35);
        java.lang.Class<?> wildcardClass74 = builder73.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 15 + "'", int62 == 15);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5000 + "'", int63 == 5000);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 500 + "'", int66 == 500);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test7541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7541");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
    }

    @Test
    public void test7542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7542");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions1.getWriteConcern();
        int int11 = mongoClientOptions1.getHeartbeatFrequency();
        int int12 = mongoClientOptions1.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
    }

    @Test
    public void test7543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7543");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder13 = builder3.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder3.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder3.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7544");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        boolean boolean22 = mongoClientOptions19.isAlwaysUseMBeans();
        int int23 = mongoClientOptions19.getMaxWaitTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder15.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder11.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setHost("hi!");
        java.lang.String str41 = mongoProperties38.getDatabase();
        java.lang.String str42 = mongoProperties38.getUri();
        java.lang.Integer int43 = mongoProperties38.getPort();
        java.lang.String str44 = mongoProperties38.getHost();
        mongoProperties38.setUsername("");
        boolean boolean47 = mongoClientOptions36.equals((java.lang.Object) mongoProperties38);
        long long48 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int53 = mongoClientOptions50.getLocalThreshold();
        int int54 = mongoClientOptions50.getHeartbeatFrequency();
        boolean boolean55 = mongoClientOptions36.equals((java.lang.Object) mongoClientOptions50);
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder33.dbEncoderFactory(dBEncoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder11.dbEncoderFactory(dBEncoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        int int61 = mongoClientOptions60.getMaxConnectionLifeTime();
        int int62 = mongoClientOptions60.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory63 = mongoClientOptions60.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder11.dbDecoderFactory(dBDecoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder73 = builder67.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder75 = builder67.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder77 = builder67.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        int int80 = mongoClientOptions79.getMaxConnectionLifeTime();
        int int81 = mongoClientOptions79.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory82 = mongoClientOptions79.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder83 = builder77.dbDecoderFactory(dBDecoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder11.dbDecoderFactory(dBDecoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder87 = builder84.legacyDefaults();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 15 + "'", int53 == 15);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5000 + "'", int54 == 5000);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test7545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7545");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7546");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions22.getHeartbeatThreadCount();
        java.lang.String str26 = mongoClientOptions22.toString();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions32.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder30.heartbeatConnectTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7547");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        int int7 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test7548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7548");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7549");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test7550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7550");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory3 = mongoClientOptions1.getDbEncoderFactory();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
    }

    @Test
    public void test7551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7551");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7552");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        java.lang.String str8 = mongoClientOptions1.getDescription();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test7553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7553");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7554");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        int int8 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
    }

    @Test
    public void test7555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7555");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        int int21 = mongoClientOptions19.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder2.writeConcern(writeConcern23);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test7556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7556");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        java.lang.String str11 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("");
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        char[] charArray15 = mongoProperties0.getPassword();
        char[] charArray16 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 10);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(charArray15);
        org.junit.Assert.assertNull(charArray16);
    }

    @Test
    public void test7557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7557");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatThreadCount();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        int int37 = mongoClientOptions34.getHeartbeatThreadCount();
        long long38 = mongoClientOptions34.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions34.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder28.writeConcern(writeConcern39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout((int) (byte) 100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.setHost("hi!");
        java.lang.String str50 = mongoProperties47.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        com.mongodb.MongoClient mongoClient52 = mongoProperties47.createMongoClient(mongoClientOptions51);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        int int55 = mongoClientOptions54.getMaxConnectionLifeTime();
        boolean boolean56 = mongoClientOptions54.isCursorFinalizerEnabled();
        boolean boolean57 = mongoClientOptions54.isAlwaysUseMBeans();
        boolean boolean58 = mongoClientOptions54.isAutoConnectRetry();
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties47.createMongoClient(mongoClientOptions54, environment59);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.requiredReplicaSetName("");
        boolean boolean68 = mongoClientOptions54.equals((java.lang.Object) "");
        com.mongodb.DBEncoderFactory dBEncoderFactory69 = mongoClientOptions54.getDbEncoderFactory();
        java.lang.String str70 = mongoClientOptions54.toString();
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions54.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder72 = builder46.writeConcern(writeConcern71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder19.writeConcern(writeConcern71);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder77 = builder73.socketTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(writeConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory69);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test7558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7558");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isAutoConnectRetry();
        int int29 = mongoClientOptions26.getAcceptableLatencyDifference();
        long long30 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        java.lang.String str31 = mongoClientOptions26.getDescription();
        int int32 = mongoClientOptions26.getHeartbeatFrequency();
        int int33 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder15.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder15.heartbeatThreadCount((int) '4');
        java.lang.Class<?> wildcardClass43 = builder15.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test7559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7559");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        boolean boolean13 = mongoClientOptions11.isCursorFinalizerEnabled();
        boolean boolean14 = mongoClientOptions11.isAlwaysUseMBeans();
        java.lang.String str15 = mongoClientOptions11.getDescription();
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11, environment16);
        int int18 = mongoClientOptions11.getMaxWaitTime();
        int int19 = mongoClientOptions11.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test7560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7560");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxWaitTime(500);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
    }

    @Test
    public void test7561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7561");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean21 = mongoClientOptions19.isSocketKeepAlive();
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder12.dbDecoderFactory(dBDecoderFactory23);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder12.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test7562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7562");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder26.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean39 = mongoClientOptions37.isSocketKeepAlive();
        int int40 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder26.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("test");
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        boolean boolean49 = mongoClientOptions48.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.setHost("hi!");
        java.lang.String str53 = mongoProperties50.getDatabase();
        java.lang.String str54 = mongoProperties50.getUri();
        java.lang.Integer int55 = mongoProperties50.getPort();
        java.lang.String str56 = mongoProperties50.getHost();
        mongoProperties50.setUsername("");
        boolean boolean59 = mongoClientOptions48.equals((java.lang.Object) mongoProperties50);
        long long60 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getHeartbeatThreadCount();
        int int64 = mongoClientOptions62.getHeartbeatSocketTimeout();
        int int65 = mongoClientOptions62.getLocalThreshold();
        int int66 = mongoClientOptions62.getHeartbeatFrequency();
        boolean boolean67 = mongoClientOptions48.equals((java.lang.Object) mongoClientOptions62);
        com.mongodb.DBEncoderFactory dBEncoderFactory68 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder46.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder25.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5000 + "'", int66 == 5000);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test7563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7563");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties13.getFieldNamingStrategy();
        char[] charArray18 = mongoProperties13.getPassword();
        java.lang.Class<?> wildcardClass19 = mongoProperties13.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties13.createMongoClient(mongoClientOptions21, environment26);
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions21);
        int int29 = mongoClientOptions21.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions21.getMaxConnectionLifeTime();
        int int31 = mongoClientOptions21.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
    }

    @Test
    public void test7564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7564");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7565");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getLocalThreshold();
        int int27 = mongoClientOptions23.getHeartbeatFrequency();
        int int28 = mongoClientOptions23.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions23.getAcceptableLatencyDifference();
        int int30 = mongoClientOptions23.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions23);
        int int32 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
    }

    @Test
    public void test7566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7566");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder18.heartbeatSocketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder18.minConnectionsPerHost((int) (byte) 1);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7567");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) '#');
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean31 = mongoClientOptions29.isAutoConnectRetry();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions29.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder25.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder17.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder40 = builder9.maxWaitTime((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test7568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7568");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout(27017);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7569");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.description("test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
    }

    @Test
    public void test7570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7570");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getUsername();
        java.lang.Class<?> wildcardClass18 = mongoProperties14.getFieldNamingStrategy();
        java.lang.String str19 = mongoProperties14.getAuthenticationDatabase();
        java.lang.String str20 = mongoProperties14.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions22.isAutoConnectRetry();
        boolean boolean25 = mongoClientOptions22.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient26 = mongoProperties14.createMongoClient(mongoClientOptions22);
        boolean boolean27 = mongoClientOptions22.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder13.dbEncoderFactory(dBEncoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder9.dbEncoderFactory(dBEncoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder32 = builder9.heartbeatFrequency((int) (short) 100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setHost("hi!");
        java.lang.String str36 = mongoProperties33.getUsername();
        java.lang.Class<?> wildcardClass37 = mongoProperties33.getFieldNamingStrategy();
        char[] charArray38 = mongoProperties33.getPassword();
        java.lang.Class<?> wildcardClass39 = mongoProperties33.getFieldNamingStrategy();
        mongoProperties33.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getMaxConnectionLifeTime();
        boolean boolean45 = mongoClientOptions43.isAutoConnectRetry();
        int int46 = mongoClientOptions43.getAcceptableLatencyDifference();
        long long47 = mongoClientOptions43.getMaxAutoConnectRetryTime();
        java.lang.String str48 = mongoClientOptions43.getDescription();
        boolean boolean49 = mongoClientOptions43.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties33.createMongoClient(mongoClientOptions43, environment50);
        javax.net.SocketFactory socketFactory52 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder9.socketFactory(socketFactory52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder9.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(charArray38);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(socketFactory52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
    }

    @Test
    public void test7571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7571");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.readPreference(readPreference18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions29.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions29.getDbEncoderFactory();
        java.lang.String str33 = mongoClientOptions29.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder27.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
    }

    @Test
    public void test7572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7572");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        mongoProperties6.setUri("");
        char[] charArray13 = new char[] { 'a', '#' };
        mongoProperties6.setPassword(charArray13);
        mongoProperties0.setPassword(charArray13);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.Integer int18 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #]");
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test7573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7573");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str12 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str15 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions17.getHeartbeatThreadCount();
        int int21 = mongoClientOptions17.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions17.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions17.getReadPreference();
        boolean boolean24 = mongoClientOptions17.isCursorFinalizerEnabled();
        boolean boolean25 = mongoClientOptions17.isSocketKeepAlive();
        int int26 = mongoClientOptions17.getSocketTimeout();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions17);
        int int28 = mongoClientOptions17.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test7574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7574");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder24 = builder14.readPreference(readPreference23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder11.readPreference(readPreference23);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setHost("hi!");
        java.lang.String str32 = mongoProperties29.getDatabase();
        java.lang.String str33 = mongoProperties29.getUri();
        java.lang.Integer int34 = mongoProperties29.getPort();
        java.lang.String str35 = mongoProperties29.getHost();
        mongoProperties29.setUsername("");
        boolean boolean38 = mongoClientOptions27.equals((java.lang.Object) mongoProperties29);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.cursorFinalizerEnabled(true);
        boolean boolean48 = mongoClientOptions27.equals((java.lang.Object) builder41);
        int int49 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions27.getConnectionsPerHost();
        int int51 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int52 = mongoClientOptions27.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = builder11.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test7575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7575");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        java.lang.String str15 = mongoClientOptions10.getDescription();
        int int16 = mongoClientOptions10.getSocketTimeout();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getMinConnectionsPerHost();
        int int21 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions10.getHeartbeatThreadCount();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test7576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7576");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectRetryFrequency((int) (byte) 100);
        boolean boolean16 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.heartbeatThreadCount(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder15.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7577");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Integer int18 = mongoProperties0.getPort();
        mongoProperties0.setHost("");
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test7578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7578");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7579");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        int int11 = mongoClientOptions1.getHeartbeatSocketTimeout();
        java.lang.String str12 = mongoClientOptions1.toString();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test7580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7580");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str12 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUsername("");
        java.lang.String str17 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
    }

    @Test
    public void test7581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7581");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        java.lang.Integer int13 = mongoProperties0.getPort();
        java.lang.String str14 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getLocalThreshold();
        int int20 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions16.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions16.getDbDecoderFactory();
        int int23 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions16.isCursorFinalizerEnabled();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions16);
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setHost("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mongoClient25);
    }

    @Test
    public void test7582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7582");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionLifeTime(20000);
        boolean boolean20 = mongoClientOptions1.equals((java.lang.Object) builder19);
        int int21 = mongoClientOptions1.getConnectTimeout();
        boolean boolean22 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test7583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7583");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test7584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7584");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean13 = mongoClientOptions10.isSocketKeepAlive();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getConnectionsPerHost();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        boolean boolean19 = mongoClientOptions10.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions10.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions10.getDbEncoderFactory();
        int int22 = mongoClientOptions10.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
    }

    @Test
    public void test7585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7585");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions8.isAlwaysUseMBeans();
        int int12 = mongoClientOptions8.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions8);
        int int14 = mongoClientOptions8.getConnectTimeout();
        java.lang.String str15 = mongoClientOptions8.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
    }

    @Test
    public void test7586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7586");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setHost("hi!");
        java.lang.String str31 = mongoProperties28.getDatabase();
        java.lang.String str32 = mongoProperties28.getUri();
        java.lang.Integer int33 = mongoProperties28.getPort();
        java.lang.String str34 = mongoProperties28.getHost();
        mongoProperties28.setUsername("");
        boolean boolean37 = mongoClientOptions26.equals((java.lang.Object) mongoProperties28);
        long long38 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        int int41 = mongoClientOptions40.getHeartbeatThreadCount();
        int int42 = mongoClientOptions40.getHeartbeatSocketTimeout();
        int int43 = mongoClientOptions40.getLocalThreshold();
        int int44 = mongoClientOptions40.getHeartbeatFrequency();
        boolean boolean45 = mongoClientOptions26.equals((java.lang.Object) mongoClientOptions40);
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder23.dbEncoderFactory(dBEncoderFactory46);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setHost("hi!");
        java.lang.String str51 = mongoProperties48.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties48.createMongoClient(mongoClientOptions52);
        mongoProperties48.setAuthenticationDatabase("");
        char[] charArray62 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties48.setPassword(charArray62);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        int int66 = mongoClientOptions65.getHeartbeatThreadCount();
        int int67 = mongoClientOptions65.getHeartbeatSocketTimeout();
        int int68 = mongoClientOptions65.getHeartbeatThreadCount();
        int int69 = mongoClientOptions65.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties48.createMongoClient(mongoClientOptions65, environment70);
        int int72 = mongoClientOptions65.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory73 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder47.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder16.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder6.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder77 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        int int79 = mongoClientOptions78.getHeartbeatThreadCount();
        int int80 = mongoClientOptions78.getHeartbeatSocketTimeout();
        int int81 = mongoClientOptions78.getLocalThreshold();
        int int82 = mongoClientOptions78.getHeartbeatFrequency();
        boolean boolean83 = mongoClientOptions78.isSocketKeepAlive();
        int int84 = mongoClientOptions78.getHeartbeatConnectTimeout();
        int int85 = mongoClientOptions78.getMinHeartbeatFrequency();
        int int86 = mongoClientOptions78.getMaxConnectionIdleTime();
        int int87 = mongoClientOptions78.getLocalThreshold();
        boolean boolean88 = mongoClientOptions78.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference89 = mongoClientOptions78.getReadPreference();
        long long90 = mongoClientOptions78.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern91 = mongoClientOptions78.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder92 = builder76.writeConcern(writeConcern91);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb://localhost/test" + "'", str32, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 15 + "'", int43 == 15);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5000 + "'", int44 == 5000);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20000 + "'", int67 == 20000);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 500 + "'", int69 == 500);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5000 + "'", int72 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 20000 + "'", int80 == 20000);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 15 + "'", int81 == 15);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5000 + "'", int82 == 5000);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 20000 + "'", int84 == 20000);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 500 + "'", int85 == 500);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 15 + "'", int87 == 15);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(readPreference89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(writeConcern91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test7587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7587");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) 5000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionLifeTime(52);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectRetryFrequency(32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7588");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder31.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setHost("hi!");
        java.lang.String str39 = mongoProperties36.getDatabase();
        java.lang.String str40 = mongoProperties36.getUri();
        java.lang.Integer int41 = mongoProperties36.getPort();
        java.lang.String str42 = mongoProperties36.getHost();
        mongoProperties36.setUsername("");
        boolean boolean45 = mongoClientOptions34.equals((java.lang.Object) mongoProperties36);
        long long46 = mongoClientOptions34.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getHeartbeatThreadCount();
        int int50 = mongoClientOptions48.getHeartbeatSocketTimeout();
        int int51 = mongoClientOptions48.getLocalThreshold();
        int int52 = mongoClientOptions48.getHeartbeatFrequency();
        boolean boolean53 = mongoClientOptions34.equals((java.lang.Object) mongoClientOptions48);
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions34.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder31.dbEncoderFactory(dBEncoderFactory54);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties56.setHost("hi!");
        java.lang.String str59 = mongoProperties56.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties56.createMongoClient(mongoClientOptions60);
        mongoProperties56.setAuthenticationDatabase("");
        char[] charArray70 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties56.setPassword(charArray70);
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        int int74 = mongoClientOptions73.getHeartbeatThreadCount();
        int int75 = mongoClientOptions73.getHeartbeatSocketTimeout();
        int int76 = mongoClientOptions73.getHeartbeatThreadCount();
        int int77 = mongoClientOptions73.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment78 = null;
        com.mongodb.MongoClient mongoClient79 = mongoProperties56.createMongoClient(mongoClientOptions73, environment78);
        int int80 = mongoClientOptions73.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory81 = mongoClientOptions73.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder82 = builder55.dbEncoderFactory(dBEncoderFactory81);
        com.mongodb.MongoClientOptions.Builder builder83 = builder24.dbEncoderFactory(dBEncoderFactory81);
        com.mongodb.MongoClientOptions.Builder builder84 = builder83.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder86 = builder83.socketTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb://localhost/test" + "'", str40, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5000 + "'", int52 == 5000);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20000 + "'", int75 == 20000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 500 + "'", int77 == 500);
        org.junit.Assert.assertNotNull(mongoClient79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5000 + "'", int80 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test7589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7589");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.String str17 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str22 = mongoProperties0.getUri();
        java.lang.String str23 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7590");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
    }

    @Test
    public void test7591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7591");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        java.lang.Integer int25 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions27.getWriteConcern();
        int int32 = mongoClientOptions27.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions27.getWriteConcern();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions27, environment34);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(mongoClient35);
    }

    @Test
    public void test7593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7593");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions21.isAutoConnectRetry();
        int int24 = mongoClientOptions21.getAcceptableLatencyDifference();
        long long25 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        java.lang.String str26 = mongoClientOptions21.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions21.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder17.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        javax.net.SocketFactory socketFactory34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketFactory(socketFactory34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test7594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7594");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties13.getFieldNamingStrategy();
        char[] charArray18 = mongoProperties13.getPassword();
        java.lang.Class<?> wildcardClass19 = mongoProperties13.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties13.createMongoClient(mongoClientOptions21, environment26);
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions21);
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test7595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7595");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.localThreshold(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder16.heartbeatFrequency(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7596");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str8 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str9 = mongoClientOptions1.toString();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int11 = mongoClientOptions1.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
    }

    @Test
    public void test7597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7597");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setUri("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        java.lang.String str19 = mongoClientOptions18.getDescription();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        int int21 = mongoClientOptions18.getConnectionsPerHost();
        java.lang.String str22 = mongoClientOptions18.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.Integer int24 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test7598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7598");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.setHost("hi!");
        java.lang.String str43 = mongoProperties40.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties40.createMongoClient(mongoClientOptions44);
        mongoProperties40.setAuthenticationDatabase("");
        char[] charArray54 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties40.setPassword(charArray54);
        mongoProperties40.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties40.createMongoClient(mongoClientOptions59, environment60);
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions59.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder37.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder26.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = builder16.dbDecoderFactory(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test7599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7599");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        mongoProperties6.setPort((java.lang.Integer) 120000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatThreadCount();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions34.getReadPreference();
        int int38 = mongoClientOptions34.getHeartbeatConnectTimeout();
        boolean boolean39 = mongoClientOptions34.isAutoConnectRetry();
        int int40 = mongoClientOptions34.getMaxWaitTime();
        java.lang.String str41 = mongoClientOptions34.getRequiredReplicaSetName();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties6.createMongoClient(mongoClientOptions34, environment42);
        java.lang.String str44 = mongoProperties6.getUri();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb://localhost/test" + "'", str44, "mongodb://localhost/test");
    }

    @Test
    public void test7600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7600");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.heartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7601");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.minConnectionsPerHost(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7602");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder5.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.WriteConcern writeConcern18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder15.writeConcern(writeConcern18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7603");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.connectTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7604");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7605");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        java.lang.String str14 = mongoClientOptions13.toString();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isAutoConnectRetry();
        int int18 = mongoClientOptions16.getHeartbeatConnectRetryFrequency();
        boolean boolean19 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions16);
        boolean boolean20 = mongoClientOptions16.isAutoConnectRetry();
        int int21 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test7606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7606");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        java.lang.String str9 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setHost("hi!");
        java.lang.String str13 = mongoProperties10.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties10.createMongoClient(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions17.isCursorFinalizerEnabled();
        boolean boolean20 = mongoClientOptions17.isAlwaysUseMBeans();
        boolean boolean21 = mongoClientOptions17.isAutoConnectRetry();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties10.createMongoClient(mongoClientOptions17, environment22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.requiredReplicaSetName("");
        boolean boolean31 = mongoClientOptions17.equals((java.lang.Object) "");
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions17.getDbEncoderFactory();
        java.lang.String str33 = mongoClientOptions17.toString();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions17, environment34);
        java.lang.Integer int36 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test7607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7607");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        mongoProperties6.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties6.createMongoClient(mongoClientOptions25, environment26);
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder3.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isAutoConnectRetry();
        boolean boolean34 = mongoClientOptions31.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions31.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions31.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions31.getWriteConcern();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder3.socketFactory(socketFactory39);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test7608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7608");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str5 = mongoClientOptions1.toString();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test7609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7609");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        int int6 = mongoClientOptions1.getConnectionsPerHost();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int9 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test7610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7610");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
    }

    @Test
    public void test7611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7611");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("test");
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) (-1));
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
    }

    @Test
    public void test7612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7612");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        int int13 = mongoClientOptions9.getLocalThreshold();
        int int14 = mongoClientOptions9.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions9.getConnectTimeout();
        int int16 = mongoClientOptions9.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
    }

    @Test
    public void test7613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7613");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatThreadCount();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int16 = mongoClientOptions13.getLocalThreshold();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions13);
        java.lang.String str22 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test7614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7614");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions9.getReadPreference();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder5.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions25.getReadPreference();
        boolean boolean28 = mongoClientOptions20.equals((java.lang.Object) readPreference27);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7615");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        int int10 = mongoClientOptions1.getConnectTimeout();
        int int11 = mongoClientOptions1.getLocalThreshold();
        int int12 = mongoClientOptions1.getHeartbeatThreadCount();
        boolean boolean13 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7616");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("");
        java.lang.String str29 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getHeartbeatThreadCount();
        int int33 = mongoClientOptions31.getHeartbeatSocketTimeout();
        int int34 = mongoClientOptions31.getHeartbeatThreadCount();
        int int35 = mongoClientOptions31.getMinHeartbeatFrequency();
        int int36 = mongoClientOptions31.getSocketTimeout();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions31.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setHost("hi!");
        java.lang.String str41 = mongoProperties38.getUsername();
        java.lang.Class<?> wildcardClass42 = mongoProperties38.getFieldNamingStrategy();
        java.lang.String str43 = mongoProperties38.getAuthenticationDatabase();
        java.lang.String str44 = mongoProperties38.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getMaxConnectionLifeTime();
        boolean boolean48 = mongoClientOptions46.isAutoConnectRetry();
        boolean boolean49 = mongoClientOptions46.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient50 = mongoProperties38.createMongoClient(mongoClientOptions46);
        boolean boolean51 = mongoClientOptions31.equals((java.lang.Object) mongoClient50);
        long long52 = mongoClientOptions31.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions31.getWriteConcern();
        java.lang.String str54 = mongoClientOptions31.toString();
        com.mongodb.MongoClient mongoClient55 = mongoProperties0.createMongoClient(mongoClientOptions31);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertNotNull(mongoClient55);
    }

    @Test
    public void test7617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7617");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        java.lang.Object obj6 = null;
        boolean boolean7 = mongoClientOptions1.equals(obj6);
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions1.getMinConnectionsPerHost();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        boolean boolean11 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7618");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        boolean boolean8 = mongoClientOptions1.equals((java.lang.Object) (-1.0f));
        int int9 = mongoClientOptions1.getLocalThreshold();
        int int10 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions1.getHeartbeatFrequency();
        int int12 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
    }

    @Test
    public void test7619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7619");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16, environment19);
        boolean boolean21 = mongoClientOptions16.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test7620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7620");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readPreference9);
    }

    @Test
    public void test7621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7621");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        java.lang.String str11 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getConnectionsPerHost();
        boolean boolean22 = mongoClientOptions16.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int25 = mongoClientOptions16.getAcceptableLatencyDifference();
        java.lang.String str26 = mongoClientOptions16.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test7622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7622");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions17.getHeartbeatThreadCount();
        int int21 = mongoClientOptions17.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions17, environment22);
        int int24 = mongoClientOptions17.getHeartbeatFrequency();
        int int25 = mongoClientOptions17.getMaxConnectionIdleTime();
        java.lang.String str26 = mongoClientOptions17.toString();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionLifeTime(100);
        boolean boolean35 = mongoClientOptions17.equals((java.lang.Object) 100);
        boolean boolean36 = mongoClientOptions17.isAutoConnectRetry();
        int int37 = mongoClientOptions17.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
    }

    @Test
    public void test7623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7623");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        mongoProperties11.setUri("");
        char[] charArray18 = new char[] { 'a', '#' };
        mongoProperties11.setPassword(charArray18);
        char[] charArray25 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties11.setPassword(charArray25);
        java.lang.String str27 = mongoProperties11.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean31 = mongoClientOptions29.isCursorFinalizerEnabled();
        boolean boolean32 = mongoClientOptions29.isAlwaysUseMBeans();
        boolean boolean33 = mongoClientOptions29.isAutoConnectRetry();
        boolean boolean34 = mongoClientOptions29.isAutoConnectRetry();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties11.createMongoClient(mongoClientOptions29, environment35);
        int int37 = mongoClientOptions29.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions29.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder10.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatConnectTimeout(52);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test7624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7624");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        mongoProperties0.setPassword(charArray11);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setHost("hi!");
        java.lang.String str20 = mongoProperties17.getDatabase();
        java.lang.String str21 = mongoProperties17.getUri();
        java.lang.Integer int22 = mongoProperties17.getPort();
        java.lang.String str23 = mongoProperties17.getHost();
        mongoProperties17.setUsername("");
        boolean boolean26 = mongoClientOptions15.equals((java.lang.Object) mongoProperties17);
        long long27 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions15);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[\000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test7625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7625");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        int int23 = mongoClientOptions16.getConnectionsPerHost();
        java.lang.String str24 = mongoClientOptions16.getRequiredReplicaSetName();
        int int25 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions16, environment26);
        java.lang.String str28 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        char[] charArray30 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(charArray30);
    }

    @Test
    public void test7626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7626");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions1.isSocketKeepAlive();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test7627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7627");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions1.getHeartbeatThreadCount();
        int int11 = mongoClientOptions1.getMinConnectionsPerHost();
        int int12 = mongoClientOptions1.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions1.getRequiredReplicaSetName();
        int int14 = mongoClientOptions1.getHeartbeatThreadCount();
        boolean boolean15 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7628");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatThreadCount();
        int int54 = mongoClientOptions52.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions52.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.readPreference(readPreference55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder37.readPreference(readPreference55);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getHeartbeatThreadCount();
        int int70 = mongoClientOptions68.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference71 = mongoClientOptions68.getReadPreference();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions68.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder73 = builder66.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder57.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder28.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder76 = builder17.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder77 = builder8.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder78 = builder77.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder82 = builder78.connectionsPerHost((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertNotNull(readPreference71);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test7629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7629");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean13 = mongoClientOptions10.isSocketKeepAlive();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getConnectionsPerHost();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        mongoProperties0.setHost("test");
        mongoProperties0.setUri("mongodb://localhost/test");
        char[] charArray23 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(charArray23);
    }

    @Test
    public void test7630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7630");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionLifeTime(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getUsername();
        java.lang.Class<?> wildcardClass26 = mongoProperties22.getFieldNamingStrategy();
        java.lang.String str27 = mongoProperties22.getAuthenticationDatabase();
        java.lang.String str28 = mongoProperties22.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getMaxConnectionLifeTime();
        boolean boolean32 = mongoClientOptions30.isCursorFinalizerEnabled();
        boolean boolean33 = mongoClientOptions30.isAlwaysUseMBeans();
        int int34 = mongoClientOptions30.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient35 = mongoProperties22.createMongoClient(mongoClientOptions30);
        javax.net.SocketFactory socketFactory36 = mongoClientOptions30.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder19.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder11.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder40 = builder11.localThreshold((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "test" + "'", str28, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test7631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7631");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.heartbeatConnectTimeout(27017);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7632");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setAuthenticationDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        boolean boolean33 = mongoClientOptions30.isSocketKeepAlive();
        java.lang.String str34 = mongoClientOptions30.getDescription();
        int int35 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions30);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str39 = mongoProperties0.getGridFsDatabase();
        java.lang.String str40 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "test" + "'", str40, "test");
    }

    @Test
    public void test7633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7633");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        char[] charArray8 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties9.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties9.createMongoClient(mongoClientOptions28, environment29);
        int int31 = mongoClientOptions28.getConnectTimeout();
        int int32 = mongoClientOptions28.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties0.createMongoClient(mongoClientOptions28, environment33);
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatThreadCount();
        int int39 = mongoClientOptions37.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions37.getReadPreference();
        int int41 = mongoClientOptions37.getHeartbeatConnectTimeout();
        boolean boolean42 = mongoClientOptions37.isAutoConnectRetry();
        int int43 = mongoClientOptions37.getHeartbeatFrequency();
        int int44 = mongoClientOptions37.getConnectionsPerHost();
        boolean boolean45 = mongoClientOptions37.isAlwaysUseMBeans();
        int int46 = mongoClientOptions37.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions37.getWriteConcern();
        int int48 = mongoClientOptions37.getMinHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions37);
        int int50 = mongoClientOptions37.getHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5000 + "'", int43 == 5000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 500 + "'", int48 == 500);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5000 + "'", int50 == 5000);
    }

    @Test
    public void test7634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7634");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUri();
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.Integer int13 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        int int20 = mongoClientOptions15.getConnectionsPerHost();
        boolean boolean21 = mongoClientOptions15.isAutoConnectRetry();
        int int22 = mongoClientOptions15.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getLocalThreshold();
        int int29 = mongoClientOptions25.getHeartbeatFrequency();
        int int30 = mongoClientOptions25.getMinConnectionsPerHost();
        boolean boolean31 = mongoClientOptions25.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions25.getWriteConcern();
        boolean boolean33 = mongoClientOptions15.equals((java.lang.Object) writeConcern32);
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions15, environment34);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean43 = mongoClientOptions41.isSocketKeepAlive();
        int int44 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int45 = mongoClientOptions41.getMinConnectionsPerHost();
        int int46 = mongoClientOptions41.getHeartbeatSocketTimeout();
        java.lang.String str47 = mongoClientOptions41.toString();
        java.lang.String str48 = mongoClientOptions41.getDescription();
        int int49 = mongoClientOptions41.getLocalThreshold();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions41, environment50);
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5000 + "'", int29 == 5000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(mongoClient51);
    }

    @Test
    public void test7635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7635");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions1.isAlwaysUseMBeans();
        int int10 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int11 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        java.lang.String str28 = mongoProperties25.getUsername();
        java.lang.Class<?> wildcardClass29 = mongoProperties25.getFieldNamingStrategy();
        java.lang.String str30 = mongoProperties25.getAuthenticationDatabase();
        java.lang.String str31 = mongoProperties25.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getMaxConnectionLifeTime();
        boolean boolean35 = mongoClientOptions33.isCursorFinalizerEnabled();
        boolean boolean36 = mongoClientOptions33.isAlwaysUseMBeans();
        int int37 = mongoClientOptions33.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient38 = mongoProperties25.createMongoClient(mongoClientOptions33);
        javax.net.SocketFactory socketFactory39 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder22.socketFactory(socketFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder22.heartbeatConnectRetryFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder44 = builder22.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder22.maxConnectionIdleTime((int) (short) 10);
        boolean boolean47 = mongoClientOptions1.equals((java.lang.Object) builder22);
        com.mongodb.MongoClientOptions.Builder builder49 = builder22.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "test" + "'", str31, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test7636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7636");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getLocalThreshold();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7637");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost(500);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbDecoderFactory(dBDecoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7638");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setAuthenticationDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        boolean boolean33 = mongoClientOptions30.isSocketKeepAlive();
        java.lang.String str34 = mongoClientOptions30.getDescription();
        int int35 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions30);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str39 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str41 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "mongodb://localhost/test" + "'", str41, "mongodb://localhost/test");
    }

    @Test
    public void test7639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7639");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.heartbeatFrequency(15);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getDatabase();
        java.lang.String str16 = mongoProperties12.getDatabase();
        mongoProperties12.setUsername("mongodb://localhost/test");
        mongoProperties12.setGridFsDatabase("");
        mongoProperties12.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean30 = mongoClientOptions28.isSocketKeepAlive();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties12.createMongoClient(mongoClientOptions28, environment31);
        javax.net.SocketFactory socketFactory33 = mongoClientOptions28.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder3.socketFactory(socketFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7640");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test7641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7641");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getMaxWaitTime();
        int int22 = mongoClientOptions18.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder7.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder26.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean39 = mongoClientOptions37.isSocketKeepAlive();
        int int40 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder26.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder7.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.minHeartbeatFrequency((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test7642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7642");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        java.lang.String str5 = mongoClientOptions1.toString();
        int int6 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setHost("hi!");
        java.lang.String str13 = mongoProperties10.getDatabase();
        java.lang.String str14 = mongoProperties10.getUri();
        java.lang.Integer int15 = mongoProperties10.getPort();
        java.lang.String str16 = mongoProperties10.getHost();
        mongoProperties10.setUsername("");
        boolean boolean19 = mongoClientOptions8.equals((java.lang.Object) mongoProperties10);
        java.lang.String str20 = mongoProperties10.getUri();
        mongoProperties10.setPort((java.lang.Integer) 20000);
        char[] charArray23 = mongoProperties10.getPassword();
        boolean boolean24 = mongoClientOptions1.equals((java.lang.Object) charArray23);
        long long25 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        long long26 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int27 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.Class<?> wildcardClass28 = mongoClientOptions1.getClass();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test7643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7643");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str9 = mongoProperties0.getUri();
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.Integer int13 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        int int20 = mongoClientOptions15.getConnectionsPerHost();
        boolean boolean21 = mongoClientOptions15.isAutoConnectRetry();
        int int22 = mongoClientOptions15.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getLocalThreshold();
        int int29 = mongoClientOptions25.getHeartbeatFrequency();
        int int30 = mongoClientOptions25.getMinConnectionsPerHost();
        boolean boolean31 = mongoClientOptions25.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions25.getWriteConcern();
        boolean boolean33 = mongoClientOptions15.equals((java.lang.Object) writeConcern32);
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions15, environment34);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean43 = mongoClientOptions41.isSocketKeepAlive();
        int int44 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int45 = mongoClientOptions41.getMinConnectionsPerHost();
        int int46 = mongoClientOptions41.getHeartbeatSocketTimeout();
        java.lang.String str47 = mongoClientOptions41.toString();
        java.lang.String str48 = mongoClientOptions41.getDescription();
        int int49 = mongoClientOptions41.getLocalThreshold();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions41, environment50);
        java.lang.Integer int52 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5000 + "'", int29 == 5000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNull(int52);
    }

    @Test
    public void test7644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7644");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.threadsAllowedToBlockForConnectionMultiplier(5000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7645");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder21 = builder7.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder23 = builder7.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7646");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isSocketKeepAlive();
        int int5 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test7647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7647");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean8 = mongoClientOptions1.isAutoConnectRetry();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test7648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7648");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int9 = mongoProperties0.getPort();
        mongoProperties0.setUsername("");
        java.lang.String str12 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getDatabase();
        java.lang.String str20 = mongoProperties16.getUri();
        java.lang.Integer int21 = mongoProperties16.getPort();
        java.lang.String str22 = mongoProperties16.getHost();
        mongoProperties16.setUsername("");
        boolean boolean25 = mongoClientOptions14.equals((java.lang.Object) mongoProperties16);
        long long26 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getLocalThreshold();
        int int32 = mongoClientOptions28.getHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions28);
        javax.net.SocketFactory socketFactory34 = mongoClientOptions14.getSocketFactory();
        int int35 = mongoClientOptions14.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost(1);
        boolean boolean49 = mongoClientOptions14.equals((java.lang.Object) 1);
        boolean boolean50 = mongoClientOptions14.isAlwaysUseMBeans();
        boolean boolean51 = mongoClientOptions14.isSocketKeepAlive();
        int int52 = mongoClientOptions14.getHeartbeatThreadCount();
        com.mongodb.MongoClient mongoClient53 = mongoProperties0.createMongoClient(mongoClientOptions14);
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(mongoClient53);
    }

    @Test
    public void test7649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7649");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        int int8 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertNotNull(writeConcern10);
    }

    @Test
    public void test7650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7650");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory7 = mongoClientOptions1.getSocketFactory();
        int int8 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(socketFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test7651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7651");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getLocalThreshold();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions15);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions1.getSocketFactory();
        int int22 = mongoClientOptions1.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost(1);
        boolean boolean36 = mongoClientOptions1.equals((java.lang.Object) 1);
        int int37 = mongoClientOptions1.getMaxConnectionIdleTime();
        boolean boolean38 = mongoClientOptions1.isAlwaysUseMBeans();
        int int39 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int40 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int41 = mongoClientOptions1.getSocketTimeout();
        int int42 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 500 + "'", int39 == 500);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(writeConcern43);
    }

    @Test
    public void test7652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7652");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int19 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("test");
        java.lang.String str22 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "test" + "'", str22, "test");
    }

    @Test
    public void test7653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7653");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder33 = builder21.readPreference(readPreference32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.readPreference(readPreference32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test7654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7654");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray19 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, a, #,  , #,  ]");
    }

    @Test
    public void test7655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7655");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.socketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getMaxConnectionLifeTime();
        boolean boolean37 = mongoClientOptions35.isAutoConnectRetry();
        int int38 = mongoClientOptions35.getAcceptableLatencyDifference();
        long long39 = mongoClientOptions35.getMaxAutoConnectRetryTime();
        java.lang.String str40 = mongoClientOptions35.getDescription();
        int int41 = mongoClientOptions35.getHeartbeatFrequency();
        int int42 = mongoClientOptions35.getAcceptableLatencyDifference();
        int int43 = mongoClientOptions35.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions35.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder33.dbDecoderFactory(dBDecoderFactory46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder33.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5000 + "'", int41 == 5000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 500 + "'", int43 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test7656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7656");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("test");
        java.lang.String str23 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7657");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        boolean boolean14 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int15 = mongoClientOptions1.getConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test7658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7658");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatThreadCount();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getLocalThreshold();
        int int16 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions12.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions12, environment19);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 120000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        java.lang.String str28 = mongoProperties25.getDatabase();
        java.lang.String str29 = mongoProperties25.getUri();
        java.lang.Integer int30 = mongoProperties25.getPort();
        java.lang.Class<?> wildcardClass31 = mongoProperties25.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass32 = mongoProperties25.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isAutoConnectRetry();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties25.createMongoClient(mongoClientOptions34, environment36);
        int int38 = mongoClientOptions34.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions34.getSocketFactory();
        int int40 = mongoClientOptions34.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.acceptableLatencyDifference(0);
        boolean boolean48 = mongoClientOptions34.equals((java.lang.Object) 0);
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions34, environment49);
        int int51 = mongoClientOptions34.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory52 = mongoClientOptions34.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions34.getDbEncoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10000 + "'", int51 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory52);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
    }

    @Test
    public void test7659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7659");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = builder1.build();
        int int3 = mongoClientOptions2.getHeartbeatThreadCount();
        int int4 = mongoClientOptions2.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions2.getReadPreference();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions2.getWriteConcern();
        int int7 = mongoClientOptions2.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions2.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.writeConcern(writeConcern8);
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.maxConnectionIdleTime(35);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        long long27 = mongoClientOptions23.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder19.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder0.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder32 = builder0.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectionsPerHost((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(mongoClientOptions2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20000 + "'", int4 == 20000);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test7660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7660");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7661");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder3.build();
        com.mongodb.MongoClientOptions.Builder builder10 = builder3.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder10.build();
        java.lang.String str16 = mongoClientOptions15.toString();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions15.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(readPreference17);
    }

    @Test
    public void test7662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7662");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test7663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7663");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int8 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getDatabase();
        java.lang.String str13 = mongoProperties9.getDatabase();
        mongoProperties9.setUsername("mongodb://localhost/test");
        mongoProperties9.setGridFsDatabase("");
        mongoProperties9.setUsername("mongodb://localhost/test");
        java.lang.String str20 = mongoProperties9.getUri();
        char[] charArray21 = mongoProperties9.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions26);
        mongoProperties22.setAuthenticationDatabase("");
        char[] charArray36 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties22.setPassword(charArray36);
        mongoProperties22.setDatabase("");
        mongoProperties22.setAuthenticationDatabase("");
        mongoProperties22.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties43.setHost("hi!");
        java.lang.String str46 = mongoProperties43.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties43.createMongoClient(mongoClientOptions47);
        mongoProperties43.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass51 = mongoProperties43.getFieldNamingStrategy();
        char[] charArray52 = new char[] {};
        mongoProperties43.setPassword(charArray52);
        mongoProperties22.setPassword(charArray52);
        char[] charArray55 = mongoProperties22.getPassword();
        mongoProperties9.setPassword(charArray55);
        mongoProperties0.setPassword(charArray55);
        java.lang.Class<?> wildcardClass58 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test7664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7664");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        long long4 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        int int7 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
    }

    @Test
    public void test7665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7665");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        mongoProperties0.clearPassword();
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 5000);
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[\000, \000]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000]");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7666");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.String str12 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getLocalThreshold();
        int int18 = mongoClientOptions14.getHeartbeatFrequency();
        int int19 = mongoClientOptions14.getConnectionsPerHost();
        int int20 = mongoClientOptions14.getLocalThreshold();
        java.lang.String str21 = mongoClientOptions14.getDescription();
        java.lang.String str22 = mongoClientOptions14.getDescription();
        int int23 = mongoClientOptions14.getLocalThreshold();
        int int24 = mongoClientOptions14.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        int int26 = mongoClientOptions14.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions14);
        java.lang.String str28 = mongoProperties0.getDatabase();
        char[] charArray29 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(charArray29);
    }

    @Test
    public void test7667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7667");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setHost("hi!");
        java.lang.String str39 = mongoProperties36.getDatabase();
        java.lang.String str40 = mongoProperties36.getUri();
        java.lang.Integer int41 = mongoProperties36.getPort();
        java.lang.String str42 = mongoProperties36.getHost();
        mongoProperties36.setUsername("");
        boolean boolean45 = mongoClientOptions34.equals((java.lang.Object) mongoProperties36);
        java.lang.String str46 = mongoProperties36.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.setHost("hi!");
        java.lang.String str50 = mongoProperties47.getDatabase();
        java.lang.String str51 = mongoProperties47.getUri();
        java.lang.Integer int52 = mongoProperties47.getPort();
        java.lang.String str53 = mongoProperties47.getHost();
        mongoProperties47.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getHeartbeatThreadCount();
        int int59 = mongoClientOptions57.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions57.getReadPreference();
        int int61 = mongoClientOptions57.getAcceptableLatencyDifference();
        java.lang.String str62 = mongoClientOptions57.getDescription();
        int int63 = mongoClientOptions57.getSocketTimeout();
        org.springframework.core.env.Environment environment64 = null;
        com.mongodb.MongoClient mongoClient65 = mongoProperties47.createMongoClient(mongoClientOptions57, environment64);
        int int66 = mongoClientOptions57.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient67 = mongoProperties36.createMongoClient(mongoClientOptions57);
        int int68 = mongoClientOptions57.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference69 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder70 = builder24.readPreference(readPreference69);
        com.mongodb.MongoClientOptions.Builder builder72 = builder24.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        int int74 = mongoClientOptions73.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb://localhost/test" + "'", str40, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "mongodb://localhost/test" + "'", str46, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mongodb://localhost/test" + "'", str51, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 15 + "'", int61 == 15);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(mongoClient65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(mongoClient67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 500 + "'", int68 == 500);
        org.junit.Assert.assertNotNull(readPreference69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
    }

    @Test
    public void test7668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7668");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions23.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder15.dbDecoderFactory(dBDecoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectTimeout(10000);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = builder11.readPreference(readPreference34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatThreadCount(10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.minHeartbeatFrequency(27017);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7669");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray9 = new char[] {};
        mongoProperties0.setPassword(charArray9);
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 100);
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("test");
        char[] charArray18 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test7670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7670");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getAcceptableLatencyDifference();
        long long23 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        int int24 = mongoClientOptions19.getMinConnectionsPerHost();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int26 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test7671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7671");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder22.build();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions29.getWriteConcern();
        boolean boolean34 = mongoClientOptions29.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        java.lang.Object obj36 = null;
        boolean boolean37 = mongoClientOptions29.equals(obj36);
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder22.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder12.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test7672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7672");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatThreadCount();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder26.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getHeartbeatThreadCount();
        int int59 = mongoClientOptions57.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions57.getReadPreference();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder55.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder46.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder17.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder65 = builder6.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test7673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7673");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketTimeout(500);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test7674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7674");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions1.getDescription();
        boolean boolean17 = mongoClientOptions1.isAutoConnectRetry();
        int int18 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int19 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions1.getWriteConcern();
        int int21 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test7675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7675");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setPort((java.lang.Integer) 15);
        mongoProperties9.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions15.getHeartbeatThreadCount();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions15);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoProperties9);
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions1.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
    }

    @Test
    public void test7676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7676");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions5.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions5.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions5.getSocketFactory();
        int int12 = mongoClientOptions5.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test7677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7677");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder18.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7678");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) '#');
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int53 = mongoClientOptions50.getHeartbeatThreadCount();
        long long54 = mongoClientOptions50.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory55 = mongoClientOptions50.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder48.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        int int74 = mongoClientOptions73.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean75 = mongoClientOptions73.isSocketKeepAlive();
        int int76 = mongoClientOptions73.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory77 = mongoClientOptions73.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder65.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder56.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder36.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder82 = builder36.maxWaitTime(15);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(socketFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test7679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7679");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions22.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        java.lang.String str26 = mongoClientOptions22.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minConnectionsPerHost((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test7680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7680");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        java.lang.String str7 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions1.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(socketFactory9);
    }

    @Test
    public void test7681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7681");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean13 = mongoClientOptions10.isSocketKeepAlive();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions10.getHeartbeatConnectTimeout();
        boolean boolean16 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions10);
        int int17 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
    }

    @Test
    public void test7682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7682");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getHeartbeatThreadCount();
        long long40 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder7.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectRetryFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test7683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7683");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatConnectTimeout();
        boolean boolean11 = mongoClientOptions9.isSocketKeepAlive();
        long long12 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test7684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7684");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getDatabase();
        java.lang.String str16 = mongoProperties12.getUri();
        java.lang.Integer int17 = mongoProperties12.getPort();
        java.lang.String str18 = mongoProperties12.getHost();
        mongoProperties12.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        int int26 = mongoClientOptions22.getAcceptableLatencyDifference();
        java.lang.String str27 = mongoClientOptions22.getDescription();
        int int28 = mongoClientOptions22.getSocketTimeout();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties12.createMongoClient(mongoClientOptions22, environment29);
        int int31 = mongoClientOptions22.getSocketTimeout();
        int int32 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int34 = mongoClientOptions22.getConnectTimeout();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions22, environment35);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(mongoClient36);
    }

    @Test
    public void test7685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7685");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        int int23 = mongoClientOptions19.getConnectTimeout();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        boolean boolean25 = mongoClientOptions19.isAlwaysUseMBeans();
        int int26 = mongoClientOptions19.getAcceptableLatencyDifference();
        int int27 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions19.getReadPreference();
        int int29 = mongoClientOptions19.getHeartbeatFrequency();
        int int30 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5000 + "'", int29 == 5000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
    }

    @Test
    public void test7686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7686");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions32.isAutoConnectRetry();
        boolean boolean35 = mongoClientOptions32.isAlwaysUseMBeans();
        int int36 = mongoClientOptions32.getHeartbeatFrequency();
        int int37 = mongoClientOptions32.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions32.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions32.getDbEncoderFactory();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties6.createMongoClient(mongoClientOptions32, environment40);
        int int42 = mongoClientOptions32.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5000 + "'", int36 == 5000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test7687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7687");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout(1);
        boolean boolean14 = mongoClientOptions1.equals((java.lang.Object) builder13);
        int int15 = mongoClientOptions1.getMinConnectionsPerHost();
        int int16 = mongoClientOptions1.getMaxWaitTime();
        int int17 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean18 = mongoClientOptions1.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test7688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7688");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions11.getWriteConcern();
        boolean boolean16 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11);
        java.lang.String str18 = mongoProperties0.getDatabase();
        java.lang.Integer int19 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test7689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7689");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        java.lang.Object obj6 = null;
        boolean boolean7 = mongoClientOptions1.equals(obj6);
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int10 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
    }

    @Test
    public void test7690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7690");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount(52);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionLifeTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7691");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.heartbeatThreadCount(10000);
        com.mongodb.MongoClientOptions.Builder builder30 = builder20.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionLifeTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.heartbeatThreadCount((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7692");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test7693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7693");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions1.getReadPreference();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions1.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test7694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7694");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(10000);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) ' ');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test7695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7695");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions17);
        mongoProperties13.setAuthenticationDatabase("");
        char[] charArray27 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties13.setPassword(charArray27);
        mongoProperties13.setDatabase("");
        java.lang.Class<?> wildcardClass31 = mongoProperties13.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getMaxConnectionLifeTime();
        boolean boolean35 = mongoClientOptions33.isAutoConnectRetry();
        int int36 = mongoClientOptions33.getAcceptableLatencyDifference();
        long long37 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        int int38 = mongoClientOptions33.getLocalThreshold();
        com.mongodb.MongoClient mongoClient39 = mongoProperties13.createMongoClient(mongoClientOptions33);
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions33.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder12.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getHeartbeatThreadCount();
        int int47 = mongoClientOptions45.getHeartbeatSocketTimeout();
        int int48 = mongoClientOptions45.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions45.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder50 = builder41.readPreference(readPreference49);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test7696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7696");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = null;
        mongoProperties0.setPassword(charArray7);
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str12 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("test");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        boolean boolean24 = mongoClientOptions19.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions19.getWriteConcern();
        java.lang.Object obj26 = null;
        boolean boolean27 = mongoClientOptions19.equals(obj26);
        int int28 = mongoClientOptions19.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions19, environment29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions32.getLocalThreshold();
        int int36 = mongoClientOptions32.getHeartbeatFrequency();
        int int37 = mongoClientOptions32.getConnectionsPerHost();
        int int38 = mongoClientOptions32.getLocalThreshold();
        java.lang.String str39 = mongoClientOptions32.getDescription();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties0.createMongoClient(mongoClientOptions32, environment40);
        mongoProperties0.clearPassword();
        java.lang.Integer int43 = mongoProperties0.getPort();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5000 + "'", int36 == 5000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNull(int43);
    }

    @Test
    public void test7697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7697");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions17.isAutoConnectRetry();
        boolean boolean20 = mongoClientOptions17.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder22 = builder13.readPreference(readPreference21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatThreadCount();
        int int32 = mongoClientOptions30.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions30.getReadPreference();
        int int34 = mongoClientOptions30.getHeartbeatConnectTimeout();
        boolean boolean35 = mongoClientOptions30.isAutoConnectRetry();
        boolean boolean36 = mongoClientOptions30.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions30.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder28.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder4.readPreference(readPreference37);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7698");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getHeartbeatThreadCount();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder5.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder5.maxConnectionLifeTime(5000);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder43.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions50.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = builder43.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder43.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        com.mongodb.MongoClientOptions.Builder builder60 = builder57.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder69.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder82.build();
        int int84 = mongoClientOptions83.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean85 = mongoClientOptions83.isSocketKeepAlive();
        int int86 = mongoClientOptions83.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory87 = mongoClientOptions83.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder88 = builder75.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder89 = builder66.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder90 = builder43.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder91 = builder40.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder92 = builder29.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder94 = builder29.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test7699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7699");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatConnectRetryFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatThreadCount();
        int int32 = mongoClientOptions30.getHeartbeatSocketTimeout();
        int int33 = mongoClientOptions30.getHeartbeatThreadCount();
        int int34 = mongoClientOptions30.getMinHeartbeatFrequency();
        int int35 = mongoClientOptions30.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions30.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder37 = builder28.readPreference(readPreference36);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        int int43 = mongoClientOptions39.getAcceptableLatencyDifference();
        java.lang.String str44 = mongoClientOptions39.getDescription();
        int int45 = mongoClientOptions39.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern46 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder47 = builder37.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder23.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder13.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder51 = builder13.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        com.mongodb.MongoClientOptions.Builder builder55 = builder52.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.heartbeatThreadCount(32);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatThreadCount(120000);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatConnectRetryFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        boolean boolean66 = mongoClientOptions65.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions65.getDbEncoderFactory();
        int int68 = mongoClientOptions65.getMinConnectionsPerHost();
        int int69 = mongoClientOptions65.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory70 = mongoClientOptions65.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder61.socketFactory(socketFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder13.socketFactory(socketFactory70);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 15 + "'", int43 == 15);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(writeConcern46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5000 + "'", int69 == 5000);
        org.junit.Assert.assertNotNull(socketFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test7700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7700");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        int int7 = mongoClientOptions1.getConnectTimeout();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        int int9 = mongoClientOptions1.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
    }

    @Test
    public void test7701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7701");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions12.isAlwaysUseMBeans();
        java.lang.String str16 = mongoClientOptions12.getDescription();
        boolean boolean17 = mongoClientOptions12.isSocketKeepAlive();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions12, environment18);
        int int20 = mongoClientOptions12.getConnectionsPerHost();
        int int21 = mongoClientOptions12.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
    }

    @Test
    public void test7702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7702");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.minConnectionsPerHost(32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7703");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        int int9 = mongoClientOptions5.getLocalThreshold();
        int int10 = mongoClientOptions5.getMaxConnectionLifeTime();
        boolean boolean11 = mongoClientOptions5.isAutoConnectRetry();
        int int12 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str13 = mongoClientOptions5.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7704");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.readPreference(readPreference18);
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.readPreference(readPreference18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency(5);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setHost("hi!");
        mongoProperties28.setUri("");
        char[] charArray35 = new char[] { 'a', '#' };
        mongoProperties28.setPassword(charArray35);
        char[] charArray42 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties28.setPassword(charArray42);
        java.lang.String str44 = mongoProperties28.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getMaxConnectionLifeTime();
        boolean boolean48 = mongoClientOptions46.isCursorFinalizerEnabled();
        boolean boolean49 = mongoClientOptions46.isAlwaysUseMBeans();
        boolean boolean50 = mongoClientOptions46.isAutoConnectRetry();
        boolean boolean51 = mongoClientOptions46.isAutoConnectRetry();
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties28.createMongoClient(mongoClientOptions46, environment52);
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions46.getDbDecoderFactory();
        int int55 = mongoClientOptions46.getMaxConnectionLifeTime();
        boolean boolean56 = mongoClientOptions46.isAutoConnectRetry();
        boolean boolean57 = mongoClientOptions46.isAutoConnectRetry();
        boolean boolean58 = mongoClientOptions46.isCursorFinalizerEnabled();
        long long59 = mongoClientOptions46.getMaxAutoConnectRetryTime();
        int int60 = mongoClientOptions46.getConnectionsPerHost();
        int int61 = mongoClientOptions46.getMinConnectionsPerHost();
        int int62 = mongoClientOptions46.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions46.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder25.socketFactory(socketFactory63);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test7705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7705");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7706");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatFrequency();
        int int11 = mongoClientOptions9.getConnectTimeout();
        int int12 = mongoClientOptions9.getConnectTimeout();
        java.lang.Class<?> wildcardClass13 = mongoClientOptions9.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test7707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7707");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getLocalThreshold();
        int int10 = mongoClientOptions6.getHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions6);
        java.lang.String str13 = mongoClientOptions6.getDescription();
        int int14 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int15 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int16 = mongoClientOptions6.getMaxWaitTime();
        int int17 = mongoClientOptions6.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
    }

    @Test
    public void test7708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7708");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        java.lang.Class<?> wildcardClass13 = mongoProperties9.getFieldNamingStrategy();
        java.lang.String str14 = mongoProperties9.getDatabase();
        mongoProperties9.setUsername("mongodb://localhost/test");
        java.lang.String str17 = mongoProperties9.getDatabase();
        mongoProperties9.setGridFsDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setHost("hi!");
        java.lang.String str23 = mongoProperties20.getDatabase();
        java.lang.String str24 = mongoProperties20.getUri();
        java.lang.String str25 = mongoProperties20.getUri();
        java.lang.String str26 = mongoProperties20.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setHost("hi!");
        java.lang.String str30 = mongoProperties27.getDatabase();
        java.lang.String str31 = mongoProperties27.getUri();
        java.lang.Integer int32 = mongoProperties27.getPort();
        java.lang.String str33 = mongoProperties27.getHost();
        java.lang.String str34 = mongoProperties27.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setHost("hi!");
        mongoProperties35.setUri("");
        char[] charArray42 = new char[] { 'a', '#' };
        mongoProperties35.setPassword(charArray42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        boolean boolean46 = mongoClientOptions45.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.setHost("hi!");
        java.lang.String str50 = mongoProperties47.getDatabase();
        java.lang.String str51 = mongoProperties47.getUri();
        java.lang.Integer int52 = mongoProperties47.getPort();
        java.lang.String str53 = mongoProperties47.getHost();
        mongoProperties47.setUsername("");
        boolean boolean56 = mongoClientOptions45.equals((java.lang.Object) mongoProperties47);
        java.lang.String str57 = mongoProperties47.getUri();
        mongoProperties47.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties60 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties60.setHost("hi!");
        mongoProperties60.setUri("");
        char[] charArray67 = new char[] { 'a', '#' };
        mongoProperties60.setPassword(charArray67);
        char[] charArray74 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties60.setPassword(charArray74);
        mongoProperties47.setPassword(charArray74);
        mongoProperties35.setPassword(charArray74);
        mongoProperties27.setPassword(charArray74);
        mongoProperties20.setPassword(charArray74);
        mongoProperties9.setPassword(charArray74);
        mongoProperties0.setPassword(charArray74);
        java.lang.String str82 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb://localhost/test" + "'", str24, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb://localhost/test" + "'", str25, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb://localhost/test" + "'", str31, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "test" + "'", str34, "test");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a, #]");
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mongodb://localhost/test" + "'", str51, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "mongodb://localhost/test" + "'", str57, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a, #]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test7709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7709");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions15.isAlwaysUseMBeans();
        int int19 = mongoClientOptions15.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder13.heartbeatConnectRetryFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder13.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int32 = mongoClientOptions29.getLocalThreshold();
        int int33 = mongoClientOptions29.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        boolean boolean35 = mongoClientOptions29.isAlwaysUseMBeans();
        int int36 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions38.getReadPreference();
        int int41 = mongoClientOptions38.getMaxWaitTime();
        boolean boolean42 = mongoClientOptions38.isCursorFinalizerEnabled();
        int int43 = mongoClientOptions38.getMaxConnectionLifeTime();
        boolean boolean44 = mongoClientOptions29.equals((java.lang.Object) int43);
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder13.dbEncoderFactory(dBEncoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder13.connectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder50 = builder13.localThreshold((int) ' ');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5000 + "'", int33 == 5000);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test7710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7710");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        boolean boolean23 = mongoClientOptions15.equals((java.lang.Object) readPreference22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions15.getDbDecoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions15, environment25);
        int int27 = mongoClientOptions15.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test7711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7711");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions9.getReadPreference();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = builder5.readPreference(readPreference13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions25.getReadPreference();
        boolean boolean28 = mongoClientOptions20.equals((java.lang.Object) readPreference27);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.description("test");
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.maxWaitTime(100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7712");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("");
        mongoProperties0.setHost("hi!");
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        mongoProperties14.setUri("");
        char[] charArray21 = new char[] { 'a', '#' };
        mongoProperties14.setPassword(charArray21);
        char[] charArray28 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties14.setPassword(charArray28);
        java.lang.String str30 = mongoProperties14.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions32.isCursorFinalizerEnabled();
        boolean boolean35 = mongoClientOptions32.isAlwaysUseMBeans();
        boolean boolean36 = mongoClientOptions32.isAutoConnectRetry();
        boolean boolean37 = mongoClientOptions32.isAutoConnectRetry();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties14.createMongoClient(mongoClientOptions32, environment38);
        long long40 = mongoClientOptions32.getMaxAutoConnectRetryTime();
        boolean boolean41 = mongoClientOptions32.isAlwaysUseMBeans();
        boolean boolean42 = mongoClientOptions32.isCursorFinalizerEnabled();
        boolean boolean43 = mongoClientOptions32.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory44 = mongoClientOptions32.getSocketFactory();
        int int45 = mongoClientOptions32.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.heartbeatThreadCount(32);
        boolean boolean54 = mongoClientOptions32.equals((java.lang.Object) 32);
        int int55 = mongoClientOptions32.getConnectionsPerHost();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties0.createMongoClient(mongoClientOptions32, environment56);
        java.lang.String str58 = mongoProperties0.getUri();
        java.lang.String str59 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 120000 + "'", int45 == 120000);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "mongodb://localhost/test" + "'", str58, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "mongodb://localhost/test" + "'", str59, "mongodb://localhost/test");
    }

    @Test
    public void test7713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7713");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("");
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test7714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7714");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions29.getWriteConcern();
        boolean boolean34 = mongoClientOptions29.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder27.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder3.writeConcern(writeConcern35);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test7715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7715");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getLocalThreshold();
        int int9 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test7716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7716");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        long long20 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions16.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder24.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder36 = builder24.connectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7717");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str9 = mongoClientOptions1.toString();
        int int10 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int11 = mongoClientOptions1.getConnectTimeout();
        int int12 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties13.getFieldNamingStrategy();
        char[] charArray18 = mongoProperties13.getPassword();
        java.lang.Class<?> wildcardClass19 = mongoProperties13.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties13.createMongoClient(mongoClientOptions21, environment26);
        java.lang.Integer int28 = mongoProperties13.getPort();
        java.lang.String str29 = mongoProperties13.getHost();
        mongoProperties13.clearPassword();
        boolean boolean31 = mongoClientOptions1.equals((java.lang.Object) mongoProperties13);
        int int32 = mongoClientOptions1.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test7718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7718");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions21.isAutoConnectRetry();
        int int24 = mongoClientOptions21.getAcceptableLatencyDifference();
        long long25 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions21.getLocalThreshold();
        int int27 = mongoClientOptions21.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions21.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder17.writeConcern(writeConcern28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.heartbeatConnectTimeout((int) ' ');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test7719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7719");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectRetryFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        int int29 = mongoClientOptions25.getAcceptableLatencyDifference();
        java.lang.String str30 = mongoClientOptions25.getDescription();
        int int31 = mongoClientOptions25.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder9.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7720");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        java.lang.Integer int25 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test7721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7721");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        java.lang.String str8 = mongoClientOptions1.toString();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder9.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        boolean boolean27 = mongoClientOptions24.isAlwaysUseMBeans();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.dbDecoderFactory(dBDecoderFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout(0);
        boolean boolean35 = mongoClientOptions1.equals((java.lang.Object) builder34);
        int int36 = mongoClientOptions1.getLocalThreshold();
        int int37 = mongoClientOptions1.getMaxWaitTime();
        int int38 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
    }

    @Test
    public void test7722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7722");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test7723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7723");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        int int4 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean5 = mongoClientOptions1.isSocketKeepAlive();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        boolean boolean7 = mongoClientOptions1.isAlwaysUseMBeans();
        int int8 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5000 + "'", int4 == 5000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
    }

    @Test
    public void test7724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7724");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions12.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.socketFactory(socketFactory16);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder8.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test7725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7725");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getHeartbeatThreadCount();
        int int59 = mongoClientOptions57.getHeartbeatSocketTimeout();
        int int60 = mongoClientOptions57.getHeartbeatThreadCount();
        int int61 = mongoClientOptions57.getMinHeartbeatFrequency();
        int int62 = mongoClientOptions57.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference63 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder64 = builder55.readPreference(readPreference63);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder65.build();
        int int67 = mongoClientOptions66.getHeartbeatThreadCount();
        int int68 = mongoClientOptions66.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference69 = mongoClientOptions66.getReadPreference();
        int int70 = mongoClientOptions66.getAcceptableLatencyDifference();
        java.lang.String str71 = mongoClientOptions66.getDescription();
        int int72 = mongoClientOptions66.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern73 = mongoClientOptions66.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder64.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder46.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder8.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder79 = builder76.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 500 + "'", int61 == 500);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 120000 + "'", int62 == 120000);
        org.junit.Assert.assertNotNull(readPreference63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20000 + "'", int68 == 20000);
        org.junit.Assert.assertNotNull(readPreference69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 15 + "'", int70 == 15);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(writeConcern73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test7726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7726");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setHost("hi!");
        java.lang.String str27 = mongoProperties24.getDatabase();
        java.lang.String str28 = mongoProperties24.getUri();
        java.lang.Integer int29 = mongoProperties24.getPort();
        java.lang.String str30 = mongoProperties24.getHost();
        mongoProperties24.setUsername("");
        boolean boolean33 = mongoClientOptions22.equals((java.lang.Object) mongoProperties24);
        long long34 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getLocalThreshold();
        int int40 = mongoClientOptions36.getHeartbeatFrequency();
        boolean boolean41 = mongoClientOptions22.equals((java.lang.Object) mongoClientOptions36);
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder18.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.minConnectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5000 + "'", int40 == 5000);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test7727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7727");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxWaitTime();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getHeartbeatThreadCount();
        int int9 = mongoClientOptions1.getConnectTimeout();
        int int10 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test7728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7728");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        int int8 = mongoClientOptions1.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions1.getDbEncoderFactory();
        boolean boolean10 = mongoClientOptions1.isCursorFinalizerEnabled();
        java.lang.String str11 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7729");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount(500);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7730");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getDatabase();
        java.lang.String str13 = mongoProperties9.getUri();
        java.lang.Integer int14 = mongoProperties9.getPort();
        java.lang.String str15 = mongoProperties9.getHost();
        mongoProperties9.setUsername("");
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) mongoProperties9);
        java.lang.String str19 = mongoProperties9.getGridFsDatabase();
        java.lang.String str20 = mongoProperties9.getHost();
        char[] charArray21 = mongoProperties9.getPassword();
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) mongoProperties9);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test7731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7731");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        int int28 = mongoClientOptions18.getHeartbeatConnectTimeout();
        boolean boolean29 = mongoClientOptions18.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions18.getDbEncoderFactory();
        boolean boolean31 = mongoClientOptions18.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test7732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7732");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int3 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 500 + "'", int2 == 500);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15 + "'", int3 == 15);
    }

    @Test
    public void test7733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7733");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatThreadCount();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.readPreference(readPreference25);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder16.build();
        boolean boolean28 = mongoClientOptions27.isCursorFinalizerEnabled();
        int int29 = mongoClientOptions27.getLocalThreshold();
        boolean boolean30 = mongoClientOptions27.isSocketKeepAlive();
        int int31 = mongoClientOptions27.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions27.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder13.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test7734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7734");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.WriteConcern writeConcern24 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder21.writeConcern(writeConcern24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7735");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str29 = mongoProperties0.getUri();
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
    }

    @Test
    public void test7736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7736");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7737");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        boolean boolean13 = mongoClientOptions11.isCursorFinalizerEnabled();
        boolean boolean14 = mongoClientOptions11.isAlwaysUseMBeans();
        java.lang.String str15 = mongoClientOptions11.getDescription();
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11, environment16);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setHost("hi!");
        java.lang.String str21 = mongoProperties18.getDatabase();
        java.lang.String str22 = mongoProperties18.getUri();
        java.lang.Integer int23 = mongoProperties18.getPort();
        java.lang.String str24 = mongoProperties18.getHost();
        mongoProperties18.setUri("test");
        mongoProperties18.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions29.getReadPreference();
        int int32 = mongoClientOptions29.getMaxWaitTime();
        int int33 = mongoClientOptions29.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties18.createMongoClient(mongoClientOptions29, environment34);
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions29, environment36);
        java.lang.String str38 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str39 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str40 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5000 + "'", int33 == 5000);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "test" + "'", str38, "test");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "test" + "'", str39, "test");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "test" + "'", str40, "test");
    }

    @Test
    public void test7738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7738");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean38 = mongoClientOptions36.isSocketKeepAlive();
        int int39 = mongoClientOptions36.getThreadsAllowedToBlockForConnectionMultiplier();
        int int40 = mongoClientOptions36.getHeartbeatFrequency();
        int int41 = mongoClientOptions36.getConnectTimeout();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder29.socketFactory(socketFactory42);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5000 + "'", int40 == 5000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test7739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7739");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        boolean boolean7 = mongoClientOptions1.isCursorFinalizerEnabled();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        int int11 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean12 = mongoClientOptions1.isSocketKeepAlive();
        int int13 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        int int15 = mongoClientOptions1.getMinConnectionsPerHost();
        int int16 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
    }

    @Test
    public void test7740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7740");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        long long8 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions1.getHeartbeatConnectTimeout();
        boolean boolean10 = mongoClientOptions1.isAutoConnectRetry();
        int int11 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions1.getSocketFactory();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions1.getReadPreference();
        int int14 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
    }

    @Test
    public void test7741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7741");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions25.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setHost("hi!");
        java.lang.String str30 = mongoProperties27.getDatabase();
        java.lang.String str31 = mongoProperties27.getUri();
        java.lang.Integer int32 = mongoProperties27.getPort();
        java.lang.String str33 = mongoProperties27.getHost();
        mongoProperties27.setUsername("");
        boolean boolean36 = mongoClientOptions25.equals((java.lang.Object) mongoProperties27);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.cursorFinalizerEnabled(true);
        boolean boolean46 = mongoClientOptions25.equals((java.lang.Object) builder39);
        com.mongodb.MongoClientOptions.Builder builder48 = builder39.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getMaxConnectionLifeTime();
        boolean boolean52 = mongoClientOptions50.isAutoConnectRetry();
        int int53 = mongoClientOptions50.getAcceptableLatencyDifference();
        long long54 = mongoClientOptions50.getMaxAutoConnectRetryTime();
        java.lang.String str55 = mongoClientOptions50.getDescription();
        int int56 = mongoClientOptions50.getHeartbeatFrequency();
        int int57 = mongoClientOptions50.getAcceptableLatencyDifference();
        int int58 = mongoClientOptions50.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions50.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder39.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder17.dbDecoderFactory(dBDecoderFactory59);
        boolean boolean62 = mongoClientOptions1.equals((java.lang.Object) dBDecoderFactory59);
        int int63 = mongoClientOptions1.getConnectTimeout();
        javax.net.SocketFactory socketFactory64 = mongoClientOptions1.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb://localhost/test" + "'", str31, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 15 + "'", int53 == 15);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5000 + "'", int56 == 5000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 15 + "'", int57 == 15);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 500 + "'", int58 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertNotNull(socketFactory64);
    }

    @Test
    public void test7742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7742");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean8 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions1.getDbEncoderFactory();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test7743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7743");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        java.lang.String str8 = mongoClientOptions1.getDescription();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean10 = mongoClientOptions1.isSocketKeepAlive();
        int int11 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test7744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7744");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        int int14 = mongoClientOptions7.getHeartbeatFrequency();
        int int15 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean16 = mongoClientOptions7.isAutoConnectRetry();
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test7745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7745");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        boolean boolean21 = mongoClientOptions7.equals((java.lang.Object) "");
        javax.net.SocketFactory socketFactory22 = mongoClientOptions7.getSocketFactory();
        int int23 = mongoClientOptions7.getMinHeartbeatFrequency();
        java.lang.String str24 = mongoClientOptions7.getRequiredReplicaSetName();
        int int25 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        java.lang.String str26 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test7746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7746");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7747");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int34 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions37, environment38);
        char[] charArray40 = mongoProperties0.getPassword();
        java.lang.Integer int41 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int41);
    }

    @Test
    public void test7748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7748");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectTimeout();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(writeConcern10);
    }

    @Test
    public void test7749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7749");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxWaitTime(32);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7750");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder14.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setHost("hi!");
        java.lang.String str29 = mongoProperties26.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties26.createMongoClient(mongoClientOptions30);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getMaxConnectionLifeTime();
        boolean boolean35 = mongoClientOptions33.isCursorFinalizerEnabled();
        boolean boolean36 = mongoClientOptions33.isAlwaysUseMBeans();
        boolean boolean37 = mongoClientOptions33.isAutoConnectRetry();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties26.createMongoClient(mongoClientOptions33, environment38);
        int int40 = mongoClientOptions33.getHeartbeatConnectRetryFrequency();
        int int41 = mongoClientOptions33.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions33.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder21.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder21.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionLifeTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test7751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7751");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatSocketTimeout();
        int int12 = mongoClientOptions9.getLocalThreshold();
        int int13 = mongoClientOptions9.getHeartbeatFrequency();
        boolean boolean14 = mongoClientOptions9.isSocketKeepAlive();
        int int15 = mongoClientOptions9.getHeartbeatConnectTimeout();
        java.lang.String str16 = mongoClientOptions9.getRequiredReplicaSetName();
        long long17 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions9.getMaxWaitTime();
        int int19 = mongoClientOptions9.getMaxWaitTime();
        int int20 = mongoClientOptions9.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions9.getLocalThreshold();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions9);
        java.lang.String str23 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7752");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test7753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7753");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setHost("hi!");
        java.lang.String str10 = mongoProperties7.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties7.createMongoClient(mongoClientOptions11);
        mongoProperties7.setAuthenticationDatabase("");
        java.lang.String str15 = mongoProperties7.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties16.createMongoClient(mongoClientOptions20);
        mongoProperties16.setAuthenticationDatabase("");
        char[] charArray30 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties16.setPassword(charArray30);
        mongoProperties16.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatThreadCount();
        int int37 = mongoClientOptions35.getHeartbeatSocketTimeout();
        int int38 = mongoClientOptions35.getLocalThreshold();
        int int39 = mongoClientOptions35.getHeartbeatFrequency();
        boolean boolean40 = mongoClientOptions35.isSocketKeepAlive();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties16.createMongoClient(mongoClientOptions35, environment41);
        mongoProperties16.setHost("mongodb://localhost/test");
        mongoProperties16.setPort((java.lang.Integer) 15);
        char[] charArray47 = mongoProperties16.getPassword();
        mongoProperties7.setPassword(charArray47);
        boolean boolean49 = mongoClientOptions1.equals((java.lang.Object) mongoProperties7);
        java.lang.String str50 = mongoProperties7.getMongoClientDatabase();
        java.lang.String str51 = mongoProperties7.getDatabase();
        mongoProperties7.clearPassword();
        char[] charArray53 = mongoProperties7.getPassword();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5000 + "'", int39 == 5000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "test" + "'", str50, "test");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test7754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7754");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setHost("test");
        java.lang.String str24 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4 44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4 44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4,  , 4, 4]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "test" + "'", str24, "test");
    }

    @Test
    public void test7755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7755");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7756");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions15.isAlwaysUseMBeans();
        int int19 = mongoClientOptions15.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder13.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionLifeTime(120000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency(10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7757");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setHost("test");
        char[] charArray33 = mongoProperties0.getPassword();
        char[] charArray34 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[\000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test7758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7758");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setHost("hi!");
        java.lang.String str35 = mongoProperties32.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties32.createMongoClient(mongoClientOptions36);
        mongoProperties32.setAuthenticationDatabase("");
        char[] charArray46 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties32.setPassword(charArray46);
        mongoProperties0.setPassword(charArray46);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getMaxConnectionLifeTime();
        boolean boolean52 = mongoClientOptions50.isCursorFinalizerEnabled();
        boolean boolean53 = mongoClientOptions50.isAlwaysUseMBeans();
        int int54 = mongoClientOptions50.getMaxWaitTime();
        java.lang.String str55 = mongoClientOptions50.getRequiredReplicaSetName();
        int int56 = mongoClientOptions50.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment57 = null;
        com.mongodb.MongoClient mongoClient58 = mongoProperties0.createMongoClient(mongoClientOptions50, environment57);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties59.setHost("hi!");
        java.lang.String str62 = mongoProperties59.getDatabase();
        java.lang.String str63 = mongoProperties59.getUri();
        java.lang.Integer int64 = mongoProperties59.getPort();
        java.lang.String str65 = mongoProperties59.getHost();
        mongoProperties59.setUsername("");
        java.lang.String str68 = mongoProperties59.getUri();
        char[] charArray69 = mongoProperties59.getPassword();
        mongoProperties59.setGridFsDatabase("");
        java.lang.Integer int72 = mongoProperties59.getPort();
        boolean boolean73 = mongoClientOptions50.equals((java.lang.Object) mongoProperties59);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 120000 + "'", int54 == 120000);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 500 + "'", int56 == 500);
        org.junit.Assert.assertNotNull(mongoClient58);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "mongodb://localhost/test" + "'", str63, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "mongodb://localhost/test" + "'", str68, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray69);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test7759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7759");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(20000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test7760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7760");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getHeartbeatThreadCount();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions6.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.writeConcern(writeConcern11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.threadsAllowedToBlockForConnectionMultiplier(35);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7761");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
    }

    @Test
    public void test7762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7762");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        java.lang.String str7 = mongoProperties4.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties4.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties4.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties4.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient16 = mongoProperties4.createMongoClient(mongoClientOptions12);
        boolean boolean17 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.dbEncoderFactory(dBEncoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getHeartbeatThreadCount();
        int int30 = mongoClientOptions26.getMinHeartbeatFrequency();
        int int31 = mongoClientOptions26.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder33 = builder24.readPreference(readPreference32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder24.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getMaxConnectionLifeTime();
        boolean boolean41 = mongoClientOptions39.isCursorFinalizerEnabled();
        boolean boolean42 = mongoClientOptions39.isAlwaysUseMBeans();
        int int43 = mongoClientOptions39.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder37.dbDecoderFactory(dBDecoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder19.dbDecoderFactory(dBDecoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder48 = builder19.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout(0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 120000 + "'", int43 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test7763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7763");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        int int23 = mongoClientOptions19.getConnectTimeout();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        java.lang.String str25 = mongoClientOptions19.toString();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions19.getWriteConcern();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(writeConcern26);
    }

    @Test
    public void test7764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7764");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.heartbeatThreadCount(10000);
        com.mongodb.MongoClientOptions.Builder builder30 = builder20.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionLifeTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.alwaysUseMBeans(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setHost("hi!");
        java.lang.String str38 = mongoProperties35.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties35.createMongoClient(mongoClientOptions39);
        mongoProperties35.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean50 = mongoClientOptions48.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        int int54 = mongoClientOptions53.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions53.getReadPreference();
        boolean boolean56 = mongoClientOptions48.equals((java.lang.Object) readPreference55);
        int int57 = mongoClientOptions48.getMinConnectionsPerHost();
        int int58 = mongoClientOptions48.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient59 = mongoProperties35.createMongoClient(mongoClientOptions48);
        boolean boolean60 = mongoClientOptions48.isSocketKeepAlive();
        long long61 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory62 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder34.dbEncoderFactory(dBEncoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        int int68 = mongoClientOptions67.getMaxConnectionLifeTime();
        boolean boolean69 = mongoClientOptions67.isCursorFinalizerEnabled();
        boolean boolean70 = mongoClientOptions67.isAlwaysUseMBeans();
        int int71 = mongoClientOptions67.getMaxWaitTime();
        java.lang.String str72 = mongoClientOptions67.getRequiredReplicaSetName();
        int int73 = mongoClientOptions67.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern74 = mongoClientOptions67.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder75 = builder63.writeConcern(writeConcern74);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 15 + "'", int58 == 15);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(dBEncoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 120000 + "'", int71 == 120000);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 500 + "'", int73 == 500);
        org.junit.Assert.assertNotNull(writeConcern74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test7765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7765");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getMaxConnectionLifeTime();
        boolean boolean47 = mongoClientOptions45.isAutoConnectRetry();
        boolean boolean48 = mongoClientOptions45.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions45.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder41.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder36.writeConcern(writeConcern51);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder55 = builder36.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test7766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7766");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str28 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getMaxConnectionLifeTime();
        boolean boolean32 = mongoClientOptions30.isAutoConnectRetry();
        int int33 = mongoClientOptions30.getAcceptableLatencyDifference();
        long long34 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        java.lang.String str35 = mongoClientOptions30.getRequiredReplicaSetName();
        boolean boolean36 = mongoClientOptions30.isSocketKeepAlive();
        int int37 = mongoClientOptions30.getLocalThreshold();
        boolean boolean38 = mongoClientOptions30.isCursorFinalizerEnabled();
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions30);
        java.lang.String str40 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getHeartbeatThreadCount();
        int int44 = mongoClientOptions42.getHeartbeatSocketTimeout();
        int int45 = mongoClientOptions42.getMaxWaitTime();
        long long46 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        int int47 = mongoClientOptions42.getMaxConnectionLifeTime();
        java.lang.String str48 = mongoClientOptions42.getDescription();
        int int49 = mongoClientOptions42.getConnectionsPerHost();
        java.lang.String str50 = mongoClientOptions42.getRequiredReplicaSetName();
        int int51 = mongoClientOptions42.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClient mongoClient52 = mongoProperties0.createMongoClient(mongoClientOptions42);
        int int53 = mongoClientOptions42.getHeartbeatConnectRetryFrequency();
        boolean boolean54 = mongoClientOptions42.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 120000 + "'", int45 == 120000);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test7767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7767");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxWaitTime(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatThreadCount();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions17.getReadPreference();
        int int21 = mongoClientOptions17.getHeartbeatConnectTimeout();
        boolean boolean22 = mongoClientOptions17.isAutoConnectRetry();
        java.lang.String str23 = mongoClientOptions17.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder9.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getHeartbeatThreadCount();
        int int48 = mongoClientOptions46.getHeartbeatSocketTimeout();
        int int49 = mongoClientOptions46.getMaxWaitTime();
        int int50 = mongoClientOptions46.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions46.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder44.socketFactory(socketFactory51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder35.socketFactory(socketFactory51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder27.socketFactory(socketFactory51);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120000 + "'", int49 == 120000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test7768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7768");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder9.build();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder9.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int18 = mongoClientOptions15.getLocalThreshold();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
    }

    @Test
    public void test7769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7769");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        int int14 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertNotNull(readPreference15);
    }

    @Test
    public void test7770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7770");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoClientOptions1.toString();
        int int14 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str15 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions1.getDbDecoderFactory();
        int int17 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions1.getConnectionsPerHost();
        int int19 = mongoClientOptions1.getConnectionsPerHost();
        int int20 = mongoClientOptions1.getSocketTimeout();
        int int21 = mongoClientOptions1.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test7771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7771");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions1.getWriteConcern();
        int int7 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int8 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean9 = mongoClientOptions1.isAutoConnectRetry();
        int int10 = mongoClientOptions1.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions1.getDbEncoderFactory();
        int int12 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test7772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7772");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions25.getWriteConcern();
        long long30 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int31 = mongoClientOptions25.getHeartbeatThreadCount();
        long long32 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int33 = mongoClientOptions25.getHeartbeatConnectTimeout();
        boolean boolean34 = mongoClientOptions25.isAutoConnectRetry();
        int int35 = mongoClientOptions25.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory36 = mongoClientOptions25.getSocketFactory();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions25.getReadPreference();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder19.readPreference(readPreference38);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7773");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.heartbeatThreadCount(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7774");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.heartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.autoConnectRetry(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7775");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        int int23 = mongoClientOptions19.getConnectTimeout();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        boolean boolean25 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean26 = mongoClientOptions19.isAutoConnectRetry();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions19.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(socketFactory27);
    }

    @Test
    public void test7776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7776");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.connectionsPerHost((int) (short) 100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setHost("hi!");
        java.lang.String str31 = mongoProperties28.getDatabase();
        java.lang.String str32 = mongoProperties28.getDatabase();
        java.lang.String str33 = mongoProperties28.getDatabase();
        mongoProperties28.setAuthenticationDatabase("hi!");
        mongoProperties28.setAuthenticationDatabase("");
        mongoProperties28.setDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatThreadCount();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        int int44 = mongoClientOptions41.getHeartbeatThreadCount();
        long long45 = mongoClientOptions41.getMaxAutoConnectRetryTime();
        int int46 = mongoClientOptions41.getLocalThreshold();
        boolean boolean47 = mongoClientOptions41.isAutoConnectRetry();
        int int48 = mongoClientOptions41.getMinHeartbeatFrequency();
        java.lang.String str49 = mongoClientOptions41.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions41.getDbEncoderFactory();
        org.springframework.core.env.Environment environment51 = null;
        com.mongodb.MongoClient mongoClient52 = mongoProperties28.createMongoClient(mongoClientOptions41, environment51);
        java.lang.String str53 = mongoProperties28.getUsername();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        int int56 = mongoClientOptions55.getHeartbeatThreadCount();
        int int57 = mongoClientOptions55.getHeartbeatSocketTimeout();
        int int58 = mongoClientOptions55.getLocalThreshold();
        int int59 = mongoClientOptions55.getHeartbeatFrequency();
        int int60 = mongoClientOptions55.getConnectionsPerHost();
        int int61 = mongoClientOptions55.getLocalThreshold();
        java.lang.String str62 = mongoClientOptions55.getDescription();
        java.lang.String str63 = mongoClientOptions55.getDescription();
        int int64 = mongoClientOptions55.getLocalThreshold();
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties28.createMongoClient(mongoClientOptions55, environment65);
        javax.net.SocketFactory socketFactory67 = mongoClientOptions55.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder27.socketFactory(socketFactory67);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 500 + "'", int48 == 500);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20000 + "'", int57 == 20000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 15 + "'", int58 == 15);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5000 + "'", int59 == 5000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 15 + "'", int61 == 15);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 15 + "'", int64 == 15);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(socketFactory67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test7777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7777");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean16 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean17 = mongoClientOptions13.isAutoConnectRetry();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties6.createMongoClient(mongoClientOptions13, environment18);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.requiredReplicaSetName("");
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) "");
        javax.net.SocketFactory socketFactory28 = mongoClientOptions13.getSocketFactory();
        int int29 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions13, environment30);
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder38.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.connectionsPerHost(500);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions49, environment50);
        java.lang.String str52 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "test" + "'", str52, "test");
    }

    @Test
    public void test7778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7778");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test7779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7779");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder3.heartbeatConnectTimeout((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7780");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setHost("hi!");
        java.lang.String str32 = mongoProperties29.getUsername();
        java.lang.Class<?> wildcardClass33 = mongoProperties29.getFieldNamingStrategy();
        java.lang.String str34 = mongoProperties29.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties29.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getMaxConnectionLifeTime();
        boolean boolean39 = mongoClientOptions37.isCursorFinalizerEnabled();
        boolean boolean40 = mongoClientOptions37.isAlwaysUseMBeans();
        int int41 = mongoClientOptions37.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient42 = mongoProperties29.createMongoClient(mongoClientOptions37);
        javax.net.SocketFactory socketFactory43 = mongoClientOptions37.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder26.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder15.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder13.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder48 = builder13.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test7781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7781");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str18 = mongoProperties0.getGridFsDatabase();
        java.lang.String str19 = mongoProperties0.getDatabase();
        java.lang.String str20 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("");
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test7782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7782");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatThreadCount(120000);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test7783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7783");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        boolean boolean14 = mongoClientOptions5.isSocketKeepAlive();
        int int15 = mongoClientOptions5.getHeartbeatFrequency();
        java.lang.String str16 = mongoClientOptions5.getDescription();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions5.getReadPreference();
        int int18 = mongoClientOptions5.getHeartbeatConnectRetryFrequency();
        int int19 = mongoClientOptions5.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test7784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7784");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions17);
        mongoProperties13.setAuthenticationDatabase("");
        char[] charArray27 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties13.setPassword(charArray27);
        mongoProperties13.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties13.createMongoClient(mongoClientOptions32, environment33);
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder12.build();
        long long38 = mongoClientOptions37.getMaxAutoConnectRetryTime();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions37.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(readPreference39);
    }

    @Test
    public void test7785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7785");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setHost("");
        mongoProperties0.setHost("test");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str35 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test7786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7786");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
    }

    @Test
    public void test7787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7787");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        mongoProperties6.setPort((java.lang.Integer) 120000);
        mongoProperties6.setHost("hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test7788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7788");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setHost("hi!");
        java.lang.String str10 = mongoProperties7.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties7.createMongoClient(mongoClientOptions11);
        mongoProperties7.setAuthenticationDatabase("");
        java.lang.String str15 = mongoProperties7.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties16.createMongoClient(mongoClientOptions20);
        mongoProperties16.setAuthenticationDatabase("");
        char[] charArray30 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties16.setPassword(charArray30);
        mongoProperties16.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatThreadCount();
        int int37 = mongoClientOptions35.getHeartbeatSocketTimeout();
        int int38 = mongoClientOptions35.getLocalThreshold();
        int int39 = mongoClientOptions35.getHeartbeatFrequency();
        boolean boolean40 = mongoClientOptions35.isSocketKeepAlive();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties16.createMongoClient(mongoClientOptions35, environment41);
        mongoProperties16.setHost("mongodb://localhost/test");
        mongoProperties16.setPort((java.lang.Integer) 15);
        char[] charArray47 = mongoProperties16.getPassword();
        mongoProperties7.setPassword(charArray47);
        boolean boolean49 = mongoClientOptions1.equals((java.lang.Object) mongoProperties7);
        java.lang.String str50 = mongoProperties7.getUsername();
        java.lang.String str51 = mongoProperties7.getMongoClientDatabase();
        java.lang.String str52 = mongoProperties7.getGridFsDatabase();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5000 + "'", int39 == 5000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "test" + "'", str51, "test");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test7789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7789");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions20.getDbEncoderFactory();
        int int28 = mongoClientOptions20.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        boolean boolean41 = mongoClientOptions20.equals((java.lang.Object) mongoClientOptions40);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test7790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7790");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        int int13 = mongoClientOptions8.getMaxConnectionIdleTime();
        int int14 = mongoClientOptions8.getHeartbeatFrequency();
        java.lang.String str15 = mongoClientOptions8.getDescription();
        java.lang.Class<?> wildcardClass16 = mongoClientOptions8.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test7791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7791");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean28 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean29 = mongoClientOptions18.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions18.getSocketFactory();
        int int31 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount(32);
        boolean boolean40 = mongoClientOptions18.equals((java.lang.Object) 32);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder52 = builder44.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder54 = builder44.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder44.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder58 = builder44.description("mongodb://localhost/test");
        boolean boolean59 = mongoClientOptions18.equals((java.lang.Object) builder44);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test7792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7792");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7793");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        int int4 = mongoClientOptions1.getHeartbeatFrequency();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5000 + "'", int4 == 5000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
    }

    @Test
    public void test7794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7794");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7795");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7796");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setHost("hi!");
        java.lang.String str12 = mongoProperties9.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions13);
        mongoProperties9.setAuthenticationDatabase("");
        char[] charArray23 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties9.setPassword(charArray23);
        mongoProperties0.setPassword(charArray23);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean34 = mongoClientOptions31.isAlwaysUseMBeans();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        int int37 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions31, environment38);
        java.lang.Class<?> wildcardClass40 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str41 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test7797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7797");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test7798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7798");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean8 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean10 = mongoClientOptions6.isAutoConnectRetry();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions6, environment12);
        int int14 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(socketFactory16);
    }

    @Test
    public void test7799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7799");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean16 = mongoClientOptions13.isAlwaysUseMBeans();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getHeartbeatConnectRetryFrequency();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions13.getSocketFactory();
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder24 = builder7.readPreference(readPreference23);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test7800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7800");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder16.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions27.getWriteConcern();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions27.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder1.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        boolean boolean64 = mongoClientOptions63.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties65.setHost("hi!");
        java.lang.String str68 = mongoProperties65.getDatabase();
        java.lang.String str69 = mongoProperties65.getUri();
        java.lang.Integer int70 = mongoProperties65.getPort();
        java.lang.String str71 = mongoProperties65.getHost();
        mongoProperties65.setUsername("");
        boolean boolean74 = mongoClientOptions63.equals((java.lang.Object) mongoProperties65);
        java.lang.String str75 = mongoClientOptions63.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder61.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder50.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder1.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder1.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder84 = builder80.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder88 = builder84.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder90 = builder84.maxWaitTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb://localhost/test" + "'", str69, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test7801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7801");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean10 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions8);
        int int11 = mongoClientOptions1.getConnectTimeout();
        int int12 = mongoClientOptions1.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions1.getDbDecoderFactory();
        int int14 = mongoClientOptions1.getMaxConnectionIdleTime();
        boolean boolean15 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7802");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean10 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions8);
        int int11 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions1.getHeartbeatFrequency();
        int int15 = mongoClientOptions1.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test7803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7803");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.connectTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7804");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getConnectTimeout();
        int int12 = mongoClientOptions10.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test7805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7805");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder9.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
    }

    @Test
    public void test7806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7806");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        int int27 = mongoClientOptions20.getMinHeartbeatFrequency();
        int int28 = mongoClientOptions20.getConnectionsPerHost();
        int int29 = mongoClientOptions20.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions20.getReadPreference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(readPreference30);
    }

    @Test
    public void test7807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7807");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        long long7 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions9.getReadPreference();
        int int12 = mongoClientOptions9.getMaxWaitTime();
        int int13 = mongoClientOptions9.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions9.getWriteConcern();
        boolean boolean15 = mongoClientOptions9.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions9.getWriteConcern();
        boolean boolean17 = mongoClientOptions1.equals((java.lang.Object) writeConcern16);
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions1.getDbDecoderFactory();
        int int19 = mongoClientOptions1.getMinConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test7808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7808");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getHeartbeatThreadCount();
        int int10 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.readPreference(readPreference12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder13.writeConcern(writeConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder13.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder32 = builder31.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder34 = builder31.minConnectionsPerHost(35);
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        boolean boolean42 = mongoClientOptions41.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties43.setHost("hi!");
        java.lang.String str46 = mongoProperties43.getDatabase();
        java.lang.String str47 = mongoProperties43.getUri();
        java.lang.Integer int48 = mongoProperties43.getPort();
        java.lang.String str49 = mongoProperties43.getHost();
        mongoProperties43.setUsername("");
        boolean boolean52 = mongoClientOptions41.equals((java.lang.Object) mongoProperties43);
        java.lang.String str53 = mongoClientOptions41.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder39.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder34.dbEncoderFactory(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "mongodb://localhost/test" + "'", str47, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test7809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7809");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder11.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7810");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions11.getWriteConcern();
        boolean boolean16 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11);
        java.lang.String str18 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test7811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7811");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isAutoConnectRetry();
        int int23 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getLocalThreshold();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        java.lang.String str27 = mongoClientOptions20.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions20.getDbEncoderFactory();
        int int29 = mongoClientOptions20.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
    }

    @Test
    public void test7812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7812");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int9 = mongoProperties0.getPort();
        mongoProperties0.setUsername("");
        java.lang.String str12 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("hi!");
        java.lang.String str19 = mongoProperties16.getDatabase();
        java.lang.String str20 = mongoProperties16.getUri();
        java.lang.Integer int21 = mongoProperties16.getPort();
        java.lang.String str22 = mongoProperties16.getHost();
        mongoProperties16.setUsername("");
        boolean boolean25 = mongoClientOptions14.equals((java.lang.Object) mongoProperties16);
        long long26 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatThreadCount();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions28.getLocalThreshold();
        int int32 = mongoClientOptions28.getHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions28);
        javax.net.SocketFactory socketFactory34 = mongoClientOptions14.getSocketFactory();
        int int35 = mongoClientOptions14.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost(1);
        boolean boolean49 = mongoClientOptions14.equals((java.lang.Object) 1);
        boolean boolean50 = mongoClientOptions14.isAlwaysUseMBeans();
        boolean boolean51 = mongoClientOptions14.isSocketKeepAlive();
        int int52 = mongoClientOptions14.getHeartbeatThreadCount();
        com.mongodb.MongoClient mongoClient53 = mongoProperties0.createMongoClient(mongoClientOptions14);
        java.lang.String str54 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
    }

    @Test
    public void test7813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7813");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions7.getConnectTimeout();
        int int18 = mongoClientOptions7.getHeartbeatThreadCount();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setHost("hi!");
        java.lang.String str22 = mongoProperties19.getDatabase();
        java.lang.String str23 = mongoProperties19.getUri();
        java.lang.Integer int24 = mongoProperties19.getPort();
        java.lang.Class<?> wildcardClass25 = mongoProperties19.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass26 = mongoProperties19.getFieldNamingStrategy();
        java.lang.String str27 = mongoProperties19.getUri();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int32 = mongoClientOptions29.getHeartbeatThreadCount();
        long long33 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions29.getSocketFactory();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties19.createMongoClient(mongoClientOptions29, environment35);
        mongoProperties19.setUri("hi!");
        boolean boolean39 = mongoClientOptions7.equals((java.lang.Object) mongoProperties19);
        java.lang.Class<?> wildcardClass40 = mongoProperties19.getFieldNamingStrategy();
        java.lang.String str41 = mongoProperties19.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb://localhost/test" + "'", str23, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test7814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7814");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.WriteConcern writeConcern5 = mongoClientOptions1.getWriteConcern();
        long long6 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions1.getHeartbeatThreadCount();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions1.getDbEncoderFactory();
        int int10 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions1.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions1.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(writeConcern5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7815");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectRetryFrequency((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7816");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isAutoConnectRetry();
        int int8 = mongoClientOptions5.getMaxWaitTime();
        int int9 = mongoClientOptions5.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test7817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7817");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        java.lang.String str11 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test7818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7818");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference(1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        int int29 = mongoClientOptions25.getMinConnectionsPerHost();
        int int30 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions25.getMinConnectionsPerHost();
        int int32 = mongoClientOptions25.getMaxConnectionIdleTime();
        boolean boolean33 = mongoClientOptions25.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = builder23.readPreference(readPreference34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder23.maxConnectionIdleTime(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test7819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7819");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test7820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7820");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7821");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatThreadCount();
        int int46 = mongoClientOptions44.getHeartbeatSocketTimeout();
        int int47 = mongoClientOptions44.getHeartbeatThreadCount();
        long long48 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions44.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder42.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder27.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder22.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder53 = builder15.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder53.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder53.maxAutoConnectRetryTime((long) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test7822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7822");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
    }

    @Test
    public void test7823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7823");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        boolean boolean11 = mongoClientOptions9.isAutoConnectRetry();
        int int12 = mongoClientOptions9.getAcceptableLatencyDifference();
        long long13 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        java.lang.String str14 = mongoClientOptions9.getDescription();
        int int15 = mongoClientOptions9.getHeartbeatFrequency();
        int int16 = mongoClientOptions9.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions9.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions9.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder5.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency((int) '#');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7824");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setHost("");
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7825");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int9 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
    }

    @Test
    public void test7826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7826");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatConnectRetryFrequency();
        int int11 = mongoClientOptions9.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions9.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7827");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatThreadCount();
        int int46 = mongoClientOptions44.getHeartbeatSocketTimeout();
        int int47 = mongoClientOptions44.getHeartbeatThreadCount();
        long long48 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions44.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder42.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder27.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder22.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions.Builder builder53 = builder15.socketFactory(socketFactory49);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties60 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties60.setHost("hi!");
        java.lang.String str63 = mongoProperties60.getDatabase();
        java.lang.String str64 = mongoProperties60.getUri();
        java.lang.Integer int65 = mongoProperties60.getPort();
        java.lang.String str66 = mongoProperties60.getHost();
        mongoProperties60.setUsername("");
        boolean boolean69 = mongoClientOptions58.equals((java.lang.Object) mongoProperties60);
        java.lang.String str70 = mongoProperties60.getUri();
        mongoProperties60.setPort((java.lang.Integer) 20000);
        char[] charArray73 = mongoProperties60.getPassword();
        mongoProperties60.setPort((java.lang.Integer) 1);
        mongoProperties60.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        int int80 = mongoClientOptions79.getHeartbeatThreadCount();
        int int81 = mongoClientOptions79.getHeartbeatSocketTimeout();
        int int82 = mongoClientOptions79.getHeartbeatThreadCount();
        int int83 = mongoClientOptions79.getMinHeartbeatFrequency();
        int int84 = mongoClientOptions79.getSocketTimeout();
        boolean boolean86 = mongoClientOptions79.equals((java.lang.Object) (-1.0f));
        int int87 = mongoClientOptions79.getLocalThreshold();
        com.mongodb.MongoClient mongoClient88 = mongoProperties60.createMongoClient(mongoClientOptions79);
        int int89 = mongoClientOptions79.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern90 = mongoClientOptions79.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder91 = builder53.writeConcern(writeConcern90);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "mongodb://localhost/test" + "'", str64, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "mongodb://localhost/test" + "'", str70, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray73);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 500 + "'", int83 == 500);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 15 + "'", int87 == 15);
        org.junit.Assert.assertNotNull(mongoClient88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(writeConcern90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test7828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7828");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setHost("hi!");
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties6.createMongoClient(mongoClientOptions10);
        mongoProperties6.setAuthenticationDatabase("");
        char[] charArray20 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties6.setPassword(charArray20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        int int27 = mongoClientOptions23.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties6.createMongoClient(mongoClientOptions23, environment28);
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoProperties6);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions32.isAutoConnectRetry();
        boolean boolean35 = mongoClientOptions32.isAlwaysUseMBeans();
        int int36 = mongoClientOptions32.getHeartbeatFrequency();
        int int37 = mongoClientOptions32.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions32.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions32.getDbEncoderFactory();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties6.createMongoClient(mongoClientOptions32, environment40);
        java.lang.String str42 = mongoProperties6.getHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5000 + "'", int36 == 5000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test7829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7829");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getUri();
        mongoProperties3.setPort((java.lang.Integer) 20000);
        char[] charArray16 = mongoProperties3.getPassword();
        mongoProperties3.setPort((java.lang.Integer) 1);
        java.lang.String str19 = mongoProperties3.getDatabase();
        java.lang.String str20 = mongoProperties3.getHost();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions22.getReadPreference();
        int int25 = mongoClientOptions22.getHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions22.isSocketKeepAlive();
        int int27 = mongoClientOptions22.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties3.createMongoClient(mongoClientOptions22, environment28);
        long long30 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5000 + "'", int25 == 5000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test7830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7830");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        boolean boolean21 = mongoClientOptions7.equals((java.lang.Object) "");
        int int22 = mongoClientOptions7.getMinHeartbeatFrequency();
        java.lang.String str23 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7831");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) 15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7832");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions1.getDbDecoderFactory();
        java.lang.String str11 = mongoClientOptions1.getDescription();
        long long12 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions20.isCursorFinalizerEnabled();
        boolean boolean23 = mongoClientOptions20.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions20.isAutoConnectRetry();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions20, environment25);
        int int27 = mongoClientOptions20.getLocalThreshold();
        int int28 = mongoClientOptions20.getAcceptableLatencyDifference();
        long long29 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        boolean boolean30 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test7833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7833");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        int int23 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions1.getConnectionsPerHost();
        int int25 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions1.getWriteConcern();
        long long27 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean29 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test7834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7834");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(15);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatThreadCount((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.description("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder4.heartbeatConnectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7835");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMaxConnectionLifeTime();
        int int25 = mongoClientOptions23.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder19.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int32 = mongoClientOptions29.getMaxWaitTime();
        long long33 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        int int34 = mongoClientOptions29.getLocalThreshold();
        int int35 = mongoClientOptions29.getHeartbeatSocketTimeout();
        java.lang.String str36 = mongoClientOptions29.getRequiredReplicaSetName();
        long long37 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder19.socketFactory(socketFactory38);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7836");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        boolean boolean8 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7837");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        boolean boolean22 = mongoClientOptions19.isAlwaysUseMBeans();
        int int23 = mongoClientOptions19.getMaxWaitTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder15.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder11.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setHost("hi!");
        java.lang.String str41 = mongoProperties38.getDatabase();
        java.lang.String str42 = mongoProperties38.getUri();
        java.lang.Integer int43 = mongoProperties38.getPort();
        java.lang.String str44 = mongoProperties38.getHost();
        mongoProperties38.setUsername("");
        boolean boolean47 = mongoClientOptions36.equals((java.lang.Object) mongoProperties38);
        long long48 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int53 = mongoClientOptions50.getLocalThreshold();
        int int54 = mongoClientOptions50.getHeartbeatFrequency();
        boolean boolean55 = mongoClientOptions36.equals((java.lang.Object) mongoClientOptions50);
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder33.dbEncoderFactory(dBEncoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder11.dbEncoderFactory(dBEncoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        int int61 = mongoClientOptions60.getMaxConnectionLifeTime();
        int int62 = mongoClientOptions60.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory63 = mongoClientOptions60.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder11.dbDecoderFactory(dBDecoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder73 = builder67.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder75 = builder67.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder77 = builder67.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        int int80 = mongoClientOptions79.getMaxConnectionLifeTime();
        int int81 = mongoClientOptions79.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory82 = mongoClientOptions79.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder83 = builder77.dbDecoderFactory(dBDecoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder11.dbDecoderFactory(dBDecoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder86 = builder11.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 15 + "'", int53 == 15);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5000 + "'", int54 == 5000);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test7838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7838");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7839");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        java.lang.String str14 = mongoClientOptions13.toString();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout((int) 'a');
        boolean boolean22 = mongoClientOptions13.equals((java.lang.Object) builder21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder29.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions32.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory36 = mongoClientOptions32.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder30.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder21.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder40 = builder21.minConnectionsPerHost((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder42 = builder40.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test7840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7840");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("hi!");
        java.lang.String str15 = mongoProperties12.getDatabase();
        java.lang.String str16 = mongoProperties12.getUri();
        java.lang.Integer int17 = mongoProperties12.getPort();
        java.lang.String str18 = mongoProperties12.getHost();
        mongoProperties12.setUsername("");
        boolean boolean21 = mongoClientOptions10.equals((java.lang.Object) mongoProperties12);
        java.lang.String str22 = mongoProperties12.getUri();
        mongoProperties12.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setHost("hi!");
        mongoProperties25.setUri("");
        char[] charArray32 = new char[] { 'a', '#' };
        mongoProperties25.setPassword(charArray32);
        char[] charArray39 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties25.setPassword(charArray39);
        mongoProperties12.setPassword(charArray39);
        mongoProperties0.setPassword(charArray39);
        java.lang.String str43 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str46 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "test" + "'", str46, "test");
    }

    @Test
    public void test7841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7841");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder3.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.localThreshold(120000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7842");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions11.getWriteConcern();
        boolean boolean16 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11);
        mongoProperties0.setPort((java.lang.Integer) (-1));
        java.lang.String str20 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test7843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7843");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test7844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7844");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        int int5 = mongoClientOptions1.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minHeartbeatFrequency(500);
        boolean boolean23 = mongoClientOptions1.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7845");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(120000);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxWaitTime(5000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatSocketTimeout(0);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7846");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7847");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7848");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.maxAutoConnectRetryTime((long) 32);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test7849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7849");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        mongoProperties0.setDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setHost("hi!");
        java.lang.String str35 = mongoProperties32.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties32.createMongoClient(mongoClientOptions36);
        mongoProperties32.setAuthenticationDatabase("");
        char[] charArray46 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties32.setPassword(charArray46);
        mongoProperties0.setPassword(charArray46);
        java.lang.Class<?> wildcardClass49 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str50 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb://localhost/test" + "'", str50, "mongodb://localhost/test");
    }

    @Test
    public void test7850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7850");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatThreadCount();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getMaxWaitTime();
        long long29 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int30 = mongoClientOptions25.getMaxConnectionLifeTime();
        java.lang.String str31 = mongoClientOptions25.getDescription();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder19.socketFactory(socketFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatThreadCount();
        int int39 = mongoClientOptions37.getHeartbeatSocketTimeout();
        int int40 = mongoClientOptions37.getHeartbeatThreadCount();
        int int41 = mongoClientOptions37.getMinHeartbeatFrequency();
        int int42 = mongoClientOptions37.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions37.getReadPreference();
        boolean boolean44 = mongoClientOptions37.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder35.dbEncoderFactory(dBEncoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder35.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder50 = builder35.connectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getMaxConnectionLifeTime();
        boolean boolean54 = mongoClientOptions52.isAutoConnectRetry();
        boolean boolean55 = mongoClientOptions52.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions52.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder35.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder8.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120000 + "'", int42 == 120000);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test7851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7851");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        boolean boolean5 = mongoClientOptions1.isAutoConnectRetry();
        boolean boolean6 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int9 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(0);
        boolean boolean23 = mongoClientOptions1.equals((java.lang.Object) builder22);
        int int24 = mongoClientOptions1.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions1.getSocketFactory();
        int int26 = mongoClientOptions1.getSocketTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions1.getReadPreference();
        int int28 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test7852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7852");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getHeartbeatThreadCount();
        int int8 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions6.getLocalThreshold();
        int int10 = mongoClientOptions6.getHeartbeatFrequency();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions6);
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.setHost("");
        java.lang.String str18 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test7853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7853");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxWaitTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7854");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatThreadCount();
        int int26 = mongoClientOptions24.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions24.getMaxWaitTime();
        int int28 = mongoClientOptions24.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions24.getSocketFactory();
        boolean boolean30 = mongoClientOptions24.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.dbDecoderFactory(dBDecoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder16.localThreshold(27017);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7855");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getHeartbeatThreadCount();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.readPreference(readPreference10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectTimeout((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7856");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions1.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7857");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference3 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory4 = mongoClientOptions1.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getHeartbeatThreadCount();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean8 = mongoClientOptions1.isAlwaysUseMBeans();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions1.getDbDecoderFactory();
        long long11 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int12 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readPreference3);
        org.junit.Assert.assertNotNull(dBEncoderFactory4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test7858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7858");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder3.build();
        boolean boolean7 = mongoClientOptions6.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions6.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
    }

    @Test
    public void test7859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7859");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions1.getHeartbeatThreadCount();
        java.lang.String str12 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7860");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        int int7 = mongoClientOptions1.getMinConnectionsPerHost();
        int int8 = mongoClientOptions1.getLocalThreshold();
        int int9 = mongoClientOptions1.getSocketTimeout();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int11 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test7861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7861");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        java.lang.Integer int25 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatThreadCount();
        int int31 = mongoClientOptions29.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        int int33 = mongoClientOptions29.getHeartbeatConnectTimeout();
        boolean boolean34 = mongoClientOptions29.isAutoConnectRetry();
        int int35 = mongoClientOptions29.getHeartbeatFrequency();
        int int36 = mongoClientOptions29.getConnectionsPerHost();
        boolean boolean37 = mongoClientOptions29.isAlwaysUseMBeans();
        int int38 = mongoClientOptions29.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions29.getDbDecoderFactory();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties0.createMongoClient(mongoClientOptions29, environment40);
        java.lang.String str42 = mongoClientOptions29.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions29.getDbEncoderFactory();
        int int44 = mongoClientOptions29.getMaxWaitTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5000 + "'", int35 == 5000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 120000 + "'", int44 == 120000);
    }

    @Test
    public void test7862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7862");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int3 = mongoClientOptions1.getHeartbeatFrequency();
        int int4 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions1.getDbEncoderFactory();
        int int7 = mongoClientOptions1.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5000 + "'", int3 == 5000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test7863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7863");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.acceptableLatencyDifference(10000);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7864");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.readPreference(readPreference11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder14.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7865");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray10 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions21.getReadPreference();
        boolean boolean24 = mongoClientOptions16.equals((java.lang.Object) readPreference23);
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions16.getDbDecoderFactory();
        int int26 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int27 = mongoClientOptions16.getMinConnectionsPerHost();
        boolean boolean28 = mongoClientOptions16.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int30 = mongoClientOptions16.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test7866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7866");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatConnectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7867");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16, environment19);
        java.lang.Integer int21 = mongoProperties0.getPort();
        mongoProperties0.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionLifeTime();
        boolean boolean27 = mongoClientOptions25.isCursorFinalizerEnabled();
        boolean boolean28 = mongoClientOptions25.isAlwaysUseMBeans();
        boolean boolean29 = mongoClientOptions25.isAutoConnectRetry();
        boolean boolean30 = mongoClientOptions25.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions25.getReadPreference();
        boolean boolean32 = mongoClientOptions25.isCursorFinalizerEnabled();
        int int33 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.minConnectionsPerHost(0);
        boolean boolean47 = mongoClientOptions25.equals((java.lang.Object) builder46);
        com.mongodb.MongoClient mongoClient48 = mongoProperties0.createMongoClient(mongoClientOptions25);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mongoClient48);
    }

    @Test
    public void test7868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7868");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder3.build();
        int int5 = mongoClientOptions4.getThreadsAllowedToBlockForConnectionMultiplier();
        int int6 = mongoClientOptions4.getThreadsAllowedToBlockForConnectionMultiplier();
        int int7 = mongoClientOptions4.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
    }

    @Test
    public void test7869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7869");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        java.lang.String str7 = mongoProperties4.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties4.createMongoClient(mongoClientOptions8);
        mongoProperties4.setAuthenticationDatabase("");
        char[] charArray18 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties4.setPassword(charArray18);
        mongoProperties4.setDatabase("");
        mongoProperties4.setPort((java.lang.Integer) 500);
        java.lang.String str24 = mongoProperties4.getHost();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getMaxWaitTime();
        int int30 = mongoClientOptions26.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions26.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClient mongoClient33 = mongoProperties4.createMongoClient(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatThreadCount();
        int int37 = mongoClientOptions35.getHeartbeatSocketTimeout();
        int int38 = mongoClientOptions35.getHeartbeatThreadCount();
        int int39 = mongoClientOptions35.getMinHeartbeatFrequency();
        int int40 = mongoClientOptions35.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions35.getReadPreference();
        boolean boolean42 = mongoClientOptions35.isCursorFinalizerEnabled();
        boolean boolean43 = mongoClientOptions35.isSocketKeepAlive();
        int int44 = mongoClientOptions35.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        com.mongodb.MongoClientOptions.Builder builder48 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.connectTimeout((int) (byte) 0);
        boolean boolean53 = mongoClientOptions35.equals((java.lang.Object) builder48);
        boolean boolean54 = mongoClientOptions35.isCursorFinalizerEnabled();
        boolean boolean55 = mongoClientOptions35.isSocketKeepAlive();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties4.createMongoClient(mongoClientOptions35, environment56);
        int int58 = mongoClientOptions35.getHeartbeatFrequency();
        boolean boolean59 = mongoClientOptions1.equals((java.lang.Object) int58);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 500 + "'", int39 == 500);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5000 + "'", int44 == 5000);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5000 + "'", int58 == 5000);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test7870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7870");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getHeartbeatThreadCount();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder5.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatThreadCount(35);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean43 = mongoClientOptions41.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder33.readPreference(readPreference44);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test7871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7871");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7872");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.description("test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatThreadCount(5);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionLifeTime((int) 'a');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7873");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatThreadCount();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getLocalThreshold();
        int int16 = mongoClientOptions12.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12, environment17);
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions12.getDbEncoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
    }

    @Test
    public void test7874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7874");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency(27017);
        javax.net.SocketFactory socketFactory16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder13.socketFactory(socketFactory16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7875");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getLocalThreshold();
        int int23 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder15.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setHost("hi!");
        java.lang.String str32 = mongoProperties29.getUsername();
        java.lang.Class<?> wildcardClass33 = mongoProperties29.getFieldNamingStrategy();
        java.lang.String str34 = mongoProperties29.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties29.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getMaxConnectionLifeTime();
        boolean boolean39 = mongoClientOptions37.isAutoConnectRetry();
        boolean boolean40 = mongoClientOptions37.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient41 = mongoProperties29.createMongoClient(mongoClientOptions37);
        java.lang.String str42 = mongoProperties29.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getMaxConnectionLifeTime();
        boolean boolean46 = mongoClientOptions44.isAutoConnectRetry();
        int int47 = mongoClientOptions44.getAcceptableLatencyDifference();
        long long48 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        java.lang.String str49 = mongoClientOptions44.getDescription();
        int int50 = mongoClientOptions44.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient51 = mongoProperties29.createMongoClient(mongoClientOptions44);
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions44.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder28.writeConcern(writeConcern52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder4.writeConcern(writeConcern52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5000 + "'", int50 == 5000);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test7876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7876");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions10.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions24.isAutoConnectRetry();
        int int27 = mongoClientOptions24.getAcceptableLatencyDifference();
        long long28 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        java.lang.String str29 = mongoClientOptions24.getRequiredReplicaSetName();
        boolean boolean30 = mongoClientOptions24.isSocketKeepAlive();
        int int31 = mongoClientOptions24.getLocalThreshold();
        boolean boolean32 = mongoClientOptions24.isCursorFinalizerEnabled();
        int int33 = mongoClientOptions24.getHeartbeatThreadCount();
        int int34 = mongoClientOptions24.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder20.readPreference(readPreference35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7877");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        int int28 = mongoClientOptions18.getHeartbeatConnectTimeout();
        boolean boolean29 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean30 = mongoClientOptions18.isSocketKeepAlive();
        int int31 = mongoClientOptions18.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test7878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7878");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions10.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount(32);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
    }

    @Test
    public void test7879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7879");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime(5000);
        java.lang.Class<?> wildcardClass33 = builder30.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test7880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7880");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectTimeout();
        int int9 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test7881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7881");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setHost("hi!");
        java.lang.String str25 = mongoProperties22.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions26);
        mongoProperties22.setAuthenticationDatabase("");
        char[] charArray36 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties22.setPassword(charArray36);
        mongoProperties22.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatThreadCount();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        int int44 = mongoClientOptions41.getLocalThreshold();
        int int45 = mongoClientOptions41.getHeartbeatFrequency();
        boolean boolean46 = mongoClientOptions41.isSocketKeepAlive();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties22.createMongoClient(mongoClientOptions41, environment47);
        mongoProperties22.setDatabase("hi!");
        char[] charArray51 = mongoProperties22.getPassword();
        java.lang.String str52 = mongoProperties22.getAuthenticationDatabase();
        mongoProperties22.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties54.setHost("hi!");
        java.lang.String str57 = mongoProperties54.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties54.createMongoClient(mongoClientOptions58);
        mongoProperties54.setAuthenticationDatabase("");
        char[] charArray68 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties54.setPassword(charArray68);
        mongoProperties22.setPassword(charArray68);
        mongoProperties0.setPassword(charArray68);
        java.lang.String str72 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setHost("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4 44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4 44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4,  , 4, 4]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5000 + "'", int45 == 5000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "aa# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "aa# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, a, #,  , #,  ]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
    }

    @Test
    public void test7882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7882");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder8.acceptableLatencyDifference((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test7883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7883");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        long long13 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int16 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test7884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7884");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getMaxWaitTime();
        int int23 = mongoClientOptions19.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatThreadCount();
        int int54 = mongoClientOptions52.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions52.getHeartbeatThreadCount();
        int int56 = mongoClientOptions52.getMinHeartbeatFrequency();
        int int57 = mongoClientOptions52.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions52.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder59 = builder50.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        int int62 = mongoClientOptions61.getHeartbeatThreadCount();
        int int63 = mongoClientOptions61.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference64 = mongoClientOptions61.getReadPreference();
        com.mongodb.WriteConcern writeConcern65 = mongoClientOptions61.getWriteConcern();
        boolean boolean66 = mongoClientOptions61.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions61.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder50.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder35.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder27.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder6.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder73 = builder6.heartbeatFrequency(10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 500 + "'", int56 == 500);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 120000 + "'", int57 == 120000);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20000 + "'", int63 == 20000);
        org.junit.Assert.assertNotNull(readPreference64);
        org.junit.Assert.assertNotNull(writeConcern65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test7885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7885");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        int int14 = mongoClientOptions11.getMaxWaitTime();
        int int15 = mongoClientOptions11.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions11, environment16);
        int int18 = mongoClientOptions11.getMaxWaitTime();
        int int19 = mongoClientOptions11.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test7886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7886");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getMinHeartbeatFrequency();
        int int6 = mongoClientOptions1.getSocketTimeout();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("hi!");
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties8.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties8.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties8.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions16.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient20 = mongoProperties8.createMongoClient(mongoClientOptions16);
        boolean boolean21 = mongoClientOptions1.equals((java.lang.Object) mongoClient20);
        long long22 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions1.getWriteConcern();
        java.lang.String str24 = mongoClientOptions1.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions1.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions1.getSocketFactory();
        int int27 = mongoClientOptions1.getLocalThreshold();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions1.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 500 + "'", int5 == 500);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(socketFactory28);
    }

    @Test
    public void test7887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7887");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        boolean boolean13 = mongoClientOptions12.isCursorFinalizerEnabled();
        int int14 = mongoClientOptions12.getHeartbeatFrequency();
        int int15 = mongoClientOptions12.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions12.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions12.getMinConnectionsPerHost();
        int int18 = mongoClientOptions12.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions12.isAutoConnectRetry();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions12, environment20);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient21);
    }

    @Test
    public void test7888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7888");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatThreadCount();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.readPreference(readPreference18);
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.readPreference(readPreference18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder20.maxAutoConnectRetryTime((long) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7889");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        mongoProperties0.setUsername("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setHost("hi!");
        java.lang.String str18 = mongoProperties15.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties15.createMongoClient(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions22.isCursorFinalizerEnabled();
        boolean boolean25 = mongoClientOptions22.isAlwaysUseMBeans();
        boolean boolean26 = mongoClientOptions22.isAutoConnectRetry();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions22, environment27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.requiredReplicaSetName("");
        boolean boolean36 = mongoClientOptions22.equals((java.lang.Object) "");
        javax.net.SocketFactory socketFactory37 = mongoClientOptions22.getSocketFactory();
        int int38 = mongoClientOptions22.getMaxConnectionLifeTime();
        java.lang.String str39 = mongoClientOptions22.getDescription();
        com.mongodb.MongoClient mongoClient40 = mongoProperties0.createMongoClient(mongoClientOptions22);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(mongoClient40);
    }

    @Test
    public void test7890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7890");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray14 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions19, environment20);
        java.lang.String str22 = mongoProperties0.getUsername();
        java.lang.String str23 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str24 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test7891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7891");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionIdleTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder15.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7892");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        boolean boolean21 = mongoClientOptions13.equals((java.lang.Object) readPreference20);
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        int int23 = mongoClientOptions13.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions13);
        mongoProperties0.setDatabase("");
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(mongoClient24);
    }

    @Test
    public void test7893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7893");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        int int5 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions1.getSocketFactory();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        int int10 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test7894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7894");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test7895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7895");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions8.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.socketFactory(socketFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7896");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions1.getDbDecoderFactory();
        int int8 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions1.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5000 + "'", int8 == 5000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
    }

    @Test
    public void test7897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7897");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder75 = builder71.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder77 = builder71.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        int int80 = mongoClientOptions79.getHeartbeatThreadCount();
        int int81 = mongoClientOptions79.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference82 = mongoClientOptions79.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder83 = builder71.readPreference(readPreference82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder62.readPreference(readPreference82);
        com.mongodb.MongoClientOptions.Builder builder85 = builder45.readPreference(readPreference82);
        com.mongodb.MongoClientOptions.Builder builder86 = builder36.readPreference(readPreference82);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertNotNull(readPreference82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test7898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7898");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatThreadCount();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder37.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder28.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder28.maxAutoConnectRetryTime(0L);
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder47.build();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 120000 + "'", int51 == 120000);
    }

    @Test
    public void test7899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7899");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder15.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7900");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16, environment19);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions16.getSocketFactory();
        int int22 = mongoClientOptions16.getAcceptableLatencyDifference();
        int int23 = mongoClientOptions16.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions16.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(socketFactory24);
    }

    @Test
    public void test7901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7901");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions5.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions5.equals((java.lang.Object) mongoClientOptions14);
        boolean boolean16 = mongoClientOptions14.isAutoConnectRetry();
        int int17 = mongoClientOptions14.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
    }

    @Test
    public void test7902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7902");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean10 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions8);
        int int11 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions1.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
    }

    @Test
    public void test7903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7903");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getHeartbeatThreadCount();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        int int7 = mongoClientOptions1.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test7904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7904");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7905");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        mongoProperties0.setDatabase("test");
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions17.isCursorFinalizerEnabled();
        boolean boolean20 = mongoClientOptions17.isAlwaysUseMBeans();
        java.lang.String str21 = mongoClientOptions17.getDescription();
        boolean boolean22 = mongoClientOptions17.isSocketKeepAlive();
        boolean boolean23 = mongoClientOptions17.isAutoConnectRetry();
        java.lang.String str24 = mongoClientOptions17.toString();
        boolean boolean25 = mongoClientOptions17.isCursorFinalizerEnabled();
        int int26 = mongoClientOptions17.getConnectTimeout();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions17, environment27);
        java.lang.String str29 = mongoClientOptions17.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test7906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7906");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getAcceptableLatencyDifference();
        long long23 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        int int24 = mongoClientOptions19.getMinConnectionsPerHost();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int26 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        int int29 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int30 = mongoClientOptions19.getLocalThreshold();
        boolean boolean31 = mongoClientOptions19.isAutoConnectRetry();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test7907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7907");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        boolean boolean5 = mongoClientOptions1.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory6 = mongoClientOptions1.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory6);
    }

    @Test
    public void test7908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7908");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getHeartbeatThreadCount();
        int int33 = mongoClientOptions31.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions31.getReadPreference();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions31.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder29.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder29.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.MongoClientOptions.Builder builder43 = builder40.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        int int55 = mongoClientOptions54.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference56 = mongoClientOptions54.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions54.getDbEncoderFactory();
        java.lang.String str58 = mongoClientOptions54.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions54.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder48.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder43.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder17.dbDecoderFactory(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(readPreference56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test7909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7909");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        int int14 = mongoClientOptions5.getMinHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions5.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
    }

    @Test
    public void test7910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7910");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions11.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getMaxConnectionLifeTime();
        boolean boolean16 = mongoClientOptions14.isAutoConnectRetry();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        long long18 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        java.lang.String str19 = mongoClientOptions14.getRequiredReplicaSetName();
        int int20 = mongoClientOptions14.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions11.equals((java.lang.Object) int20);
        int int22 = mongoClientOptions11.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5000 + "'", int22 == 5000);
    }

    @Test
    public void test7911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7911");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        int int10 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str12 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
    }

    @Test
    public void test7912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7912");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray10 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions21.getReadPreference();
        boolean boolean24 = mongoClientOptions16.equals((java.lang.Object) readPreference23);
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions16.getDbDecoderFactory();
        int int26 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int27 = mongoClientOptions16.getMinConnectionsPerHost();
        boolean boolean28 = mongoClientOptions16.isAlwaysUseMBeans();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int30 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions16.getHeartbeatConnectTimeout();
        boolean boolean32 = mongoClientOptions16.isSocketKeepAlive();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test7913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7913");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7914");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.minHeartbeatFrequency((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7915");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        int int8 = mongoClientOptions1.getLocalThreshold();
        int int9 = mongoClientOptions1.getHeartbeatThreadCount();
        int int10 = mongoClientOptions1.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions1.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions1.getSocketFactory();
        int int13 = mongoClientOptions1.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions1.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test7916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7916");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getHeartbeatThreadCount();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder5.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean31 = mongoClientOptions29.isAutoConnectRetry();
        int int32 = mongoClientOptions29.getAcceptableLatencyDifference();
        long long33 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        java.lang.String str34 = mongoClientOptions29.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        int int36 = mongoClientOptions29.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions29.getReadPreference();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions29.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder5.readPreference(readPreference38);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7917");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(500);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.acceptableLatencyDifference((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7918");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        int int8 = mongoClientOptions1.getLocalThreshold();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions1.getHeartbeatThreadCount();
        int int11 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions1.getDescription();
        boolean boolean13 = mongoClientOptions1.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7919");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isAutoConnectRetry();
        int int10 = mongoClientOptions7.getAcceptableLatencyDifference();
        long long11 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isSocketKeepAlive();
        int int14 = mongoClientOptions7.getLocalThreshold();
        boolean boolean15 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str16 = mongoClientOptions7.getDescription();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        boolean boolean28 = mongoClientOptions7.equals((java.lang.Object) true);
        int int29 = mongoClientOptions7.getLocalThreshold();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions7, environment30);
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNotNull(mongoClient31);
    }

    @Test
    public void test7920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7920");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) '#');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
    }

    @Test
    public void test7921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7921");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isAutoConnectRetry();
        int int21 = mongoClientOptions18.getAcceptableLatencyDifference();
        long long22 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        java.lang.String str23 = mongoClientOptions18.getDescription();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test7922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7922");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions15);
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray25 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties11.setPassword(charArray25);
        mongoProperties11.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions30, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test7923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7923");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions10.getReadPreference();
        boolean boolean13 = mongoClientOptions5.equals((java.lang.Object) readPreference12);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions5.getDbDecoderFactory();
        int int15 = mongoClientOptions5.getMinHeartbeatFrequency();
        java.lang.String str16 = mongoClientOptions5.getRequiredReplicaSetName();
        int int17 = mongoClientOptions5.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions5.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions5.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test7924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7924");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean28 = mongoClientOptions26.isSocketKeepAlive();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder9.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder9.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMaxConnectionLifeTime();
        boolean boolean38 = mongoClientOptions36.isCursorFinalizerEnabled();
        boolean boolean39 = mongoClientOptions36.isAlwaysUseMBeans();
        boolean boolean40 = mongoClientOptions36.isAutoConnectRetry();
        boolean boolean41 = mongoClientOptions36.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions36.getReadPreference();
        boolean boolean43 = mongoClientOptions36.isCursorFinalizerEnabled();
        boolean boolean44 = mongoClientOptions36.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder9.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder9.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test7925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7925");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        long long18 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions14.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test7926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7926");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory5 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertNotNull(dBEncoderFactory5);
    }

    @Test
    public void test7927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7927");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatThreadCount();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions8.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions8.getReadPreference();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8, environment13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) (-1));
        java.lang.String str19 = mongoProperties0.getHost();
        java.lang.String str20 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test7928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7928");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isAutoConnectRetry();
        int int29 = mongoClientOptions26.getAcceptableLatencyDifference();
        long long30 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        java.lang.String str31 = mongoClientOptions26.getDescription();
        int int32 = mongoClientOptions26.getHeartbeatFrequency();
        int int33 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getHeartbeatThreadCount();
        int int44 = mongoClientOptions42.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions42.getReadPreference();
        com.mongodb.WriteConcern writeConcern46 = mongoClientOptions42.getWriteConcern();
        long long47 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        int int48 = mongoClientOptions42.getHeartbeatThreadCount();
        long long49 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        int int50 = mongoClientOptions42.getHeartbeatConnectTimeout();
        int int51 = mongoClientOptions42.getHeartbeatThreadCount();
        int int52 = mongoClientOptions42.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder54 = builder40.writeConcern(writeConcern53);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        com.mongodb.MongoClientOptions.Builder builder58 = builder55.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder69.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        int int78 = mongoClientOptions77.getMaxConnectionLifeTime();
        boolean boolean79 = mongoClientOptions77.isAutoConnectRetry();
        int int80 = mongoClientOptions77.getAcceptableLatencyDifference();
        long long81 = mongoClientOptions77.getMaxAutoConnectRetryTime();
        java.lang.String str82 = mongoClientOptions77.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern83 = mongoClientOptions77.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder84 = builder73.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder73.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder87 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder87.build();
        int int89 = mongoClientOptions88.getHeartbeatThreadCount();
        int int90 = mongoClientOptions88.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory91 = mongoClientOptions88.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder92 = builder73.dbEncoderFactory(dBEncoderFactory91);
        com.mongodb.MongoClientOptions.Builder builder93 = builder66.dbEncoderFactory(dBEncoderFactory91);
        com.mongodb.MongoClientOptions.Builder builder94 = builder40.dbEncoderFactory(dBEncoderFactory91);
        com.mongodb.MongoClientOptions.Builder builder96 = builder40.connectionsPerHost((int) (byte) 1);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(writeConcern46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 15 + "'", int52 == 15);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 15 + "'", int80 == 15);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(writeConcern83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 20000 + "'", int90 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test7929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7929");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        java.lang.String str13 = mongoProperties3.getUri();
        mongoProperties3.setPort((java.lang.Integer) 20000);
        char[] charArray16 = mongoProperties3.getPassword();
        mongoProperties3.setPort((java.lang.Integer) 1);
        mongoProperties3.setUsername("mongodb://localhost/test");
        java.lang.String str21 = mongoProperties3.getUsername();
        mongoProperties3.setAuthenticationDatabase("hi!");
        mongoProperties3.setDatabase("hi!");
        mongoProperties3.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
    }

    @Test
    public void test7930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setHost("hi!");
        java.lang.String str13 = mongoProperties10.getUsername();
        java.lang.Class<?> wildcardClass14 = mongoProperties10.getFieldNamingStrategy();
        java.lang.String str15 = mongoProperties10.getAuthenticationDatabase();
        java.lang.String str16 = mongoProperties10.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        int int22 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient23 = mongoProperties10.createMongoClient(mongoClientOptions18);
        javax.net.SocketFactory socketFactory24 = mongoClientOptions18.getSocketFactory();
        int int25 = mongoClientOptions18.getMinConnectionsPerHost();
        int int26 = mongoClientOptions18.getConnectionsPerHost();
        int int27 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.String str29 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str30 = mongoProperties0.getUri();
        java.lang.String str31 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 100);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "test" + "'", str29, "test");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb://localhost/test" + "'", str30, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb://localhost/test" + "'", str31, "mongodb://localhost/test");
    }

    @Test
    public void test7931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7931");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setHost("hi!");
        java.lang.String str30 = mongoProperties27.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties27.createMongoClient(mongoClientOptions31);
        mongoProperties27.setAuthenticationDatabase("");
        char[] charArray41 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties27.setPassword(charArray41);
        mongoProperties27.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties27.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder24.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder24.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder56 = builder24.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder58 = builder24.minConnectionsPerHost(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties59.setHost("hi!");
        java.lang.String str62 = mongoProperties59.getDatabase();
        java.lang.String str63 = mongoProperties59.getUri();
        java.lang.Integer int64 = mongoProperties59.getPort();
        java.lang.String str65 = mongoProperties59.getHost();
        mongoProperties59.setUsername("");
        java.lang.Integer int68 = mongoProperties59.getPort();
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        boolean boolean71 = mongoClientOptions70.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties72 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties72.setHost("hi!");
        java.lang.String str75 = mongoProperties72.getDatabase();
        java.lang.String str76 = mongoProperties72.getUri();
        java.lang.Integer int77 = mongoProperties72.getPort();
        java.lang.String str78 = mongoProperties72.getHost();
        mongoProperties72.setUsername("");
        boolean boolean81 = mongoClientOptions70.equals((java.lang.Object) mongoProperties72);
        org.springframework.core.env.Environment environment82 = null;
        com.mongodb.MongoClient mongoClient83 = mongoProperties59.createMongoClient(mongoClientOptions70, environment82);
        int int84 = mongoClientOptions70.getMaxConnectionIdleTime();
        int int85 = mongoClientOptions70.getConnectTimeout();
        javax.net.SocketFactory socketFactory86 = mongoClientOptions70.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder87 = builder58.socketFactory(socketFactory86);
        com.mongodb.MongoClientOptions.Builder builder88 = builder11.socketFactory(socketFactory86);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "mongodb://localhost/test" + "'", str63, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "mongodb://localhost/test" + "'", str76, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mongoClient83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10000 + "'", int85 == 10000);
        org.junit.Assert.assertNotNull(socketFactory86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test7932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7932");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        java.lang.String str14 = mongoProperties11.getDatabase();
        java.lang.String str15 = mongoProperties11.getUri();
        java.lang.Integer int16 = mongoProperties11.getPort();
        java.lang.String str17 = mongoProperties11.getHost();
        mongoProperties11.setUsername("");
        boolean boolean20 = mongoClientOptions9.equals((java.lang.Object) mongoProperties11);
        long long21 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getLocalThreshold();
        int int27 = mongoClientOptions23.getHeartbeatFrequency();
        boolean boolean28 = mongoClientOptions9.equals((java.lang.Object) mongoClientOptions23);
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions9.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.dbEncoderFactory(dBEncoderFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder6.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test7933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7933");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        int int8 = mongoClientOptions1.getLocalThreshold();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        java.lang.String str10 = mongoClientOptions1.getDescription();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) true);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions1.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(socketFactory23);
    }

    @Test
    public void test7934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7934");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions7, environment12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        boolean boolean21 = mongoClientOptions7.equals((java.lang.Object) "");
        int int22 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions7.getReadPreference();
        int int25 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
    }

    @Test
    public void test7935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7935");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getLocalThreshold();
        int int20 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions16.isSocketKeepAlive();
        int int22 = mongoClientOptions16.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions16.getHeartbeatConnectRetryFrequency();
        boolean boolean24 = mongoClientOptions16.isSocketKeepAlive();
        int int25 = mongoClientOptions16.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions16.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder14.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.localThreshold(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7936");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions26.isAutoConnectRetry();
        int int29 = mongoClientOptions26.getAcceptableLatencyDifference();
        long long30 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        java.lang.String str31 = mongoClientOptions26.getDescription();
        int int32 = mongoClientOptions26.getHeartbeatFrequency();
        int int33 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder41.maxConnectionIdleTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test7937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7937");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7938");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions5.isSocketKeepAlive();
        int int8 = mongoClientOptions5.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions5.getMinConnectionsPerHost();
        int int10 = mongoClientOptions5.getConnectTimeout();
        boolean boolean11 = mongoClientOptions5.isSocketKeepAlive();
        boolean boolean12 = mongoClientOptions5.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions5.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test7939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("test");
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getDatabase();
        java.lang.String str14 = mongoProperties0.getDatabase();
        java.lang.String str15 = mongoProperties0.getUri();
        java.lang.String str16 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
    }

    @Test
    public void test7940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7940");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isCursorFinalizerEnabled();
        boolean boolean4 = mongoClientOptions1.isAlwaysUseMBeans();
        java.lang.String str5 = mongoClientOptions1.getDescription();
        int int6 = mongoClientOptions1.getHeartbeatFrequency();
        int int7 = mongoClientOptions1.getAcceptableLatencyDifference();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        long long9 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5000 + "'", int6 == 5000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test7941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7941");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost(35);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        int int28 = mongoClientOptions23.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder17.writeConcern(writeConcern29);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7942");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = builder1.build();
        int int3 = mongoClientOptions2.getHeartbeatThreadCount();
        int int4 = mongoClientOptions2.getHeartbeatSocketTimeout();
        int int5 = mongoClientOptions2.getMaxWaitTime();
        long long6 = mongoClientOptions2.getMaxAutoConnectRetryTime();
        int int7 = mongoClientOptions2.getMaxConnectionLifeTime();
        java.lang.String str8 = mongoClientOptions2.getDescription();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions2.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.socketFactory(socketFactory9);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.maxAutoConnectRetryTime((long) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatThreadCount();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getHeartbeatThreadCount();
        java.lang.String str30 = mongoClientOptions26.toString();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions26.getWriteConcern();
        int int32 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder18.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatThreadCount();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int39 = mongoClientOptions36.getLocalThreshold();
        int int40 = mongoClientOptions36.getLocalThreshold();
        boolean boolean41 = mongoClientOptions36.isAlwaysUseMBeans();
        int int42 = mongoClientOptions36.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions36.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder34.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder0.writeConcern(writeConcern43);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(mongoClientOptions2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20000 + "'", int4 == 20000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 120000 + "'", int5 == 120000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 500 + "'", int42 == 500);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test7943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7943");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectRetryFrequency((int) (byte) 100);
        boolean boolean16 = mongoClientOptions1.equals((java.lang.Object) builder15);
        boolean boolean17 = mongoClientOptions1.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions1.getDbDecoderFactory();
        int int19 = mongoClientOptions1.getMaxWaitTime();
        int int20 = mongoClientOptions1.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test7944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7944");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14);
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(mongoClient19);
    }

    @Test
    public void test7945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7945");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions11.isSocketKeepAlive();
        int int14 = mongoClientOptions11.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionLifeTime();
        boolean boolean33 = mongoClientOptions31.isAutoConnectRetry();
        int int34 = mongoClientOptions31.getAcceptableLatencyDifference();
        long long35 = mongoClientOptions31.getMaxAutoConnectRetryTime();
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder27.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.socketTimeout((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties62.setHost("hi!");
        java.lang.String str65 = mongoProperties62.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        com.mongodb.MongoClient mongoClient67 = mongoProperties62.createMongoClient(mongoClientOptions66);
        mongoProperties62.setAuthenticationDatabase("");
        char[] charArray76 = new char[] { 'a', 'a', '#', ' ', '#', ' ' };
        mongoProperties62.setPassword(charArray76);
        mongoProperties62.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder80 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder80.build();
        org.springframework.core.env.Environment environment82 = null;
        com.mongodb.MongoClient mongoClient83 = mongoProperties62.createMongoClient(mongoClientOptions81, environment82);
        com.mongodb.DBDecoderFactory dBDecoderFactory84 = mongoClientOptions81.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder85 = builder61.dbDecoderFactory(dBDecoderFactory84);
        com.mongodb.MongoClientOptions.Builder builder86 = builder40.dbDecoderFactory(dBDecoderFactory84);
        com.mongodb.MongoClientOptions.Builder builder87 = builder18.dbDecoderFactory(dBDecoderFactory84);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(mongoClient67);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertNotNull(mongoClient83);
        org.junit.Assert.assertNotNull(dBDecoderFactory84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test7946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7946");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean10 = mongoClientOptions1.equals((java.lang.Object) mongoClientOptions8);
        int int11 = mongoClientOptions1.getConnectTimeout();
        int int12 = mongoClientOptions1.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions1.getDbDecoderFactory();
        int int14 = mongoClientOptions1.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(writeConcern15);
    }

    @Test
    public void test7947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7947");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectRetryFrequency(27017);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
    }

    @Test
    public void test7948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7948");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectRetryFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions17.isAutoConnectRetry();
        int int20 = mongoClientOptions17.getAcceptableLatencyDifference();
        long long21 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        java.lang.String str22 = mongoClientOptions17.getDescription();
        int int23 = mongoClientOptions17.getHeartbeatFrequency();
        int int24 = mongoClientOptions17.getHeartbeatThreadCount();
        int int25 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder15.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder15.maxWaitTime((int) (short) 1);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test7949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7949");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectRetryFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7950");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        int int7 = mongoClientOptions1.getSocketTimeout();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        long long10 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test7951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7951");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatThreadCount();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder12.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        java.lang.String str28 = mongoClientOptions23.getDescription();
        int int29 = mongoClientOptions23.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder3.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder3.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder36 = builder3.acceptableLatencyDifference(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7952");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAutoConnectRetry();
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions9, environment11);
        java.lang.Integer int13 = mongoProperties0.getPort();
        java.lang.String str14 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatThreadCount();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getLocalThreshold();
        int int20 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions16.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions16.getDbDecoderFactory();
        int int23 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions16.isCursorFinalizerEnabled();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions16);
        mongoProperties0.setUsername("");
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mongoClient25);
    }

    @Test
    public void test7953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7953");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isAutoConnectRetry();
        int int3 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        java.lang.String str4 = mongoClientOptions1.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions1.getDbDecoderFactory();
        int int6 = mongoClientOptions1.getMinConnectionsPerHost();
        int int7 = mongoClientOptions1.getHeartbeatFrequency();
        int int8 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions1.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 500 + "'", int3 == 500);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5000 + "'", int7 == 5000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test7954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7954");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions10.isAutoConnectRetry();
        int int13 = mongoClientOptions10.getAcceptableLatencyDifference();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.writeConcern(writeConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder6.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatThreadCount();
        int int23 = mongoClientOptions21.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions21.getLocalThreshold();
        int int25 = mongoClientOptions21.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions21.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder19.dbDecoderFactory(dBDecoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectionsPerHost((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5000 + "'", int25 == 5000);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test7955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7955");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test7956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7956");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatThreadCount();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder16.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatThreadCount();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions27.getWriteConcern();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions27.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder1.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        boolean boolean64 = mongoClientOptions63.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties65.setHost("hi!");
        java.lang.String str68 = mongoProperties65.getDatabase();
        java.lang.String str69 = mongoProperties65.getUri();
        java.lang.Integer int70 = mongoProperties65.getPort();
        java.lang.String str71 = mongoProperties65.getHost();
        mongoProperties65.setUsername("");
        boolean boolean74 = mongoClientOptions63.equals((java.lang.Object) mongoProperties65);
        java.lang.String str75 = mongoClientOptions63.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder61.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder50.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder1.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder1.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.description("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb://localhost/test" + "'", str69, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test7957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7957");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str12 = mongoProperties0.getHost();
        java.lang.Integer int13 = mongoProperties0.getPort();
        java.lang.String str14 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7958");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) 15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7959");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        java.lang.Integer int10 = mongoProperties0.getPort();
        char[] charArray11 = mongoProperties0.getPassword();
        char[] charArray12 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNull(charArray12);
    }

    @Test
    public void test7960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7960");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions1.isSocketKeepAlive();
        int int8 = mongoClientOptions1.getLocalThreshold();
        boolean boolean9 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions1.getHeartbeatThreadCount();
        int int11 = mongoClientOptions1.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions1.getReadPreference();
        boolean boolean13 = mongoClientOptions1.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions1.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
    }

    @Test
    public void test7961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7961");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("");
        char[] charArray7 = new char[] { 'a', '#' };
        mongoProperties0.setPassword(charArray7);
        char[] charArray14 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean22 = mongoClientOptions18.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18, environment24);
        long long26 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        boolean boolean27 = mongoClientOptions18.isAlwaysUseMBeans();
        boolean boolean28 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean29 = mongoClientOptions18.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions18.getSocketFactory();
        int int31 = mongoClientOptions18.getMaxWaitTime();
        boolean boolean32 = mongoClientOptions18.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions18.getSocketFactory();
        int int34 = mongoClientOptions18.getHeartbeatFrequency();
        int int35 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5000 + "'", int34 == 5000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
    }

    @Test
    public void test7962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7962");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getHeartbeatThreadCount();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions18.getSocketFactory();
        int int20 = mongoClientOptions18.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions18.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test7963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7963");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7964");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7965");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (byte) 100);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7966");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatThreadCount();
        int int40 = mongoClientOptions38.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions38.getReadPreference();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions38.getWriteConcern();
        boolean boolean43 = mongoClientOptions38.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions38.getWriteConcern();
        java.lang.Object obj45 = null;
        boolean boolean46 = mongoClientOptions38.equals(obj45);
        com.mongodb.DBDecoderFactory dBDecoderFactory47 = mongoClientOptions38.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder32.dbDecoderFactory(dBDecoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder32.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test7967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7967");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7968");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost(35);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatSocketTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7969");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.heartbeatConnectRetryFrequency((int) '#');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7970");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7971");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getMaxConnectionLifeTime();
        java.lang.String str7 = mongoClientOptions1.getDescription();
        int int8 = mongoClientOptions1.getConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions1.getDbDecoderFactory();
        int int11 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int13 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test7972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7972");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setHost("hi!");
        java.lang.String str17 = mongoProperties14.getUsername();
        java.lang.Class<?> wildcardClass18 = mongoProperties14.getFieldNamingStrategy();
        java.lang.String str19 = mongoProperties14.getAuthenticationDatabase();
        java.lang.String str20 = mongoProperties14.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions22.isAutoConnectRetry();
        boolean boolean25 = mongoClientOptions22.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient26 = mongoProperties14.createMongoClient(mongoClientOptions22);
        boolean boolean27 = mongoClientOptions22.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder13.dbEncoderFactory(dBEncoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder9.dbEncoderFactory(dBEncoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder32 = builder9.heartbeatFrequency((int) (short) 100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setHost("hi!");
        java.lang.String str36 = mongoProperties33.getUsername();
        java.lang.Class<?> wildcardClass37 = mongoProperties33.getFieldNamingStrategy();
        char[] charArray38 = mongoProperties33.getPassword();
        java.lang.Class<?> wildcardClass39 = mongoProperties33.getFieldNamingStrategy();
        mongoProperties33.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getMaxConnectionLifeTime();
        boolean boolean45 = mongoClientOptions43.isAutoConnectRetry();
        int int46 = mongoClientOptions43.getAcceptableLatencyDifference();
        long long47 = mongoClientOptions43.getMaxAutoConnectRetryTime();
        java.lang.String str48 = mongoClientOptions43.getDescription();
        boolean boolean49 = mongoClientOptions43.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties33.createMongoClient(mongoClientOptions43, environment50);
        javax.net.SocketFactory socketFactory52 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder9.socketFactory(socketFactory52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder9.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder57 = builder9.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder9.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(charArray38);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(socketFactory52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test7973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7973");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties3 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties3.setHost("hi!");
        java.lang.String str6 = mongoProperties3.getDatabase();
        java.lang.String str7 = mongoProperties3.getUri();
        java.lang.Integer int8 = mongoProperties3.getPort();
        java.lang.String str9 = mongoProperties3.getHost();
        mongoProperties3.setUsername("");
        boolean boolean12 = mongoClientOptions1.equals((java.lang.Object) mongoProperties3);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.cursorFinalizerEnabled(true);
        boolean boolean22 = mongoClientOptions1.equals((java.lang.Object) builder15);
        int int23 = mongoClientOptions1.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions1.getConnectionsPerHost();
        int int25 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions1.isCursorFinalizerEnabled();
        java.lang.String str27 = mongoClientOptions1.toString();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test7974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7974");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions8.isAlwaysUseMBeans();
        int int12 = mongoClientOptions8.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions8);
        javax.net.SocketFactory socketFactory14 = mongoClientOptions8.getSocketFactory();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions8.getWriteConcern();
        java.lang.String str16 = mongoClientOptions8.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions8.getDbEncoderFactory();
        long long18 = mongoClientOptions8.getMaxAutoConnectRetryTime();
        int int19 = mongoClientOptions8.getAcceptableLatencyDifference();
        java.lang.String str20 = mongoClientOptions8.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test7975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7975");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        java.lang.String str7 = mongoProperties4.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties4.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties4.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties4.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient16 = mongoProperties4.createMongoClient(mongoClientOptions12);
        boolean boolean17 = mongoClientOptions12.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.dbEncoderFactory(dBEncoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder3.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency(20000);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7976");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("test");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7977");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getMaxConnectionIdleTime();
        int int7 = mongoClientOptions1.getConnectionsPerHost();
        int int8 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int9 = mongoClientOptions1.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test7978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7978");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7979");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        boolean boolean2 = mongoClientOptions1.isSocketKeepAlive();
        int int3 = mongoClientOptions1.getConnectTimeout();
        int int4 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setHost("hi!");
        java.lang.String str18 = mongoProperties15.getUsername();
        java.lang.Class<?> wildcardClass19 = mongoProperties15.getFieldNamingStrategy();
        java.lang.String str20 = mongoProperties15.getAuthenticationDatabase();
        java.lang.String str21 = mongoProperties15.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMaxConnectionLifeTime();
        boolean boolean25 = mongoClientOptions23.isCursorFinalizerEnabled();
        boolean boolean26 = mongoClientOptions23.isAlwaysUseMBeans();
        int int27 = mongoClientOptions23.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions23);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder12.socketFactory(socketFactory29);
        boolean boolean31 = mongoClientOptions1.equals((java.lang.Object) builder30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10000 + "'", int3 == 10000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 500 + "'", int4 == 500);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test7980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7980");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions11.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbDecoderFactory(dBDecoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        com.mongodb.MongoClientOptions.Builder builder41 = builder36.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test7981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7981");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getMaxWaitTime();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        int int6 = mongoClientOptions1.getConnectionsPerHost();
        int int7 = mongoClientOptions1.getMaxWaitTime();
        boolean boolean8 = mongoClientOptions1.isCursorFinalizerEnabled();
        int int9 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120000 + "'", int4 == 120000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test7982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7982");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatThreadCount();
        int int21 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions19.getHeartbeatThreadCount();
        long long23 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder2.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder28 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.heartbeatThreadCount(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test7983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7983");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions8.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions8.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient12 = mongoProperties0.createMongoClient(mongoClientOptions8);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        int int18 = mongoClientOptions15.getAcceptableLatencyDifference();
        long long19 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        java.lang.String str20 = mongoClientOptions15.getDescription();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions24.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatThreadCount();
        int int39 = mongoClientOptions37.getHeartbeatSocketTimeout();
        int int40 = mongoClientOptions37.getHeartbeatThreadCount();
        long long41 = mongoClientOptions37.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder43 = builder31.writeConcern(writeConcern42);
        boolean boolean44 = mongoClientOptions24.equals((java.lang.Object) builder43);
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions24.getDbDecoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
    }

    @Test
    public void test7984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7984");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        int int6 = mongoClientOptions1.getConnectionsPerHost();
        boolean boolean7 = mongoClientOptions1.isAutoConnectRetry();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getLocalThreshold();
        int int10 = mongoClientOptions1.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions1.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test7985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7985");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
    }

    @Test
    public void test7986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7986");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getMaxConnectionLifeTime();
        boolean boolean3 = mongoClientOptions1.isAutoConnectRetry();
        int int4 = mongoClientOptions1.getAcceptableLatencyDifference();
        long long5 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        java.lang.String str6 = mongoClientOptions1.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions1.getWriteConcern();
        int int8 = mongoClientOptions1.getMaxWaitTime();
        int int9 = mongoClientOptions1.getConnectTimeout();
        int int10 = mongoClientOptions1.getConnectTimeout();
        int int11 = mongoClientOptions1.getLocalThreshold();
        int int12 = mongoClientOptions1.getHeartbeatThreadCount();
        int int13 = mongoClientOptions1.getLocalThreshold();
        long long14 = mongoClientOptions1.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test7987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7987");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7988");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        char[] charArray11 = mongoProperties0.getPassword();
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
    }

    @Test
    public void test7989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7989");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions7.isAutoConnectRetry();
        int int10 = mongoClientOptions7.getAcceptableLatencyDifference();
        long long11 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        long long15 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder3.socketFactory(socketFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionLifeTime(32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7990");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getLocalThreshold();
        boolean boolean6 = mongoClientOptions1.isAlwaysUseMBeans();
        int int7 = mongoClientOptions1.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions1.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
        org.junit.Assert.assertNotNull(readPreference8);
    }

    @Test
    public void test7991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7991");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7992");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatThreadCount();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions13.getWriteConcern();
        long long18 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        int int19 = mongoClientOptions13.getHeartbeatThreadCount();
        long long20 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions13.getHeartbeatThreadCount();
        int int23 = mongoClientOptions13.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = builder9.writeConcern(writeConcern24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectRetryFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test7993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7993");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.setHost("hi!");
        mongoProperties4.setUri("");
        char[] charArray11 = new char[] { 'a', '#' };
        mongoProperties4.setPassword(charArray11);
        char[] charArray17 = new char[] { '4', ' ', '4', '4' };
        mongoProperties4.setPassword(charArray17);
        mongoProperties0.setPassword(charArray17);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatThreadCount();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getHeartbeatThreadCount();
        java.lang.String str27 = mongoClientOptions23.toString();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions23.getWriteConcern();
        int int29 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions23);
        mongoProperties0.setUri("");
        java.lang.Class<?> wildcardClass33 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNull(wildcardClass33);
    }

    @Test
    public void test7994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7994");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
    }

    @Test
    public void test7995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7995");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatThreadCount();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        int int14 = mongoClientOptions11.getMaxWaitTime();
        long long15 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int16 = mongoClientOptions11.getMaxConnectionLifeTime();
        int int17 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions11.isAutoConnectRetry();
        int int19 = mongoClientOptions11.getHeartbeatThreadCount();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions11.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.writeConcern(writeConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder26 = builder21.heartbeatConnectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) 35);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder26.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test7996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7996");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatThreadCount();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getHeartbeatThreadCount();
        long long24 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder5.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder5.maxConnectionLifeTime(5000);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder43.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatThreadCount();
        int int52 = mongoClientOptions50.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions50.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = builder43.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder43.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        com.mongodb.MongoClientOptions.Builder builder60 = builder57.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder69.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder82.build();
        int int84 = mongoClientOptions83.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean85 = mongoClientOptions83.isSocketKeepAlive();
        int int86 = mongoClientOptions83.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory87 = mongoClientOptions83.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder88 = builder75.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder89 = builder66.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder90 = builder43.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder91 = builder40.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder92 = builder29.dbDecoderFactory(dBDecoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder94 = builder92.acceptableLatencyDifference(500);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test7997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7997");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        int int4 = mongoClientOptions1.getLocalThreshold();
        int int5 = mongoClientOptions1.getHeartbeatFrequency();
        boolean boolean6 = mongoClientOptions1.isSocketKeepAlive();
        int int7 = mongoClientOptions1.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions1.getSocketFactory();
        int int9 = mongoClientOptions1.getSocketTimeout();
        int int10 = mongoClientOptions1.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions1.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions1.getDbDecoderFactory();
        boolean boolean13 = mongoClientOptions1.isSocketKeepAlive();
        int int14 = mongoClientOptions1.getMaxConnectionIdleTime();
        java.lang.String str15 = mongoClientOptions1.getDescription();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5000 + "'", int5 == 5000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7998");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatConnectTimeout();
        boolean boolean11 = mongoClientOptions9.isSocketKeepAlive();
        int int12 = mongoClientOptions9.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions9.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test7999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7999");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = builder0.build();
        int int2 = mongoClientOptions1.getHeartbeatThreadCount();
        int int3 = mongoClientOptions1.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference4 = mongoClientOptions1.getReadPreference();
        int int5 = mongoClientOptions1.getAcceptableLatencyDifference();
        java.lang.String str6 = mongoClientOptions1.getDescription();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions1.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) ' ');
        boolean boolean23 = mongoClientOptions1.equals((java.lang.Object) builder22);
        int int24 = mongoClientOptions1.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClientOptions1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(readPreference4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
    }

    @Test
    public void test8000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test8000");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setHost("hi!");
        java.lang.String str16 = mongoProperties13.getDatabase();
        java.lang.String str17 = mongoProperties13.getUri();
        java.lang.Integer int18 = mongoProperties13.getPort();
        java.lang.String str19 = mongoProperties13.getHost();
        mongoProperties13.setUsername("");
        boolean boolean22 = mongoClientOptions11.equals((java.lang.Object) mongoProperties13);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions11, environment23);
        mongoProperties0.setPort((java.lang.Integer) 32);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
    }
}

