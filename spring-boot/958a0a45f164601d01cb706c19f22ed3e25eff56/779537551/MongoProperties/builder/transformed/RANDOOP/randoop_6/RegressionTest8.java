import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test4001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4001");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions12.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions12.getDbEncoderFactory();
        long long15 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        int int16 = mongoClientOptions12.getMinHeartbeatFrequency();
        java.lang.String str17 = mongoClientOptions12.getRequiredReplicaSetName();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions12, environment18);
        boolean boolean20 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4002");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getLocalThreshold();
        int int20 = mongoClientOptions14.getHeartbeatThreadCount();
        java.lang.String str21 = mongoClientOptions14.toString();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions14.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
    }

    @Test
    public void test4003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4003");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions17.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions17.getDbEncoderFactory();
        long long20 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions17.isAutoConnectRetry();
        int int24 = mongoClientOptions17.getLocalThreshold();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions17.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder9.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatThreadCount((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4004");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        mongoProperties0.setDatabase("");
        mongoProperties0.port = 10000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4005");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        boolean boolean23 = mongoClientOptions14.equals((java.lang.Object) false);
        int int24 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions14);
        int int26 = mongoClientOptions14.getHeartbeatFrequency();
        java.lang.String str27 = mongoClientOptions14.getDescription();
        int int28 = mongoClientOptions14.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions14.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions14.getSocketFactory();
        int int31 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
    }

    @Test
    public void test4006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4006");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int15 = mongoClientOptions7.getConnectionsPerHost();
        long long16 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test4007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4007");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean22 = mongoClientOptions20.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions20.getSocketFactory();
        boolean boolean24 = mongoClientOptions20.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions20.getHeartbeatConnectRetryFrequency();
        int int26 = mongoClientOptions20.getMaxConnectionIdleTime();
        int int27 = mongoClientOptions20.getHeartbeatSocketTimeout();
        long long28 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        java.lang.String str29 = mongoClientOptions20.toString();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.readPreference(readPreference30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4008");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4009");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4010");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        boolean boolean9 = mongoProperties7.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions17);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder0.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder31.socketFactory(socketFactory40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder50.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder41.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getHeartbeatSocketTimeout();
        int int73 = mongoClientOptions71.getHeartbeatFrequency();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        int int75 = mongoClientOptions71.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder63.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder20.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.minHeartbeatFrequency(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5000 + "'", int73 == 5000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 120000 + "'", int75 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test4011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4011");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test4012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4012");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.Integer int8 = mongoProperties0.getPort();
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4013");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4014");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean14 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test4015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4015");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getLocalThreshold();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        int int16 = mongoClientOptions7.getMaxWaitTime();
        int int17 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test4016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4016");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4017");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        long long46 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        java.lang.String str47 = mongoClientOptions44.getRequiredReplicaSetName();
        int int48 = mongoClientOptions44.getLocalThreshold();
        int int49 = mongoClientOptions44.getMaxConnectionIdleTime();
        int int50 = mongoClientOptions44.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions44);
        int int52 = mongoClientOptions44.getHeartbeatSocketTimeout();
        java.lang.String str53 = mongoClientOptions44.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions44.getDbDecoderFactory();
        int int55 = mongoClientOptions44.getMaxConnectionLifeTime();
        int int56 = mongoClientOptions44.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
    }

    @Test
    public void test4018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4018");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getConnectTimeout();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions7.getWriteConcern();
        int int15 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4019");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions7.equals((java.lang.Object) 100L);
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder14.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder24.legacyDefaults();
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) builder29);
        java.lang.String str31 = mongoClientOptions7.toString();
        int int32 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
    }

    @Test
    public void test4020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4020");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions14);
        boolean boolean19 = mongoClientOptions14.isAlwaysUseMBeans();
        boolean boolean20 = mongoClientOptions14.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions14.isAutoConnectRetry();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions14.getWriteConcern();
        long long23 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
    }

    @Test
    public void test4021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4021");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4022");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test4023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4023");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4024");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.heartbeatFrequency(97);
        boolean boolean28 = mongoClientOptions7.equals((java.lang.Object) 97);
        java.lang.String str29 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test4025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4025");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        java.lang.Class<?> wildcardClass15 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass16 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test4026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4026");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions7.toString();
        int int12 = mongoClientOptions7.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
    }

    @Test
    public void test4027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4027");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        mongoProperties7.host = "hi!";
        mongoProperties7.setUri("mongodb://localhost/test");
        mongoProperties7.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        boolean boolean24 = mongoClientOptions22.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient25 = mongoProperties7.createMongoClient(mongoClientOptions22);
        int int26 = mongoClientOptions22.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions22.getReadPreference();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions22);
        int int29 = mongoClientOptions22.getSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test4028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4028");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        java.lang.String str23 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str26 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
    }

    @Test
    public void test4029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4029");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        char[] charArray13 = mongoProperties0.password;
        java.lang.String str14 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4030");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions36);
        java.lang.String str39 = mongoProperties0.getDatabase();
        char[] charArray40 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(charArray40);
    }

    @Test
    public void test4031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4031");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass53 = mongoProperties52.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass54 = mongoProperties52.getFieldNamingStrategy();
        mongoProperties52.port = 10;
        mongoProperties52.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties52.createMongoClient(mongoClientOptions59);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties52.createMongoClient(mongoClientOptions68, environment69);
        com.mongodb.DBEncoderFactory dBEncoderFactory71 = mongoClientOptions68.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder45.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder36.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder74 = builder25.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder25.build();
        int int76 = mongoClientOptions75.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment77 = null;
        com.mongodb.MongoClient mongoClient78 = mongoProperties0.createMongoClient(mongoClientOptions75, environment77);
        int int79 = mongoClientOptions75.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern80 = mongoClientOptions75.getWriteConcern();
        int int81 = mongoClientOptions75.getConnectTimeout();
        javax.net.SocketFactory socketFactory82 = mongoClientOptions75.getSocketFactory();
        int int83 = mongoClientOptions75.getHeartbeatConnectRetryFrequency();
        boolean boolean84 = mongoClientOptions75.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertNotNull(dBEncoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(mongoClient78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 120000 + "'", int79 == 120000);
        org.junit.Assert.assertNotNull(writeConcern80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10000 + "'", int81 == 10000);
        org.junit.Assert.assertNotNull(socketFactory82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 500 + "'", int83 == 500);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4032");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test4033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4033");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions14.getReadPreference();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        int int20 = mongoClientOptions14.getAcceptableLatencyDifference();
        java.lang.String str21 = mongoClientOptions14.toString();
        java.lang.String str22 = mongoClientOptions14.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions14.isSocketKeepAlive();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4034");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions7.getReadPreference();
        int int18 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean19 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4035");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        java.lang.String str10 = mongoClientOptions7.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass13 = mongoProperties11.getFieldNamingStrategy();
        mongoProperties11.port = 10;
        mongoProperties11.database = "hi!";
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str20 = mongoProperties11.getDatabase();
        java.lang.String str21 = mongoProperties11.getAuthenticationDatabase();
        org.springframework.core.env.Environment environment22 = null;
        int int23 = mongoProperties11.determinePort(environment22);
        boolean boolean24 = mongoClientOptions7.equals((java.lang.Object) environment22);
        boolean boolean25 = mongoClientOptions7.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(writeConcern27);
    }

    @Test
    public void test4036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4036");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.authenticationDatabase = "test";
        char[] charArray13 = mongoProperties0.getPassword();
        mongoProperties0.port = 5000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test4037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4037");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.password;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4038");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4039");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getLocalThreshold();
        boolean boolean19 = mongoClientOptions17.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions17.getDbDecoderFactory();
        int int22 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions17.getSocketTimeout();
        int int24 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(52);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.minConnectionsPerHost(10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4040");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass42 = mongoProperties41.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass43 = mongoProperties41.getFieldNamingStrategy();
        mongoProperties41.port = 10;
        mongoProperties41.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties41.createMongoClient(mongoClientOptions48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties41.createMongoClient(mongoClientOptions57, environment58);
        com.mongodb.DBEncoderFactory dBEncoderFactory60 = mongoClientOptions57.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder34.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder25.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder63 = builder14.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder64 = builder2.dbEncoderFactory(dBEncoderFactory60);
        java.lang.Class<?> wildcardClass65 = builder2.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNotNull(dBEncoderFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test4041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4041");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions12.getSocketFactory();
        long long14 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions12.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions12.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4042");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        int int14 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4043");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
    }

    @Test
    public void test4044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4044");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test4045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4045");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        int int14 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test4046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4046");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        boolean boolean29 = mongoClientOptions28.isSocketKeepAlive();
        java.lang.String str30 = mongoClientOptions28.getRequiredReplicaSetName();
        int int31 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder20.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.acceptableLatencyDifference(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4047");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4048");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.password;
        org.springframework.core.env.Environment environment38 = null;
        int int39 = mongoProperties0.determinePort(environment38);
        java.lang.String str40 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setUsername("test");
        org.springframework.core.env.Environment environment45 = null;
        int int46 = mongoProperties0.determinePort(environment45);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 27017 + "'", int46 == 27017);
    }

    @Test
    public void test4049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4049");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectionsPerHost(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(52);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.maxWaitTime(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4050");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getLocalThreshold();
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions14.getSocketFactory();
        int int22 = mongoClientOptions14.getHeartbeatThreadCount();
        int int23 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions14.getDbEncoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
    }

    @Test
    public void test4051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4051");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean16 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions7.getWriteConcern();
        int int18 = mongoClientOptions7.getConnectTimeout();
        boolean boolean19 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test4052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4052");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str7 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4053");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4054");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.username = "";
        java.lang.String str10 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4055");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4056");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions7.getReadPreference();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4057");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean13 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        int int15 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4058");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatSocketTimeout();
        int int33 = mongoClientOptions31.getHeartbeatFrequency();
        boolean boolean34 = mongoClientOptions31.isSocketKeepAlive();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = builder17.writeConcern(writeConcern36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern36);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5000 + "'", int33 == 5000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNotNull(writeConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4059");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        int int19 = mongoClientOptions17.getHeartbeatThreadCount();
        int int20 = mongoClientOptions17.getHeartbeatFrequency();
        int int21 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions17.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass25 = mongoProperties23.getFieldNamingStrategy();
        java.lang.String str26 = mongoProperties23.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions34.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions34.getDbEncoderFactory();
        long long37 = mongoClientOptions34.getMaxAutoConnectRetryTime();
        boolean boolean38 = mongoClientOptions34.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties23.builder(mongoClientOptions34);
        boolean boolean40 = mongoClientOptions17.equals((java.lang.Object) mongoProperties23);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions48.getSocketFactory();
        long long50 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        java.lang.String str51 = mongoClientOptions48.getRequiredReplicaSetName();
        int int52 = mongoClientOptions48.getLocalThreshold();
        int int53 = mongoClientOptions48.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder54 = mongoProperties23.builder(mongoClientOptions48);
        com.mongodb.MongoClient mongoClient55 = mongoProperties0.createMongoClient(mongoClientOptions48);
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.core.env.Environment environment58 = null;
        int int59 = mongoProperties0.determinePort(environment58);
        mongoProperties0.setUri("hi!");
        mongoProperties0.uri = "";
        java.lang.String str64 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 27017 + "'", int59 == 27017);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
    }

    @Test
    public void test4060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4060");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getSocketTimeout();
        int int37 = mongoClientOptions35.getHeartbeatThreadCount();
        int int38 = mongoClientOptions35.getHeartbeatFrequency();
        int int39 = mongoClientOptions35.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions35.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder25.socketFactory(socketFactory40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder12.socketFactory(socketFactory40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 500 + "'", int39 == 500);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test4061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4061");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getConnectTimeout();
        int int22 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
    }

    @Test
    public void test4062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4062");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionIdleTime((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4063");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4064");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray8 = new char[] { '#', 'a' };
        mongoProperties0.password = charArray8;
        mongoProperties0.authenticationDatabase = "";
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        java.lang.Class<?> wildcardClass13 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, a]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test4065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4065");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass7 = mongoProperties5.getFieldNamingStrategy();
        mongoProperties5.port = 10;
        mongoProperties5.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties5.createMongoClient(mongoClientOptions12);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties5.createMongoClient(mongoClientOptions21, environment22);
        java.lang.String str24 = mongoClientOptions21.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder4.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.acceptableLatencyDifference((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4066");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test4067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4067");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test4068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4068");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        int int14 = mongoClientOptions12.getHeartbeatThreadCount();
        java.lang.String str15 = mongoClientOptions12.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder4.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder4.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4069");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4070");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test4071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4071");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test4072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4072");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getMaxWaitTime();
        java.lang.String str19 = mongoClientOptions16.toString();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout(97);
        java.lang.Class<?> wildcardClass30 = builder29.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass30;
        mongoProperties0.gridFsDatabase = "";
        char[] charArray34 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getMinHeartbeatFrequency();
        int int46 = mongoClientOptions44.getMaxConnectionIdleTime();
        java.lang.String str47 = mongoClientOptions44.getDescription();
        org.springframework.core.env.Environment environment48 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions44, environment48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: spring.data.mongodb.port=0 and no local mongo port configuration is available");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(charArray34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 500 + "'", int45 == 500);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test4073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4073");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) 35);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4074");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4075");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test4076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4076");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        mongoProperties0.uri = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str15 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test4077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4077");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.dbDecoderFactory(dBDecoderFactory21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4078");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
    }

    @Test
    public void test4079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4079");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.username;
        mongoProperties0.setPort((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test4080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4080");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        int int15 = mongoClientOptions10.getConnectTimeout();
        java.lang.String str16 = mongoClientOptions10.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4081");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(false);
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass18;
        boolean boolean20 = mongoProperties0.hasCustomCredentials();
        java.lang.String str21 = mongoProperties0.host;
        java.lang.String str22 = mongoProperties0.host;
        java.lang.String str23 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test4082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4082");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.heartbeatThreadCount((int) (byte) 10);
        boolean boolean31 = mongoClientOptions14.equals((java.lang.Object) (byte) 10);
        int int32 = mongoClientOptions14.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        int int41 = mongoClientOptions40.getMinHeartbeatFrequency();
        int int42 = mongoClientOptions40.getConnectTimeout();
        int int43 = mongoClientOptions40.getMaxWaitTime();
        int int44 = mongoClientOptions40.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions40.getDbEncoderFactory();
        boolean boolean46 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions40);
        boolean boolean47 = mongoClientOptions40.isAutoConnectRetry();
        java.lang.String str48 = mongoClientOptions40.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 120000 + "'", int43 == 120000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test4083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4083");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        java.lang.String str20 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.autoConnectRetry(false);
        boolean boolean37 = mongoClientOptions28.equals((java.lang.Object) false);
        int int38 = mongoClientOptions28.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties0.builder(mongoClientOptions28);
        java.lang.String str40 = mongoProperties0.database;
        mongoProperties0.gridFsDatabase = "hi!";
        mongoProperties0.gridFsDatabase = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test4084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4084");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        int int15 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions7.getWriteConcern();
        int int17 = mongoClientOptions7.getConnectionsPerHost();
        int int18 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4085");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.minConnectionsPerHost((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4086");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions25.getHeartbeatFrequency();
        boolean boolean28 = mongoClientOptions25.isSocketKeepAlive();
        int int29 = mongoClientOptions25.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder11.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.localThreshold(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass58 = mongoProperties57.fieldNamingStrategy;
        boolean boolean59 = mongoProperties57.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        com.mongodb.MongoClient mongoClient68 = mongoProperties57.createMongoClient(mongoClientOptions67);
        int int69 = mongoClientOptions67.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions67.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder71 = builder54.writeConcern(writeConcern70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder48.writeConcern(writeConcern70);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties73 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass74 = mongoProperties73.fieldNamingStrategy;
        boolean boolean75 = mongoProperties73.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder80.build();
        com.mongodb.MongoClient mongoClient84 = mongoProperties73.createMongoClient(mongoClientOptions83);
        int int85 = mongoClientOptions83.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern86 = mongoClientOptions83.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder87 = builder72.writeConcern(writeConcern86);
        com.mongodb.MongoClientOptions.Builder builder88 = builder37.writeConcern(writeConcern86);
        com.mongodb.MongoClientOptions.Builder builder89 = builder34.writeConcern(writeConcern86);
        com.mongodb.MongoClientOptions.Builder builder91 = builder89.maxConnectionIdleTime(35);
        com.mongodb.MongoClientOptions.Builder builder93 = builder91.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder95 = builder93.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(mongoClient68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertNotNull(mongoClient84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(writeConcern86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test4087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4087");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.username = "hi!";
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
    }

    @Test
    public void test4088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4088");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass41 = mongoProperties39.getFieldNamingStrategy();
        mongoProperties39.port = 10;
        mongoProperties39.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties39.createMongoClient(mongoClientOptions46);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties39.createMongoClient(mongoClientOptions55, environment56);
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions55.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder32.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder23.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder12.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder62 = builder0.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        boolean boolean72 = mongoClientOptions70.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory73 = mongoClientOptions70.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory74 = mongoClientOptions70.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory75 = mongoClientOptions70.getDbEncoderFactory();
        int int76 = mongoClientOptions70.getSocketTimeout();
        int int77 = mongoClientOptions70.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory78 = mongoClientOptions70.getSocketFactory();
        com.mongodb.ReadPreference readPreference79 = mongoClientOptions70.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder80 = builder0.readPreference(readPreference79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatSocketTimeout(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(socketFactory73);
        org.junit.Assert.assertNotNull(dBEncoderFactory74);
        org.junit.Assert.assertNotNull(dBEncoderFactory75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(socketFactory78);
        org.junit.Assert.assertNotNull(readPreference79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test4089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4089");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int6 = mongoProperties0.port;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4090");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean19 = mongoClientOptions17.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        int int21 = mongoClientOptions17.getConnectionsPerHost();
        int int22 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions17.getDbDecoderFactory();
        boolean boolean24 = mongoClientOptions17.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        int int26 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions17.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions17.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(writeConcern28);
    }

    @Test
    public void test4091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4091");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions18.isSocketKeepAlive();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        int int24 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        int int25 = mongoClientOptions18.getConnectTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        boolean boolean40 = mongoClientOptions39.isSocketKeepAlive();
        boolean boolean41 = mongoClientOptions39.isSocketKeepAlive();
        int int42 = mongoClientOptions39.getHeartbeatThreadCount();
        int int43 = mongoClientOptions39.getMaxConnectionLifeTime();
        boolean boolean44 = mongoClientOptions39.isAutoConnectRetry();
        int int45 = mongoClientOptions39.getHeartbeatConnectRetryFrequency();
        int int46 = mongoClientOptions39.getConnectTimeout();
        javax.net.SocketFactory socketFactory47 = mongoClientOptions39.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder31.socketFactory(socketFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        long long57 = mongoClientOptions56.getMaxAutoConnectRetryTime();
        int int58 = mongoClientOptions56.getMinConnectionsPerHost();
        boolean boolean59 = mongoClientOptions56.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder77.build();
        javax.net.SocketFactory socketFactory81 = mongoClientOptions80.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory82 = mongoClientOptions80.getDbEncoderFactory();
        long long83 = mongoClientOptions80.getMaxAutoConnectRetryTime();
        int int84 = mongoClientOptions80.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str85 = mongoClientOptions80.getRequiredReplicaSetName();
        boolean boolean86 = mongoClientOptions80.isAutoConnectRetry();
        int int87 = mongoClientOptions80.getLocalThreshold();
        javax.net.SocketFactory socketFactory88 = mongoClientOptions80.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder89 = builder70.socketFactory(socketFactory88);
        boolean boolean90 = mongoClientOptions56.equals((java.lang.Object) socketFactory88);
        com.mongodb.MongoClientOptions.Builder builder91 = builder48.socketFactory(socketFactory88);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 500 + "'", int45 == 500);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoClientOptions80);
        org.junit.Assert.assertNotNull(socketFactory81);
        org.junit.Assert.assertNotNull(dBEncoderFactory82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10L + "'", long83 == 10L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertNotNull(socketFactory88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test4092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4092");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
    }

    @Test
    public void test4093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4093");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.port = 52;
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.authenticationDatabase;
        java.lang.Class<?> wildcardClass12 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        mongoProperties13.port = 10;
        mongoProperties13.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties13.createMongoClient(mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties13.createMongoClient(mongoClientOptions29, environment30);
        java.lang.String str32 = mongoProperties13.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        com.mongodb.MongoClient mongoClient41 = mongoProperties13.createMongoClient(mongoClientOptions40);
        mongoProperties13.database = "";
        java.lang.String str44 = mongoProperties13.uri;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass46 = mongoProperties45.fieldNamingStrategy;
        mongoProperties45.host = "hi!";
        int int49 = mongoProperties45.getDEFAULT_PORT();
        mongoProperties45.host = "";
        java.lang.Integer int52 = mongoProperties45.getPort();
        java.lang.String str53 = mongoProperties45.getAuthenticationDatabase();
        char[] charArray54 = mongoProperties45.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass56 = mongoProperties55.fieldNamingStrategy;
        mongoProperties55.host = "hi!";
        int int59 = mongoProperties55.getDEFAULT_PORT();
        mongoProperties55.host = "";
        mongoProperties55.setHost("hi!");
        char[] charArray68 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties55.setPassword(charArray68);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties70 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass71 = mongoProperties70.fieldNamingStrategy;
        mongoProperties70.host = "hi!";
        int int74 = mongoProperties70.getDEFAULT_PORT();
        mongoProperties70.host = "";
        mongoProperties70.setHost("hi!");
        char[] charArray83 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties70.setPassword(charArray83);
        mongoProperties55.password = charArray83;
        mongoProperties45.password = charArray83;
        mongoProperties13.setPassword(charArray83);
        java.lang.Class<?> wildcardClass88 = mongoProperties13.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass88;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb://localhost/test" + "'", str44, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 27017 + "'", int49 == 27017);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(charArray54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 27017 + "'", int59 == 27017);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 27017 + "'", int74 == 27017);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test4094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4094");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.database = "mongodb://localhost/test";
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.port = 20000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4095");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions7.getSocketFactory();
        boolean boolean16 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test4096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4096");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        boolean boolean13 = mongoClientOptions10.isAlwaysUseMBeans();
        int int14 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4097");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        java.lang.String str10 = mongoProperties0.getUsername();
        mongoProperties0.host = "test";
        java.lang.String str13 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4098");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4099");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionLifeTime((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4100");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.getUri();
        mongoProperties0.username = "";
        java.lang.Integer int24 = mongoProperties0.port;
        java.lang.Integer int25 = mongoProperties0.getPort();
        mongoProperties0.setUri("test");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setUri("");
        int int32 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 27017 + "'", int32 == 27017);
    }

    @Test
    public void test4101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4101");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        int int16 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
    }

    @Test
    public void test4102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4102");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        mongoProperties7.port = 10;
        mongoProperties7.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties7.createMongoClient(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties7.createMongoClient(mongoClientOptions23, environment24);
        java.lang.String str26 = mongoProperties7.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.MongoClient mongoClient35 = mongoProperties7.createMongoClient(mongoClientOptions34);
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions34);
        int int37 = mongoClientOptions34.getAcceptableLatencyDifference();
        int int38 = mongoClientOptions34.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4103");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        int int44 = mongoClientOptions43.getLocalThreshold();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder35.socketFactory(socketFactory45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder18.socketFactory(socketFactory45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxWaitTime((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4104");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test4105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4105");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getSocketTimeout();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        int int15 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4106");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        java.lang.String str8 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
    }

    @Test
    public void test4107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4107");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int10 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test4108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4108");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.acceptableLatencyDifference((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4109");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean10 = mongoClientOptions7.isAutoConnectRetry();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
    }

    @Test
    public void test4110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4110");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        java.lang.String str14 = mongoProperties10.uri;
        mongoProperties10.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getLocalThreshold();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxWaitTime(52);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatConnectRetryFrequency(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4111");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxConnectionIdleTime(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4112");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.host;
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4113");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions12.getConnectTimeout();
        int int15 = mongoClientOptions12.getMaxWaitTime();
        int int16 = mongoClientOptions12.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder4.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.heartbeatSocketTimeout(10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass41 = mongoProperties39.getFieldNamingStrategy();
        java.lang.String str42 = mongoProperties39.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions50.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory52 = mongoClientOptions50.getDbEncoderFactory();
        long long53 = mongoClientOptions50.getMaxAutoConnectRetryTime();
        boolean boolean54 = mongoClientOptions50.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder55 = mongoProperties39.builder(mongoClientOptions50);
        int int56 = mongoClientOptions50.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions50.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder58 = builder32.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder21.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        int int68 = mongoClientOptions67.getHeartbeatSocketTimeout();
        int int69 = mongoClientOptions67.getHeartbeatFrequency();
        boolean boolean70 = mongoClientOptions67.isSocketKeepAlive();
        int int71 = mongoClientOptions67.getHeartbeatSocketTimeout();
        boolean boolean72 = mongoClientOptions67.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern73 = mongoClientOptions67.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder59.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertNotNull(dBEncoderFactory52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20000 + "'", int68 == 20000);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5000 + "'", int69 == 5000);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 20000 + "'", int71 == 20000);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(writeConcern73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test4114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4114");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass7 = mongoProperties5.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties5.database;
        java.lang.String str9 = mongoProperties5.host;
        java.lang.String str10 = mongoProperties5.database;
        mongoProperties5.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        mongoProperties13.host = "hi!";
        java.lang.Class<?> wildcardClass17 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass18 = mongoProperties13.getFieldNamingStrategy();
        char[] charArray21 = new char[] { '#', 'a' };
        mongoProperties13.password = charArray21;
        mongoProperties5.password = charArray21;
        mongoProperties0.password = charArray21;
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, a]");
    }

    @Test
    public void test4115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4115");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions7.equals((java.lang.Object) "");
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        boolean boolean21 = mongoClientOptions7.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.heartbeatConnectRetryFrequency(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4116");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions25.getSocketFactory();
        long long27 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions25.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder17.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder6.maxConnectionLifeTime((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder6.heartbeatThreadCount((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4117");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getLocalThreshold();
        long long17 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test4118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4118");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        int int17 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions14.isAutoConnectRetry();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4119");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatThreadCount(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4120");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions27.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder19.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder32 = builder10.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionLifeTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test4121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4121");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions7.getHeartbeatThreadCount();
        int int13 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str14 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str15 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4122");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4123");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder14.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4124");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.uri;
        java.lang.String str4 = mongoProperties0.gridFsDatabase;
        int int5 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str6 = mongoProperties0.database;
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test4125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4125");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getLocalThreshold();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        int int27 = mongoClientOptions24.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder14.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder7.dbDecoderFactory(dBDecoderFactory28);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4126");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions7.equals((java.lang.Object) 100L);
        int int13 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test4127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4127");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        java.lang.String str20 = mongoProperties0.uri;
        mongoProperties0.database = "hi!";
        org.springframework.core.env.Environment environment23 = null;
        int int24 = mongoProperties0.determinePort(environment23);
        java.lang.String str25 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test4128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4128");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4129");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4130");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
    }

    @Test
    public void test4131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4131");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder7.socketFactory(socketFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder7.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder7.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder7.minHeartbeatFrequency((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder7.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4132");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        boolean boolean10 = mongoProperties0.hasCustomCredentials();
        int int11 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.username = "";
        mongoProperties0.database = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test4133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4133");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        boolean boolean14 = mongoProperties0.hasCustomAddress();
        java.lang.String str15 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
    }

    @Test
    public void test4134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4134");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.uri;
        java.lang.String str4 = mongoProperties0.gridFsDatabase;
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        boolean boolean6 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4135");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder13.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder6.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.acceptableLatencyDifference(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4136");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.username = "hi!";
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.host;
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test4137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4137");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions15.getReadPreference();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions15.getReadPreference();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions15.getSocketFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(socketFactory22);
    }

    @Test
    public void test4138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4138");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.String str12 = mongoClientOptions10.getRequiredReplicaSetName();
        java.lang.String str13 = mongoClientOptions10.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4139");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        boolean boolean8 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        mongoProperties9.host = "hi!";
        mongoProperties9.authenticationDatabase = "";
        java.lang.String str15 = mongoProperties9.database;
        java.lang.String str16 = mongoProperties9.gridFsDatabase;
        java.lang.String str17 = mongoProperties9.getMongoClientDatabase();
        java.lang.Integer int18 = mongoProperties9.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        java.lang.String str21 = mongoProperties19.username;
        java.lang.String str22 = mongoProperties19.host;
        mongoProperties19.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass26 = mongoProperties25.fieldNamingStrategy;
        boolean boolean27 = mongoProperties25.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        com.mongodb.MongoClient mongoClient36 = mongoProperties25.createMongoClient(mongoClientOptions35);
        int int37 = mongoClientOptions35.getMaxWaitTime();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions35.getSocketFactory();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties19.createMongoClient(mongoClientOptions35, environment39);
        char[] charArray43 = new char[] { '4', '4' };
        mongoProperties19.setPassword(charArray43);
        mongoProperties9.password = charArray43;
        mongoProperties0.setPassword(charArray43);
        mongoProperties0.setUsername("test");
        java.lang.String str49 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, 4]");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test4140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4140");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        boolean boolean16 = mongoProperties14.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClient mongoClient25 = mongoProperties14.createMongoClient(mongoClientOptions24);
        int int26 = mongoClientOptions24.getMaxWaitTime();
        int int27 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions24.getReadPreference();
        int int30 = mongoClientOptions24.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold(100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder31.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4141");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.authenticationDatabase = "";
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test4142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4142");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        int int13 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(false);
        boolean boolean21 = mongoClientOptions12.equals((java.lang.Object) false);
        int int22 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = mongoProperties0.builder(mongoClientOptions12);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime(0L);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.minConnectionsPerHost(100);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4143");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        long long25 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str27 = mongoClientOptions22.getRequiredReplicaSetName();
        boolean boolean28 = mongoClientOptions22.isAutoConnectRetry();
        int int29 = mongoClientOptions22.getLocalThreshold();
        int int30 = mongoClientOptions22.getHeartbeatFrequency();
        int int31 = mongoClientOptions22.getConnectTimeout();
        java.lang.String str32 = mongoClientOptions22.toString();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions22.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions55.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions55.getDbEncoderFactory();
        long long58 = mongoClientOptions55.getMaxAutoConnectRetryTime();
        int int59 = mongoClientOptions55.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str60 = mongoClientOptions55.getRequiredReplicaSetName();
        boolean boolean61 = mongoClientOptions55.isAutoConnectRetry();
        int int62 = mongoClientOptions55.getLocalThreshold();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions55.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder45.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder34.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder67 = builder34.socketTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatConnectTimeout(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test4144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4144");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.description("mongodb://localhost/test");
        boolean boolean21 = mongoClientOptions7.equals((java.lang.Object) builder16);
        int int22 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5000 + "'", int22 == 5000);
    }

    @Test
    public void test4145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4145");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4146");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.String str5 = mongoProperties0.database;
        mongoProperties0.host = "";
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        java.lang.String str10 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4147");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatConnectTimeout((int) (short) 10);
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) builder26);
        int int28 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean29 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4148");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        mongoProperties15.host = "hi!";
        java.lang.String str19 = mongoProperties15.uri;
        mongoProperties15.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getLocalThreshold();
        boolean boolean31 = mongoClientOptions29.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties15.builder(mongoClientOptions29);
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions29.getReadPreference();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        int int35 = mongoClientOptions29.getAcceptableLatencyDifference();
        int int36 = mongoClientOptions29.getMaxConnectionIdleTime();
        int int37 = mongoClientOptions29.getConnectTimeout();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder12.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder12.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4149");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        int int16 = mongoClientOptions10.getMinConnectionsPerHost();
        int int17 = mongoClientOptions10.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test4150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4150");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.host = "";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.host;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray16 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(charArray16);
    }

    @Test
    public void test4151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4151");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.host = "test";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4152");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        int int15 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions7.getWriteConcern();
        int int17 = mongoClientOptions7.getConnectionsPerHost();
        int int18 = mongoClientOptions7.getLocalThreshold();
        boolean boolean19 = mongoClientOptions7.isAlwaysUseMBeans();
        int int20 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test4153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4153");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str11 = mongoClientOptions7.toString();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4154");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "";
        mongoProperties0.uri = "hi!";
        java.lang.String str13 = mongoProperties0.getDatabase();
        java.lang.Integer int14 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test4155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4155");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder17.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.readPreference(readPreference28);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4156");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str6 = mongoProperties0.getUri();
        org.springframework.core.env.Environment environment7 = null;
        int int8 = mongoProperties0.determinePort(environment7);
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
    }

    @Test
    public void test4157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4157");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        javax.net.SocketFactory socketFactory26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketFactory(socketFactory26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4158");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4159");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        javax.net.SocketFactory socketFactory61 = mongoClientOptions60.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder52.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder43.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder32.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder65 = builder11.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder66 = builder10.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder68 = builder10.threadsAllowedToBlockForConnectionMultiplier(5);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.connectionsPerHost(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(socketFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4160");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test4161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4161");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4162");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxAutoConnectRetryTime(1L);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.maxWaitTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test4163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4163");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass17;
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.port = 35;
        mongoProperties0.setPort((java.lang.Integer) 100);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test4164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4164");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.username = "test";
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test4165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4165");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setPort((java.lang.Integer) 10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test4166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4166");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        java.lang.String str17 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4167");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.readPreference(readPreference17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test4168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4168");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions7.equals((java.lang.Object) 100L);
        int int13 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        boolean boolean16 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4169");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str11 = mongoProperties0.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass14 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties12.port = 10;
        mongoProperties12.database = "hi!";
        java.lang.String str19 = mongoProperties12.getUri();
        mongoProperties12.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        java.lang.String str24 = mongoProperties22.username;
        java.lang.String str25 = mongoProperties22.host;
        mongoProperties22.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        boolean boolean30 = mongoProperties28.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        com.mongodb.MongoClient mongoClient39 = mongoProperties28.createMongoClient(mongoClientOptions38);
        int int40 = mongoClientOptions38.getMaxWaitTime();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions38.getSocketFactory();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties22.createMongoClient(mongoClientOptions38, environment42);
        char[] charArray46 = new char[] { '4', '4' };
        mongoProperties22.setPassword(charArray46);
        mongoProperties12.password = charArray46;
        mongoProperties0.setPassword(charArray46);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, 4]");
    }

    @Test
    public void test4170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4170");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getSocketTimeout();
        int int16 = mongoClientOptions14.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions14.getReadPreference();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions14.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder6.socketFactory(socketFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
    }

    @Test
    public void test4171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4171");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.uri;
        java.lang.String str4 = mongoProperties0.gridFsDatabase;
        int int5 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setUsername("test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test4172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4172");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
    }

    @Test
    public void test4173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4173");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getUri();
        java.lang.String str11 = mongoProperties0.host;
        java.lang.String str12 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test4174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4174");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.uri;
        char[] charArray2 = mongoProperties0.password;
        mongoProperties0.clearPassword();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb://localhost/test" + "'", str1, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray2);
    }

    @Test
    public void test4175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4175");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectRetryFrequency((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4176");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4177");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionIdleTime(100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4178");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        mongoProperties9.host = "hi!";
        java.lang.String str13 = mongoProperties9.uri;
        mongoProperties9.clearPassword();
        java.lang.Class<?> wildcardClass15 = mongoProperties9.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass26 = mongoProperties25.fieldNamingStrategy;
        mongoProperties25.host = "hi!";
        mongoProperties25.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        int int35 = mongoProperties31.getDEFAULT_PORT();
        mongoProperties31.host = "";
        mongoProperties31.setHost("hi!");
        char[] charArray44 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties31.setPassword(charArray44);
        char[] charArray46 = mongoProperties31.password;
        mongoProperties25.setPassword(charArray46);
        mongoProperties17.setPassword(charArray46);
        mongoProperties0.setPassword(charArray46);
        org.springframework.core.env.Environment environment50 = null;
        int int51 = mongoProperties0.determinePort(environment50);
        mongoProperties0.setUsername("");
        mongoProperties0.username = "";
        org.springframework.core.env.Environment environment56 = null;
        int int57 = mongoProperties0.determinePort(environment56);
        mongoProperties0.username = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
    }

    @Test
    public void test4179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4179");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        boolean boolean9 = mongoProperties7.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions17);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder0.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder31.socketFactory(socketFactory40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder50.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder41.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getHeartbeatSocketTimeout();
        int int73 = mongoClientOptions71.getHeartbeatFrequency();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        int int75 = mongoClientOptions71.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder63.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder20.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder84 = builder80.localThreshold(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder86 = builder84.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5000 + "'", int73 == 5000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 120000 + "'", int75 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test4180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4180");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        boolean boolean37 = mongoProperties35.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        com.mongodb.MongoClient mongoClient46 = mongoProperties35.createMongoClient(mongoClientOptions45);
        int int47 = mongoClientOptions45.getMaxWaitTime();
        javax.net.SocketFactory socketFactory48 = mongoClientOptions45.getSocketFactory();
        int int49 = mongoClientOptions45.getLocalThreshold();
        java.lang.String str50 = mongoClientOptions45.toString();
        org.springframework.core.env.Environment environment51 = null;
        com.mongodb.MongoClient mongoClient52 = mongoProperties0.createMongoClient(mongoClientOptions45, environment51);
        mongoProperties0.host = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 120000 + "'", int47 == 120000);
        org.junit.Assert.assertNotNull(socketFactory48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(mongoClient52);
    }

    @Test
    public void test4181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4181");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        mongoProperties0.username = "test";
        mongoProperties0.username = "hi!";
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
    }

    @Test
    public void test4182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4182");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int17 = mongoClientOptions10.getConnectTimeout();
        java.lang.String str18 = mongoClientOptions10.getRequiredReplicaSetName();
        int int19 = mongoClientOptions10.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test4183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4183");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        boolean boolean15 = mongoClientOptions10.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions10.getDbEncoderFactory();
        boolean boolean17 = mongoClientOptions10.isAlwaysUseMBeans();
        int int18 = mongoClientOptions10.getAcceptableLatencyDifference();
        java.lang.String str19 = mongoClientOptions10.toString();
        int int20 = mongoClientOptions10.getConnectTimeout();
        int int21 = mongoClientOptions10.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
    }

    @Test
    public void test4184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4184");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str16 = mongoProperties10.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.autoConnectRetry(false);
        boolean boolean33 = mongoClientOptions24.equals((java.lang.Object) false);
        int int34 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        long long46 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        int int47 = mongoClientOptions44.getHeartbeatConnectTimeout();
        boolean boolean48 = mongoClientOptions24.equals((java.lang.Object) mongoClientOptions44);
        java.lang.String str49 = mongoClientOptions44.getDescription();
        boolean boolean50 = mongoClientOptions44.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        javax.net.SocketFactory socketFactory59 = mongoClientOptions58.getSocketFactory();
        int int60 = mongoClientOptions58.getSocketTimeout();
        boolean boolean61 = mongoClientOptions58.isCursorFinalizerEnabled();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass63 = mongoProperties62.fieldNamingStrategy;
        java.lang.String str64 = mongoProperties62.getAuthenticationDatabase();
        char[] charArray65 = mongoProperties62.getPassword();
        mongoProperties62.host = "hi!";
        java.lang.String str68 = mongoProperties62.gridFsDatabase;
        java.lang.String str69 = mongoProperties62.getUri();
        boolean boolean70 = mongoClientOptions58.equals((java.lang.Object) mongoProperties62);
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions58.getWriteConcern();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions58.getReadPreference();
        boolean boolean73 = mongoClientOptions44.equals((java.lang.Object) readPreference72);
        int int74 = mongoClientOptions44.getConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(socketFactory59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(charArray65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb://localhost/test" + "'", str69, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
    }

    @Test
    public void test4185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4185");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getHeartbeatThreadCount();
        int int15 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4186");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4187");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 35);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getLocalThreshold();
        boolean boolean17 = mongoClientOptions15.isCursorFinalizerEnabled();
        int int18 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions15.getDbDecoderFactory();
        int int20 = mongoClientOptions15.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions15.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int24 = mongoProperties0.getDEFAULT_PORT();
        java.lang.Class<?> wildcardClass25 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test4188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4188");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str13 = mongoClientOptions7.toString();
        int int14 = mongoClientOptions7.getConnectTimeout();
        boolean boolean15 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions7.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
    }

    @Test
    public void test4189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4189");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean11 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean15 = mongoClientOptions7.isAlwaysUseMBeans();
        int int16 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4190");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4191");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test4192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4192");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4193");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4194");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.localThreshold(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4195");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        java.lang.String str13 = mongoClientOptions7.toString();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test4196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4196");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) 20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4197");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions23.getSocketFactory();
        long long25 = mongoClientOptions23.getMaxAutoConnectRetryTime();
        java.lang.String str26 = mongoClientOptions23.getRequiredReplicaSetName();
        int int27 = mongoClientOptions23.getLocalThreshold();
        int int28 = mongoClientOptions23.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder30 = builder13.readPreference(readPreference29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4198");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        int int15 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test4199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4199");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean20 = mongoClientOptions18.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions18.getSocketFactory();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions18.getWriteConcern();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions18.getWriteConcern();
        int int28 = mongoClientOptions18.getConnectionsPerHost();
        int int29 = mongoClientOptions18.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions18, environment30);
        long long32 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
    }

    @Test
    public void test4200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4200");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.port = 500;
        int int14 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
    }

    @Test
    public void test4201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4201");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4202");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.password;
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass10 = mongoProperties8.getFieldNamingStrategy();
        mongoProperties8.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass13 = mongoProperties8.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        mongoProperties8.fieldNamingStrategy = wildcardClass23;
        mongoProperties0.fieldNamingStrategy = wildcardClass23;
        char[] charArray26 = mongoProperties0.getPassword();
        java.lang.String str27 = mongoProperties0.getDatabase();
        char[] charArray28 = mongoProperties0.password;
        java.lang.Integer int29 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNull(charArray26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test4203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4203");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions18.isSocketKeepAlive();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions18.getLocalThreshold();
        int int24 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions18.getWriteConcern();
        int int26 = mongoClientOptions18.getHeartbeatConnectTimeout();
        long long27 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions18.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions36.getSocketFactory();
        long long38 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        int int39 = mongoClientOptions36.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions36.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions36.getDbEncoderFactory();
        int int42 = mongoClientOptions36.getMaxConnectionLifeTime();
        int int43 = mongoClientOptions36.getAcceptableLatencyDifference();
        int int44 = mongoClientOptions36.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions36.getDbDecoderFactory();
        boolean boolean46 = mongoClientOptions36.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory47 = mongoClientOptions36.getSocketFactory();
        boolean boolean48 = mongoClientOptions18.equals((java.lang.Object) socketFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder10.socketFactory(socketFactory47);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.connectionsPerHost(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 500 + "'", int39 == 500);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 500 + "'", int44 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4204");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getSocketTimeout();
        int int28 = mongoClientOptions26.getHeartbeatThreadCount();
        java.lang.String str29 = mongoClientOptions26.getRequiredReplicaSetName();
        java.lang.String str30 = mongoClientOptions26.toString();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions26.getWriteConcern();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder16.socketFactory(socketFactory32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4205");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        char[] charArray10 = null;
        mongoProperties0.setPassword(charArray10);
        mongoProperties0.setHost("hi!");
        java.lang.Integer int14 = mongoProperties0.getPort();
        boolean boolean15 = mongoProperties0.hasCustomAddress();
        java.lang.String str16 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4206");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions15.getMaxWaitTime();
        boolean boolean18 = mongoClientOptions15.isAutoConnectRetry();
        int int19 = mongoClientOptions15.getMaxWaitTime();
        int int20 = mongoClientOptions15.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions15, environment21);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(mongoClient22);
    }

    @Test
    public void test4207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4207");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        java.lang.Class<?> wildcardClass12 = dBEncoderFactory11.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4208");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        boolean boolean37 = mongoClientOptions33.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder25.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder8.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
    }

    @Test
    public void test4209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4209");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.host = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test4210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4210");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime(35);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4211");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        boolean boolean9 = mongoProperties7.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions17);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4212");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.String str5 = mongoProperties0.database;
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test4213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4213");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder43 = builder35.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder45 = builder35.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass54 = mongoProperties53.fieldNamingStrategy;
        boolean boolean55 = mongoProperties53.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        com.mongodb.MongoClient mongoClient64 = mongoProperties53.createMongoClient(mongoClientOptions63);
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder46.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder45.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder32.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder25.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder70 = builder8.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.minHeartbeatFrequency(1);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder70.build();
        javax.net.SocketFactory socketFactory76 = mongoClientOptions75.getSocketFactory();
        java.lang.String str77 = mongoClientOptions75.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertNotNull(socketFactory76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test4214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4214");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4215");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.port = 100;
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.host = "hi!";
        java.lang.String str18 = mongoProperties14.uri;
        org.springframework.core.env.Environment environment19 = null;
        int int20 = mongoProperties14.determinePort(environment19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean30 = mongoClientOptions28.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory31 = mongoClientOptions28.getSocketFactory();
        int int32 = mongoClientOptions28.getMaxConnectionLifeTime();
        int int33 = mongoClientOptions28.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties14.builder(mongoClientOptions28);
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions28, environment35);
        java.lang.String str37 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test4216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4216");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions50.getSocketFactory();
        long long52 = mongoClientOptions50.getMaxAutoConnectRetryTime();
        int int53 = mongoClientOptions50.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions50.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder42.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder31.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder22.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.localThreshold(5);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.threadsAllowedToBlockForConnectionMultiplier(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test4217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4217");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4218");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getSocketTimeout();
        int int20 = mongoClientOptions18.getHeartbeatThreadCount();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        java.lang.String str22 = mongoClientOptions18.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions18.isCursorFinalizerEnabled();
        java.lang.String str24 = mongoClientOptions18.toString();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.String str26 = mongoProperties0.username;
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
    }

    @Test
    public void test4219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4219");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass31 = mongoProperties30.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass32 = mongoProperties30.getFieldNamingStrategy();
        mongoProperties30.port = 10;
        mongoProperties30.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties30.createMongoClient(mongoClientOptions37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties30.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder14.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder3.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder3.build();
        boolean boolean54 = mongoClientOptions53.isAutoConnectRetry();
        int int55 = mongoClientOptions53.getMaxConnectionLifeTime();
        int int56 = mongoClientOptions53.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test4220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4220");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        mongoProperties0.port = 500;
        java.lang.String str14 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass19 = mongoProperties17.getFieldNamingStrategy();
        mongoProperties17.port = 10;
        mongoProperties17.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties17.createMongoClient(mongoClientOptions24);
        mongoProperties17.setUsername("mongodb://localhost/test");
        java.lang.String str28 = mongoProperties17.getUri();
        org.springframework.core.env.Environment environment29 = null;
        int int30 = mongoProperties17.determinePort(environment29);
        mongoProperties17.database = "test";
        java.lang.String str33 = mongoProperties17.getUsername();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        boolean boolean43 = mongoClientOptions41.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory44 = mongoClientOptions41.getSocketFactory();
        int int45 = mongoClientOptions41.getConnectionsPerHost();
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties17.createMongoClient(mongoClientOptions41, environment46);
        com.mongodb.MongoClient mongoClient48 = mongoProperties0.createMongoClient(mongoClientOptions41);
        int int49 = mongoClientOptions41.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test4221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4221");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions10.getWriteConcern();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        java.lang.String str15 = mongoClientOptions10.toString();
        int int16 = mongoClientOptions10.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions10.getDbDecoderFactory();
        int int18 = mongoClientOptions10.getSocketTimeout();
        int int19 = mongoClientOptions10.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test4222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4222");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setHost("test");
        org.springframework.core.env.Environment environment7 = null;
        int int8 = mongoProperties0.determinePort(environment7);
        char[] charArray9 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test4223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4223");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        boolean boolean34 = mongoClientOptions33.isSocketKeepAlive();
        boolean boolean35 = mongoClientOptions33.isSocketKeepAlive();
        int int36 = mongoClientOptions33.getHeartbeatThreadCount();
        int int37 = mongoClientOptions33.getMaxConnectionLifeTime();
        boolean boolean38 = mongoClientOptions33.isAutoConnectRetry();
        int int39 = mongoClientOptions33.getHeartbeatConnectRetryFrequency();
        int int40 = mongoClientOptions33.getConnectTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder25.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder14.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 500 + "'", int39 == 500);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test4224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4224");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.getAuthenticationDatabase();
        boolean boolean13 = mongoProperties10.hasCustomCredentials();
        boolean boolean14 = mongoProperties10.hasCustomAddress();
        java.lang.String str15 = mongoProperties10.uri;
        mongoProperties10.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        java.lang.String str20 = mongoProperties18.getAuthenticationDatabase();
        char[] charArray21 = mongoProperties18.getPassword();
        mongoProperties18.host = "hi!";
        mongoProperties18.setUsername("hi!");
        char[] charArray27 = new char[] { '4' };
        mongoProperties18.password = charArray27;
        mongoProperties10.setPassword(charArray27);
        mongoProperties0.setPassword(charArray27);
        java.lang.Class<?> wildcardClass31 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        int int36 = mongoProperties32.getDEFAULT_PORT();
        mongoProperties32.host = "";
        mongoProperties32.setHost("hi!");
        char[] charArray45 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties32.setPassword(charArray45);
        mongoProperties0.password = charArray45;
        char[] charArray48 = mongoProperties0.getPassword();
        java.lang.String str49 = mongoProperties0.host;
        int int50 = mongoProperties0.getDEFAULT_PORT();
        java.lang.Class<?> wildcardClass51 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 27017 + "'", int36 == 27017);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 27017 + "'", int50 == 27017);
        org.junit.Assert.assertNull(wildcardClass51);
    }

    @Test
    public void test4225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4225");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        boolean boolean37 = mongoClientOptions33.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder25.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.description("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder44 = builder8.connectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test4226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4226");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        int int16 = mongoClientOptions7.getConnectTimeout();
        int int17 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
    }

    @Test
    public void test4227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4227");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4228");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        int int5 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.uri = "test";
        char[] charArray10 = mongoProperties0.password;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test4229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4229");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("test");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        int int43 = mongoClientOptions42.getHeartbeatSocketTimeout();
        int int44 = mongoClientOptions42.getHeartbeatFrequency();
        boolean boolean45 = mongoClientOptions42.isSocketKeepAlive();
        int int46 = mongoClientOptions42.getHeartbeatSocketTimeout();
        boolean boolean47 = mongoClientOptions42.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder33.writeConcern(writeConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder14.writeConcern(writeConcern48);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5000 + "'", int44 == 5000);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test4230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4230");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        int int10 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test4231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4231");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.localThreshold((int) '4');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test4232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4232");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        java.lang.String str12 = mongoProperties0.uri;
        java.lang.String str13 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isAlwaysUseMBeans();
        int int29 = mongoClientOptions27.getSocketTimeout();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions27, environment30);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient31);
    }

    @Test
    public void test4233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4233");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions14);
        java.lang.String str19 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass20 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test4234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4234");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions30.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder22.readPreference(readPreference31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.connectTimeout(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4235");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.username = "mongodb://localhost/test";
        java.lang.String str15 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str16 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
    }

    @Test
    public void test4236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4236");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(97);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder12.build();
        boolean boolean18 = mongoClientOptions17.isAlwaysUseMBeans();
        int int19 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
    }

    @Test
    public void test4237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4237");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.acceptableLatencyDifference(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.localThreshold(35);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass17 = mongoProperties16.fieldNamingStrategy;
        mongoProperties16.host = "hi!";
        int int20 = mongoProperties16.getDEFAULT_PORT();
        mongoProperties16.host = "";
        mongoProperties16.setHost("hi!");
        char[] charArray29 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties16.setPassword(charArray29);
        char[] charArray31 = mongoProperties16.password;
        boolean boolean32 = mongoProperties16.hasCustomCredentials();
        mongoProperties16.username = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        boolean boolean37 = mongoProperties35.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        com.mongodb.MongoClient mongoClient46 = mongoProperties35.createMongoClient(mongoClientOptions45);
        int int47 = mongoClientOptions45.getMaxWaitTime();
        int int48 = mongoClientOptions45.getHeartbeatConnectTimeout();
        int int49 = mongoClientOptions45.getMaxWaitTime();
        boolean boolean50 = mongoClientOptions45.isCursorFinalizerEnabled();
        com.mongodb.MongoClient mongoClient51 = mongoProperties16.createMongoClient(mongoClientOptions45);
        com.mongodb.DBEncoderFactory dBEncoderFactory52 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder14.dbEncoderFactory(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 120000 + "'", int47 == 120000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120000 + "'", int49 == 120000);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4238");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str13 = mongoProperties0.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.host = "hi!";
        java.lang.String str18 = mongoProperties14.uri;
        org.springframework.core.env.Environment environment19 = null;
        int int20 = mongoProperties14.determinePort(environment19);
        java.lang.String str21 = mongoProperties14.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        mongoProperties22.host = "hi!";
        int int26 = mongoProperties22.getDEFAULT_PORT();
        mongoProperties22.host = "";
        mongoProperties22.setHost("hi!");
        char[] charArray35 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties22.setPassword(charArray35);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass38 = mongoProperties37.fieldNamingStrategy;
        mongoProperties37.host = "hi!";
        int int41 = mongoProperties37.getDEFAULT_PORT();
        mongoProperties37.host = "";
        mongoProperties37.setHost("hi!");
        char[] charArray50 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties37.setPassword(charArray50);
        mongoProperties22.password = charArray50;
        mongoProperties14.setPassword(charArray50);
        java.lang.String str54 = mongoProperties14.authenticationDatabase;
        java.lang.String str55 = mongoProperties14.getDatabase();
        java.lang.String str56 = mongoProperties14.getMongoClientDatabase();
        mongoProperties14.authenticationDatabase = "mongodb://localhost/test";
        char[] charArray59 = mongoProperties14.getPassword();
        mongoProperties0.setPassword(charArray59);
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 27017 + "'", int26 == 27017);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 27017 + "'", int41 == 27017);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "test" + "'", str56, "test");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , a, a, 4]");
    }

    @Test
    public void test4239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4239");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        int int18 = mongoClientOptions15.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions15.isAlwaysUseMBeans();
        boolean boolean20 = mongoClientOptions15.isAutoConnectRetry();
        int int21 = mongoClientOptions15.getAcceptableLatencyDifference();
        int int22 = mongoClientOptions15.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = mongoProperties0.builder(mongoClientOptions15);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4240");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        int int15 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean16 = mongoClientOptions7.isSocketKeepAlive();
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int18 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions7.getConnectionsPerHost();
        int int20 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test4241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4241");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoClientOptions14.toString();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions22.getReadPreference();
        boolean boolean24 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions22);
        java.lang.String str25 = mongoClientOptions14.toString();
        int int26 = mongoClientOptions14.getLocalThreshold();
        int int27 = mongoClientOptions14.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions14.getDbEncoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
    }

    @Test
    public void test4242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4242");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions7.getSocketFactory();
        java.lang.String str19 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(socketFactory18);
    }

    @Test
    public void test4243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4243");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4244");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.String str21 = mongoClientOptions14.getRequiredReplicaSetName();
        java.lang.String str22 = mongoClientOptions14.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        mongoProperties23.host = "hi!";
        org.springframework.core.env.Environment environment27 = null;
        int int28 = mongoProperties23.determinePort(environment27);
        java.lang.String str29 = mongoProperties23.username;
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        boolean boolean38 = mongoClientOptions37.isSocketKeepAlive();
        boolean boolean39 = mongoClientOptions37.isSocketKeepAlive();
        int int40 = mongoClientOptions37.getHeartbeatThreadCount();
        int int41 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties23.createMongoClient(mongoClientOptions37, environment42);
        java.lang.Class<?> wildcardClass44 = mongoProperties23.getFieldNamingStrategy();
        char[] charArray45 = mongoProperties23.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass47 = mongoProperties46.fieldNamingStrategy;
        boolean boolean48 = mongoProperties46.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        com.mongodb.MongoClient mongoClient57 = mongoProperties46.createMongoClient(mongoClientOptions56);
        int int58 = mongoClientOptions56.getMaxWaitTime();
        int int59 = mongoClientOptions56.getHeartbeatConnectTimeout();
        int int60 = mongoClientOptions56.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = mongoProperties23.builder(mongoClientOptions56);
        boolean boolean63 = mongoClientOptions14.equals((java.lang.Object) builder62);
        boolean boolean64 = mongoClientOptions14.isAutoConnectRetry();
        int int65 = mongoClientOptions14.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 27017 + "'", int28 == 27017);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNull(charArray45);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 120000 + "'", int58 == 120000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120000 + "'", int60 == 120000);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 500 + "'", int65 == 500);
    }

    @Test
    public void test4245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4245");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions29.getHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        int int33 = mongoClientOptions29.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder40.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4246");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        java.lang.Class<?> wildcardClass27 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = (-1);
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test4247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4247");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "test";
        java.lang.String str22 = mongoProperties0.uri;
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str25 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test4248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4248");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        java.lang.String str15 = mongoClientOptions7.toString();
        int int16 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4249");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions18.getHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions18.isSocketKeepAlive();
        int int22 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions18.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.writeConcern(writeConcern24);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4250");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4251");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.heartbeatThreadCount(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4252");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        int int10 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(readPreference11);
    }

    @Test
    public void test4253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4253");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
    }

    @Test
    public void test4254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4254");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions7.getConnectTimeout();
        int int16 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int17 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test4255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4255");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions15, environment18);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions15.getSocketFactory();
        long long21 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        int int22 = mongoClientOptions15.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5000 + "'", int22 == 5000);
    }

    @Test
    public void test4256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4256");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.Integer int14 = mongoProperties0.port;
        java.lang.String str15 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4257");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxConnectionIdleTime((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4258");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions29.getHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        int int33 = mongoClientOptions29.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test4259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4259");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.uri;
        int int7 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test4260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4260");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        mongoProperties0.host = "";
        boolean boolean20 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.host = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4261");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        long long16 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions7.getDbDecoderFactory();
        int int18 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test4262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4262");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.uri = "test";
        mongoProperties0.database = "mongodb://localhost/test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        mongoProperties13.host = "hi!";
        mongoProperties13.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean28 = mongoClientOptions26.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions26.getSocketFactory();
        int int30 = mongoClientOptions26.getMaxConnectionLifeTime();
        int int31 = mongoClientOptions26.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions26.getWriteConcern();
        java.lang.String str33 = mongoClientOptions26.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties13.builder(mongoClientOptions26);
        int int35 = mongoClientOptions26.getHeartbeatSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass37 = mongoProperties36.fieldNamingStrategy;
        mongoProperties36.host = "hi!";
        mongoProperties36.setUri("mongodb://localhost/test");
        mongoProperties36.authenticationDatabase = "test";
        mongoProperties36.authenticationDatabase = "";
        mongoProperties36.setGridFsDatabase("test");
        java.lang.String str48 = mongoProperties36.getAuthenticationDatabase();
        boolean boolean49 = mongoClientOptions26.equals((java.lang.Object) str48);
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties0.builder(mongoClientOptions26);
        java.lang.String str51 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test4263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4263");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions25.getSocketFactory();
        long long27 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions25.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder17.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        com.mongodb.MongoClientOptions.Builder builder38 = builder33.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test4264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4264");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        mongoProperties0.database = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.uri = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4265");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.getAuthenticationDatabase();
        boolean boolean13 = mongoProperties10.hasCustomCredentials();
        boolean boolean14 = mongoProperties10.hasCustomAddress();
        java.lang.String str15 = mongoProperties10.uri;
        mongoProperties10.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        java.lang.String str20 = mongoProperties18.getAuthenticationDatabase();
        char[] charArray21 = mongoProperties18.getPassword();
        mongoProperties18.host = "hi!";
        mongoProperties18.setUsername("hi!");
        char[] charArray27 = new char[] { '4' };
        mongoProperties18.password = charArray27;
        mongoProperties10.setPassword(charArray27);
        mongoProperties0.setPassword(charArray27);
        java.lang.Class<?> wildcardClass31 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str34 = mongoProperties0.getHost();
        java.lang.String str35 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test4266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4266");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4267");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions7.isAlwaysUseMBeans();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4268");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxWaitTime(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder15.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4269");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        mongoProperties0.uri = "hi!";
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
    }

    @Test
    public void test4270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4270");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test4271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4271");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        boolean boolean14 = mongoProperties12.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        com.mongodb.MongoClient mongoClient23 = mongoProperties12.createMongoClient(mongoClientOptions22);
        int int24 = mongoClientOptions22.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = builder7.writeConcern(writeConcern25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder6.writeConcern(writeConcern25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4272");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getMinConnectionsPerHost();
        int int22 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions7.getReadPreference();
        boolean boolean25 = mongoClientOptions7.isAlwaysUseMBeans();
        int int26 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        long long27 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str28 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
    }

    @Test
    public void test4273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4273");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray19 = null;
        mongoProperties0.password = charArray19;
        mongoProperties0.authenticationDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
    }

    @Test
    public void test4274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4274");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4275");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean16 = mongoClientOptions7.isSocketKeepAlive();
        int int17 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions7.getReadPreference();
        java.lang.String str19 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test4276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4276");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
    }

    @Test
    public void test4277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4277");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int3 = mongoProperties0.port;
        java.lang.String str4 = mongoProperties0.username;
        java.lang.Integer int5 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test4278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4278");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.uri = "hi!";
        java.lang.String str10 = mongoProperties0.username;
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        java.lang.String str12 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4279");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        java.lang.String str10 = mongoProperties8.getAuthenticationDatabase();
        char[] charArray11 = mongoProperties8.getPassword();
        mongoProperties8.host = "hi!";
        mongoProperties8.setUsername("hi!");
        char[] charArray17 = new char[] { '4' };
        mongoProperties8.password = charArray17;
        mongoProperties0.password = charArray17;
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions27.getSocketFactory();
        long long29 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        int int30 = mongoClientOptions27.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions27.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions27.getDbEncoderFactory();
        int int33 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int34 = mongoClientOptions27.getAcceptableLatencyDifference();
        int int35 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties0.builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime(52);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass41 = mongoProperties40.fieldNamingStrategy;
        java.lang.String str42 = mongoProperties40.getAuthenticationDatabase();
        boolean boolean43 = mongoProperties40.hasCustomCredentials();
        int int44 = mongoProperties40.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.description("");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.autoConnectRetry(false);
        boolean boolean61 = mongoClientOptions52.equals((java.lang.Object) false);
        int int62 = mongoClientOptions52.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder63 = mongoProperties40.builder(mongoClientOptions52);
        int int64 = mongoClientOptions52.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions52.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder39.dbDecoderFactory(dBDecoderFactory65);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 500 + "'", int64 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test4280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4280");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4281");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties0.getUsername();
        java.lang.String str14 = mongoProperties0.username;
        java.lang.String str15 = mongoProperties0.getDatabase();
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4282");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.host = "";
        mongoProperties0.setUri("mongodb://localhost/test");
        boolean boolean13 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.gridFsDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4283");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getSocketTimeout();
        int int14 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean17 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4284");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        long long35 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        int int36 = mongoClientOptions33.getMinHeartbeatFrequency();
        int int37 = mongoClientOptions33.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder23.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test4285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4285");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int22 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder9.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.minHeartbeatFrequency(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4286");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        boolean boolean19 = mongoClientOptions14.isAutoConnectRetry();
        boolean boolean20 = mongoClientOptions14.isAutoConnectRetry();
        int int21 = mongoClientOptions14.getHeartbeatConnectTimeout();
        long long22 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test4287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4287");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        long long14 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4288");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        java.lang.String str19 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
    }

    @Test
    public void test4289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4289");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions10.isAutoConnectRetry();
        int int17 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder18 = mongoProperties0.builder(mongoClientOptions10);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions10.getReadPreference();
        int int20 = mongoClientOptions10.getHeartbeatThreadCount();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4290");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str14 = mongoClientOptions7.getRequiredReplicaSetName();
        long long15 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
    }

    @Test
    public void test4291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4291");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        long long13 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.description("");
        boolean boolean23 = mongoClientOptions7.equals((java.lang.Object) builder22);
        int int24 = mongoClientOptions7.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
    }

    @Test
    public void test4292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4292");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        int int9 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass19 = builder18.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass19;
        mongoProperties0.host = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4293");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions7.getSocketFactory();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test4294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4294");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        int int17 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean18 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4295");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder4.maxWaitTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4296");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
    }

    @Test
    public void test4297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4297");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getSocketTimeout();
        int int30 = mongoClientOptions28.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions28.getReadPreference();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions28.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder20.socketFactory(socketFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getSocketTimeout();
        int int43 = mongoClientOptions41.getHeartbeatThreadCount();
        boolean boolean44 = mongoClientOptions41.isAutoConnectRetry();
        int int45 = mongoClientOptions41.getHeartbeatThreadCount();
        int int46 = mongoClientOptions41.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions41.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder48 = builder20.writeConcern(writeConcern47);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 120000 + "'", int46 == 120000);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4298");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        int int15 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        int int17 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
    }

    @Test
    public void test4299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4299");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.readPreference(readPreference17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.maxConnectionLifeTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4300");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test4301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4301");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions41.getSocketFactory();
        long long43 = mongoClientOptions41.getMaxAutoConnectRetryTime();
        int int44 = mongoClientOptions41.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions41.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions41.getDbEncoderFactory();
        int int47 = mongoClientOptions41.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder33.dbEncoderFactory(dBEncoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder20.dbEncoderFactory(dBEncoderFactory48);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder20.heartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 500 + "'", int44 == 500);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test4302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4302");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.String str12 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4303");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoClientOptions14.toString();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions22.getReadPreference();
        boolean boolean24 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions22);
        java.lang.String str25 = mongoClientOptions14.toString();
        int int26 = mongoClientOptions14.getConnectTimeout();
        java.lang.String str27 = mongoClientOptions14.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
    }

    @Test
    public void test4304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4304");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        int int9 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        int int11 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.description("mongodb://localhost/test");
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) builder22);
        boolean boolean28 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4305");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions7.getWriteConcern();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
    }

    @Test
    public void test4306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4306");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test4307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4307");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4308");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4309");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4310");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.Integer int9 = mongoProperties0.port;
        char[] charArray10 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean26 = mongoClientOptions24.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory27 = mongoClientOptions24.getSocketFactory();
        int int28 = mongoClientOptions24.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions24.getWriteConcern();
        java.lang.String str31 = mongoClientOptions24.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions24);
        int int33 = mongoClientOptions24.getHeartbeatSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass35 = mongoProperties34.fieldNamingStrategy;
        mongoProperties34.host = "hi!";
        mongoProperties34.setUri("mongodb://localhost/test");
        mongoProperties34.authenticationDatabase = "test";
        mongoProperties34.authenticationDatabase = "";
        mongoProperties34.setGridFsDatabase("test");
        java.lang.String str46 = mongoProperties34.getAuthenticationDatabase();
        boolean boolean47 = mongoClientOptions24.equals((java.lang.Object) str46);
        int int48 = mongoClientOptions24.getHeartbeatThreadCount();
        com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions24);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(mongoClient49);
    }

    @Test
    public void test4311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4311");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        mongoProperties5.host = "hi!";
        int int9 = mongoProperties5.getDEFAULT_PORT();
        mongoProperties5.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass14 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties12.port = 10;
        mongoProperties12.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties12.createMongoClient(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties12.createMongoClient(mongoClientOptions28, environment29);
        java.lang.String str31 = mongoProperties12.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        com.mongodb.MongoClient mongoClient40 = mongoProperties12.createMongoClient(mongoClientOptions39);
        com.mongodb.MongoClient mongoClient41 = mongoProperties5.createMongoClient(mongoClientOptions39);
        int int42 = mongoClientOptions39.getAcceptableLatencyDifference();
        int int43 = mongoClientOptions39.getHeartbeatFrequency();
        long long44 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        int int45 = mongoClientOptions39.getMaxConnectionIdleTime();
        int int46 = mongoClientOptions39.getConnectionsPerHost();
        int int47 = mongoClientOptions39.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties0.builder(mongoClientOptions39);
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5000 + "'", int43 == 5000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 500 + "'", int47 == 500);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4312");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        java.lang.Class<?> wildcardClass27 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = (-1);
        mongoProperties0.username = "hi!";
        char[] charArray32 = mongoProperties0.password;
        mongoProperties0.setPort((java.lang.Integer) 5);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
    }

    @Test
    public void test4313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4313");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int6 = mongoProperties0.port;
        java.lang.Integer int7 = mongoProperties0.port;
        mongoProperties0.port = 1;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test4314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4314");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
    }

    @Test
    public void test4315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4315");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.String str12 = mongoClientOptions10.getRequiredReplicaSetName();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions10.getDbDecoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
    }

    @Test
    public void test4316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4316");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("test");
        org.springframework.core.env.Environment environment11 = null;
        int int12 = mongoProperties0.determinePort(environment11);
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test4317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4317");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        long long11 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
    }

    @Test
    public void test4318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4318");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions7.toString();
        int int11 = mongoClientOptions7.getMinConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4319");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.heartbeatConnectTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4320");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int18 = mongoClientOptions16.getConnectTimeout();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        int int20 = mongoClientOptions16.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions16);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(mongoClient22);
    }

    @Test
    public void test4321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4321");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4322");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str16 = mongoProperties10.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.autoConnectRetry(false);
        boolean boolean33 = mongoClientOptions24.equals((java.lang.Object) false);
        int int34 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        long long46 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        int int47 = mongoClientOptions44.getHeartbeatConnectTimeout();
        boolean boolean48 = mongoClientOptions24.equals((java.lang.Object) mongoClientOptions44);
        java.lang.String str49 = mongoClientOptions44.getDescription();
        boolean boolean50 = mongoClientOptions44.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        javax.net.SocketFactory socketFactory59 = mongoClientOptions58.getSocketFactory();
        int int60 = mongoClientOptions58.getSocketTimeout();
        boolean boolean61 = mongoClientOptions58.isCursorFinalizerEnabled();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass63 = mongoProperties62.fieldNamingStrategy;
        java.lang.String str64 = mongoProperties62.getAuthenticationDatabase();
        char[] charArray65 = mongoProperties62.getPassword();
        mongoProperties62.host = "hi!";
        java.lang.String str68 = mongoProperties62.gridFsDatabase;
        java.lang.String str69 = mongoProperties62.getUri();
        boolean boolean70 = mongoClientOptions58.equals((java.lang.Object) mongoProperties62);
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions58.getWriteConcern();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions58.getReadPreference();
        boolean boolean73 = mongoClientOptions44.equals((java.lang.Object) readPreference72);
        java.lang.String str74 = mongoClientOptions44.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(socketFactory59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(charArray65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb://localhost/test" + "'", str69, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test4323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4323");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.dbDecoderFactory(dBDecoderFactory39);
        java.lang.Class<?> wildcardClass43 = dBDecoderFactory39.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test4324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4324");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        int int18 = mongoClientOptions15.getHeartbeatThreadCount();
        int int19 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions15.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions15.getDbDecoderFactory();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions15, environment22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions15.getDbDecoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
    }

    @Test
    public void test4325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4325");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.getUri();
        mongoProperties0.username = "";
        mongoProperties0.username = "";
        java.lang.String str26 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int27 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test4326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4326");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        long long17 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.connectionsPerHost((int) (byte) 100);
        boolean boolean29 = mongoClientOptions16.equals((java.lang.Object) (byte) 100);
        int int30 = mongoClientOptions16.getMinConnectionsPerHost();
        int int31 = mongoClientOptions16.getHeartbeatConnectTimeout();
        int int32 = mongoClientOptions16.getMaxWaitTime();
        int int33 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient34 = mongoProperties0.createMongoClient(mongoClientOptions16);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(mongoClient34);
    }

    @Test
    public void test4327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4327");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4328");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4329");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "";
        java.lang.String str11 = mongoProperties0.username;
        java.lang.String str12 = mongoProperties0.uri;
        char[] charArray13 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test4330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4330");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        int int7 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4331");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.String str5 = mongoProperties0.database;
        mongoProperties0.host = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions15);
        java.lang.String str18 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "test" + "'", str18, "test");
    }

    @Test
    public void test4332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4332");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        mongoProperties6.host = "hi!";
        mongoProperties6.setUri("mongodb://localhost/test");
        mongoProperties6.authenticationDatabase = "test";
        mongoProperties6.authenticationDatabase = "";
        java.lang.String str16 = mongoProperties6.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        mongoProperties23.host = "hi!";
        int int27 = mongoProperties23.getDEFAULT_PORT();
        mongoProperties23.host = "";
        mongoProperties23.setHost("hi!");
        char[] charArray36 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties23.setPassword(charArray36);
        char[] charArray38 = mongoProperties23.password;
        mongoProperties17.setPassword(charArray38);
        mongoProperties6.password = charArray38;
        mongoProperties0.password = charArray38;
        mongoProperties0.setGridFsDatabase("hi!");
        boolean boolean44 = mongoProperties0.hasCustomCredentials();
        java.lang.Class<?> wildcardClass45 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray46 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 27017 + "'", int27 == 27017);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[\000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[\000, \000, \000, \000]");
    }

    @Test
    public void test4333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4333");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean14 = mongoClientOptions7.isAutoConnectRetry();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test4334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4334");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4335");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        long long35 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        int int36 = mongoClientOptions33.getMinHeartbeatFrequency();
        int int37 = mongoClientOptions33.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder23.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.localThreshold(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass44 = mongoProperties43.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass45 = mongoProperties43.getFieldNamingStrategy();
        mongoProperties43.port = 10;
        mongoProperties43.database = "hi!";
        java.lang.String str50 = mongoProperties43.getUri();
        boolean boolean51 = mongoProperties43.hasCustomCredentials();
        java.lang.String str52 = mongoProperties43.authenticationDatabase;
        java.lang.Class<?> wildcardClass53 = mongoProperties43.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        boolean boolean63 = mongoClientOptions61.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory64 = mongoClientOptions61.getSocketFactory();
        int int65 = mongoClientOptions61.getMaxConnectionLifeTime();
        int int66 = mongoClientOptions61.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions61.getWriteConcern();
        int int68 = mongoClientOptions61.getSocketTimeout();
        int int69 = mongoClientOptions61.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions61.getWriteConcern();
        int int71 = mongoClientOptions61.getConnectionsPerHost();
        int int72 = mongoClientOptions61.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment73 = null;
        com.mongodb.MongoClient mongoClient74 = mongoProperties43.createMongoClient(mongoClientOptions61, environment73);
        java.lang.String str75 = mongoClientOptions61.getDescription();
        int int76 = mongoClientOptions61.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern77 = mongoClientOptions61.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder78 = builder8.writeConcern(writeConcern77);
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder83.build();
        int int87 = mongoClientOptions86.getLocalThreshold();
        boolean boolean88 = mongoClientOptions86.isCursorFinalizerEnabled();
        int int89 = mongoClientOptions86.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory90 = mongoClientOptions86.getDbDecoderFactory();
        int int91 = mongoClientOptions86.getMaxConnectionLifeTime();
        int int92 = mongoClientOptions86.getMaxConnectionIdleTime();
        int int93 = mongoClientOptions86.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern94 = mongoClientOptions86.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder95 = builder8.writeConcern(writeConcern94);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb://localhost/test" + "'", str50, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(socketFactory64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 20000 + "'", int69 == 20000);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(mongoClient74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20000 + "'", int76 == 20000);
        org.junit.Assert.assertNotNull(writeConcern77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 500 + "'", int89 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 500 + "'", int93 == 500);
        org.junit.Assert.assertNotNull(writeConcern94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test4336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4336");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        boolean boolean37 = mongoClientOptions33.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder25.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.maxAutoConnectRetryTime((long) '#');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test4337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4337");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.username = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4338");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.String str9 = mongoProperties7.getAuthenticationDatabase();
        char[] charArray10 = mongoProperties7.getPassword();
        mongoProperties7.host = "hi!";
        mongoProperties7.setUsername("hi!");
        char[] charArray16 = new char[] { '4' };
        mongoProperties7.password = charArray16;
        mongoProperties0.setPassword(charArray16);
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        boolean boolean21 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4339");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.acceptableLatencyDifference(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4340");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setGridFsDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean19 = mongoClientOptions17.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        int int21 = mongoClientOptions17.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions17, environment22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions17.getDbDecoderFactory();
        int int25 = mongoClientOptions17.getMaxWaitTime();
        int int26 = mongoClientOptions17.getHeartbeatSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        int int39 = mongoClientOptions37.getSocketTimeout();
        int int40 = mongoClientOptions37.getMaxWaitTime();
        int int41 = mongoClientOptions37.getMaxWaitTime();
        int int42 = mongoClientOptions37.getConnectTimeout();
        boolean boolean43 = mongoClientOptions17.equals((java.lang.Object) int42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder44.maxConnectionIdleTime(100);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxAutoConnectRetryTime((long) 20000);
        boolean boolean52 = mongoClientOptions17.equals((java.lang.Object) 20000);
        java.lang.String str53 = mongoClientOptions17.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test4341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4341");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions36);
        java.lang.String str39 = mongoProperties0.getDatabase();
        java.lang.Integer int40 = mongoProperties0.port;
        java.lang.String str41 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "test" + "'", str41, "test");
    }

    @Test
    public void test4342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4342");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        long long24 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions22.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions22.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions22.getDbEncoderFactory();
        int int28 = mongoClientOptions22.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions22.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions22.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder14.readPreference(readPreference30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4343");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        org.springframework.core.env.Environment environment12 = null;
        int int13 = mongoProperties0.determinePort(environment12);
        mongoProperties0.database = "test";
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        boolean boolean25 = mongoClientOptions23.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory26 = mongoClientOptions23.getSocketFactory();
        int int27 = mongoClientOptions23.getMaxConnectionLifeTime();
        int int28 = mongoClientOptions23.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions23.getWriteConcern();
        int int30 = mongoClientOptions23.getSocketTimeout();
        int int31 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions23.getWriteConcern();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass34 = mongoProperties33.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass35 = mongoProperties33.getFieldNamingStrategy();
        mongoProperties33.port = 10;
        mongoProperties33.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties33.createMongoClient(mongoClientOptions40);
        mongoProperties33.setUsername("mongodb://localhost/test");
        java.lang.String str44 = mongoProperties33.getUri();
        org.springframework.core.env.Environment environment45 = null;
        int int46 = mongoProperties33.determinePort(environment45);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass48 = mongoProperties47.fieldNamingStrategy;
        mongoProperties47.host = "hi!";
        java.lang.String str51 = mongoProperties47.uri;
        boolean boolean52 = mongoProperties47.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass54 = mongoProperties53.fieldNamingStrategy;
        boolean boolean55 = mongoProperties53.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        com.mongodb.MongoClient mongoClient64 = mongoProperties53.createMongoClient(mongoClientOptions63);
        int int65 = mongoClientOptions63.getMaxWaitTime();
        java.lang.String str66 = mongoClientOptions63.toString();
        com.mongodb.MongoClient mongoClient67 = mongoProperties47.createMongoClient(mongoClientOptions63);
        com.mongodb.MongoClient mongoClient68 = mongoProperties33.createMongoClient(mongoClientOptions63);
        boolean boolean69 = mongoClientOptions23.equals((java.lang.Object) mongoClient68);
        org.springframework.core.env.Environment environment70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties0.createMongoClient(mongoClientOptions23, environment70);
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder76.build();
        boolean boolean80 = mongoClientOptions79.isSocketKeepAlive();
        boolean boolean81 = mongoClientOptions79.isSocketKeepAlive();
        int int82 = mongoClientOptions79.getHeartbeatThreadCount();
        int int83 = mongoClientOptions79.getMaxConnectionLifeTime();
        boolean boolean84 = mongoClientOptions79.isAutoConnectRetry();
        int int85 = mongoClientOptions79.getHeartbeatConnectRetryFrequency();
        int int86 = mongoClientOptions79.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment87 = null;
        com.mongodb.MongoClient mongoClient88 = mongoProperties0.createMongoClient(mongoClientOptions79, environment87);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb://localhost/test" + "'", str44, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mongodb://localhost/test" + "'", str51, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 120000 + "'", int65 == 120000);
        org.junit.Assert.assertNotNull(mongoClient67);
        org.junit.Assert.assertNotNull(mongoClient68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 500 + "'", int85 == 500);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(mongoClient88);
    }

    @Test
    public void test4344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4344");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        boolean boolean16 = mongoProperties14.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClient mongoClient25 = mongoProperties14.createMongoClient(mongoClientOptions24);
        int int26 = mongoClientOptions24.getMaxWaitTime();
        int int27 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions24.getReadPreference();
        int int30 = mongoClientOptions24.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions24);
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.uri = "";
        org.springframework.core.env.Environment environment36 = null;
        int int37 = mongoProperties0.determinePort(environment36);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
    }

    @Test
    public void test4345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4345");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setDatabase("hi!");
        boolean boolean37 = mongoProperties0.hasCustomCredentials();
        int int38 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
    }

    @Test
    public void test4346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4346");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test4347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4347");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.Integer int17 = mongoProperties8.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        java.lang.String str22 = mongoProperties18.uri;
        org.springframework.core.env.Environment environment23 = null;
        int int24 = mongoProperties18.determinePort(environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean34 = mongoClientOptions32.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory35 = mongoClientOptions32.getSocketFactory();
        int int36 = mongoClientOptions32.getMaxConnectionLifeTime();
        int int37 = mongoClientOptions32.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties18.builder(mongoClientOptions32);
        java.lang.String str39 = mongoProperties18.getUri();
        mongoProperties18.username = "";
        java.lang.Integer int42 = mongoProperties18.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass44 = mongoProperties43.fieldNamingStrategy;
        mongoProperties43.host = "hi!";
        int int47 = mongoProperties43.getDEFAULT_PORT();
        mongoProperties43.host = "";
        mongoProperties43.setHost("hi!");
        char[] charArray56 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties43.setPassword(charArray56);
        mongoProperties18.setPassword(charArray56);
        mongoProperties8.setPassword(charArray56);
        mongoProperties0.setPassword(charArray56);
        mongoProperties0.authenticationDatabase = "";
        boolean boolean63 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties64 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass65 = mongoProperties64.fieldNamingStrategy;
        mongoProperties64.host = "hi!";
        mongoProperties64.setUri("mongodb://localhost/test");
        java.lang.String str70 = mongoProperties64.getHost();
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder77 = builder73.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        org.springframework.core.env.Environment environment79 = null;
        com.mongodb.MongoClient mongoClient80 = mongoProperties64.createMongoClient(mongoClientOptions78, environment79);
        java.lang.String str81 = mongoClientOptions78.toString();
        boolean boolean82 = mongoClientOptions78.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory83 = mongoClientOptions78.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient84 = mongoProperties0.createMongoClient(mongoClientOptions78);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[\000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertNotNull(mongoClient80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory83);
        org.junit.Assert.assertNotNull(mongoClient84);
    }

    @Test
    public void test4348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4348");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectionsPerHost(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions29.getSocketFactory();
        long long31 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions29.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions53.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder45.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions67.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder69 = builder59.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder36.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder72 = builder36.minHeartbeatFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4349");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        char[] charArray13 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties0.setPassword(charArray13);
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, a, 4]");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
    }

    @Test
    public void test4350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4350");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        mongoProperties23.host = "hi!";
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory36 = mongoClientOptions34.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties23.builder(mongoClientOptions34);
        javax.net.SocketFactory socketFactory38 = mongoClientOptions34.getSocketFactory();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions34.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.socketFactory(socketFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getLocalThreshold();
        long long50 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        int int51 = mongoClientOptions48.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory52 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder20.socketFactory(socketFactory52);
        boolean boolean54 = mongoClientOptions7.equals((java.lang.Object) builder20);
        int int55 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean56 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertNotNull(socketFactory52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test4351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4351");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean13 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4352");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4353");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions7.getConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions7.getSocketFactory();
        boolean boolean16 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4354");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions14.getReadPreference();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        java.lang.String str20 = mongoClientOptions14.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions14.getDbEncoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test4355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4355");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int15 = mongoClientOptions7.getConnectionsPerHost();
        long long16 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean18 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test4356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4356");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions7.getReadPreference();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test4357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4357");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoClientOptions14.toString();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions22.getReadPreference();
        boolean boolean24 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions22);
        java.lang.String str25 = mongoClientOptions22.getDescription();
        int int26 = mongoClientOptions22.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions22.getSocketFactory();
        int int28 = mongoClientOptions22.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
    }

    @Test
    public void test4358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4358");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(false);
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass18;
        boolean boolean20 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions34, environment35);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient36);
    }

    @Test
    public void test4359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4359");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        mongoProperties0.setUri("test");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        long long24 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions22.getMinHeartbeatFrequency();
        long long26 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int27 = mongoClientOptions22.getMaxConnectionLifeTime();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions22);
        int int29 = mongoClientOptions22.getMaxWaitTime();
        int int30 = mongoClientOptions22.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
    }

    @Test
    public void test4360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4360");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int22 = mongoProperties0.getPort();
        mongoProperties0.host = "";
        int int25 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray28 = mongoProperties0.password;
        mongoProperties0.clearPassword();
        mongoProperties0.port = 52;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27017 + "'", int25 == 27017);
        org.junit.Assert.assertNull(charArray28);
    }

    @Test
    public void test4361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4361");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        java.lang.String str10 = mongoProperties8.getAuthenticationDatabase();
        char[] charArray11 = mongoProperties8.getPassword();
        mongoProperties8.host = "hi!";
        mongoProperties8.setUsername("hi!");
        char[] charArray17 = new char[] { '4' };
        mongoProperties8.password = charArray17;
        mongoProperties0.setPassword(charArray17);
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        boolean boolean21 = mongoProperties0.hasCustomAddress();
        java.lang.String str22 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test4362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4362");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.minHeartbeatFrequency(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4363");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        boolean boolean22 = mongoClientOptions21.isSocketKeepAlive();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        int int24 = mongoClientOptions21.getHeartbeatThreadCount();
        int int25 = mongoClientOptions21.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions21.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties0.builder(mongoClientOptions21);
        char[] charArray29 = mongoProperties0.password;
        java.lang.String str30 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test4364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4364");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.database = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test4365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4365");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.maxConnectionLifeTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4366");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean16 = mongoClientOptions7.isAutoConnectRetry();
        int int17 = mongoClientOptions7.getConnectTimeout();
        int int18 = mongoClientOptions7.getMaxWaitTime();
        int int19 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4367");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.acceptableLatencyDifference(35);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4368");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str13 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4369");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.connectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4370");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
    }

    @Test
    public void test4371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4371");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.readPreference(readPreference17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder42.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.build();
        javax.net.SocketFactory socketFactory60 = mongoClientOptions59.getSocketFactory();
        long long61 = mongoClientOptions59.getMaxAutoConnectRetryTime();
        int int62 = mongoClientOptions59.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern63 = mongoClientOptions59.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions59.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder51.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder37.dbEncoderFactory(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(socketFactory60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 500 + "'", int62 == 500);
        org.junit.Assert.assertNotNull(writeConcern63);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test4372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4372");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        int int15 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
    }

    @Test
    public void test4373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4373");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatSocketTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.maxConnectionIdleTime(97);
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.maxWaitTime((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4374");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.uri = "mongodb://localhost/test";
        char[] charArray8 = mongoProperties0.password;
        mongoProperties0.uri = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test4375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4375");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        int int5 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.uri = "test";
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "mongodb://localhost/test";
        java.lang.String str14 = mongoProperties0.username;
        mongoProperties0.uri = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4376");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        int int9 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int10 = mongoClientOptions7.getLocalThreshold();
        int int11 = mongoClientOptions7.getHeartbeatThreadCount();
        int int12 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatConnectRetryFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatThreadCount(97);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatConnectTimeout(10);
        boolean boolean24 = mongoClientOptions7.equals((java.lang.Object) builder17);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4377");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        boolean boolean6 = mongoProperties0.hasCustomAddress();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str10 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "hi!";
        boolean boolean13 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4378");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.String str14 = mongoProperties0.getUsername();
        java.lang.String str15 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test4379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4379");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4380");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        char[] charArray7 = null;
        mongoProperties0.password = charArray7;
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str11 = mongoProperties0.authenticationDatabase;
        mongoProperties0.port = 20000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test4381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4381");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean16 = mongoClientOptions7.isAutoConnectRetry();
        int int17 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test4382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4382");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        long long35 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        int int36 = mongoClientOptions33.getMinHeartbeatFrequency();
        int int37 = mongoClientOptions33.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder23.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test4383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4383");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (short) 10);
        java.lang.Class<?> wildcardClass27 = builder26.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4384");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getSocketTimeout();
        int int27 = mongoClientOptions25.getHeartbeatThreadCount();
        int int28 = mongoClientOptions25.getHeartbeatThreadCount();
        java.lang.String str29 = mongoClientOptions25.getRequiredReplicaSetName();
        int int30 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int32 = mongoClientOptions25.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions25);
        int int34 = mongoClientOptions25.getHeartbeatConnectRetryFrequency();
        int int35 = mongoClientOptions25.getSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test4385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4385");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str13 = mongoClientOptions7.toString();
        int int14 = mongoClientOptions7.getConnectTimeout();
        int int15 = mongoClientOptions7.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions7.getSocketFactory();
        boolean boolean17 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4386");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4387");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.setUri("");
        java.lang.Integer int9 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test4388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4388");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions40.getSocketFactory();
        long long42 = mongoClientOptions40.getMaxAutoConnectRetryTime();
        int int43 = mongoClientOptions40.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions40.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder30.dbEncoderFactory(dBEncoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder51.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getHeartbeatSocketTimeout();
        int int73 = mongoClientOptions71.getHeartbeatFrequency();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        int int75 = mongoClientOptions71.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions71.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory77 = mongoClientOptions71.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder59.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder46.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder25.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder82 = builder25.heartbeatThreadCount(5000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 500 + "'", int43 == 500);
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5000 + "'", int73 == 5000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 120000 + "'", int75 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(dBDecoderFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test4389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4389");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.username = "";
        java.lang.Integer int9 = mongoProperties0.port;
        char[] charArray10 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test4390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4390");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder8.writeConcern(writeConcern23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatConnectRetryFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4391");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUsername();
        mongoProperties0.setUri("hi!");
        java.lang.String str7 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4392");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatSocketTimeout();
        int int33 = mongoClientOptions31.getHeartbeatFrequency();
        boolean boolean34 = mongoClientOptions31.isSocketKeepAlive();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions31.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder23.dbDecoderFactory(dBDecoderFactory36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.dbDecoderFactory(dBDecoderFactory36);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatThreadCount((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5000 + "'", int33 == 5000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test4393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4393");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions10.getWriteConcern();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        int int15 = mongoClientOptions10.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4394");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setHost("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        java.lang.String str12 = mongoProperties0.username;
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties0.determinePort(environment13);
        mongoProperties0.gridFsDatabase = "test";
        java.lang.String str17 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
    }

    @Test
    public void test4395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4395");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.port = 52;
        char[] charArray10 = mongoProperties0.getPassword();
        java.lang.String str11 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4396");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        mongoProperties7.port = 10;
        mongoProperties7.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties7.createMongoClient(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties7.createMongoClient(mongoClientOptions23, environment24);
        java.lang.String str26 = mongoProperties7.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.MongoClient mongoClient35 = mongoProperties7.createMongoClient(mongoClientOptions34);
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions34);
        java.lang.String str37 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str39 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test4397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4397");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.uri = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4398");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties0.getUsername();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4399");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        int int30 = mongoClientOptions27.getHeartbeatFrequency();
        int int31 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        long long32 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions27);
        java.lang.Class<?> wildcardClass34 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions42.getSocketFactory();
        long long44 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        int int45 = mongoClientOptions42.getMinHeartbeatFrequency();
        int int46 = mongoClientOptions42.getHeartbeatConnectTimeout();
        int int47 = mongoClientOptions42.getConnectTimeout();
        int int48 = mongoClientOptions42.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions42);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 500 + "'", int45 == 500);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(mongoClient50);
    }

    @Test
    public void test4400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4400");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.String str5 = mongoProperties0.database;
        mongoProperties0.host = "";
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 10000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4401");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        java.lang.String str14 = mongoProperties10.uri;
        mongoProperties10.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getLocalThreshold();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxWaitTime(52);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4402");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.maxWaitTime(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4403");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 52);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getSocketTimeout();
        int int22 = mongoClientOptions20.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions20.getReadPreference();
        int int24 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions20);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mongoClient25);
    }

    @Test
    public void test4404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4404");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        mongoProperties8.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.host = "hi!";
        int int18 = mongoProperties14.getDEFAULT_PORT();
        mongoProperties14.host = "";
        mongoProperties14.setHost("hi!");
        char[] charArray27 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties14.setPassword(charArray27);
        char[] charArray29 = mongoProperties14.password;
        mongoProperties8.setPassword(charArray29);
        mongoProperties0.setPassword(charArray29);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        boolean boolean34 = mongoProperties32.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        com.mongodb.MongoClient mongoClient43 = mongoProperties32.createMongoClient(mongoClientOptions42);
        java.lang.String str44 = mongoClientOptions42.getDescription();
        int int45 = mongoClientOptions42.getSocketTimeout();
        com.mongodb.MongoClient mongoClient46 = mongoProperties0.createMongoClient(mongoClientOptions42);
        java.lang.String str47 = mongoClientOptions42.getDescription();
        int int48 = mongoClientOptions42.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 27017 + "'", int18 == 27017);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
    }

    @Test
    public void test4405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4405");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.setPort((java.lang.Integer) 120000);
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test4406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4406");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectRetryFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test4407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4407");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        char[] charArray13 = mongoProperties0.password;
        java.lang.String str14 = mongoProperties0.getUsername();
        mongoProperties0.username = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4408");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.username;
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4409");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.port = 52;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        int int14 = mongoProperties10.getDEFAULT_PORT();
        mongoProperties10.host = "";
        mongoProperties10.setHost("hi!");
        char[] charArray23 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties10.setPassword(charArray23);
        char[] charArray25 = mongoProperties10.getPassword();
        mongoProperties0.setPassword(charArray25);
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray29 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , a, a, 4]");
    }

    @Test
    public void test4410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4410");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.Integer int7 = mongoProperties0.port;
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test4411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4411");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        long long15 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int16 = mongoClientOptions14.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions14.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions14.getDbDecoderFactory();
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions14.getSocketFactory();
        int int22 = mongoClientOptions14.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
    }

    @Test
    public void test4412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4412");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.maxConnectionIdleTime(100);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4413");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime(0);
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) builder25);
        int int31 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions7.isSocketKeepAlive();
        int int33 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test4414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4414");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime(1L);
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.maxConnectionLifeTime((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4415");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder2.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
    }

    @Test
    public void test4416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4416");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass17;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str23 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int24 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test4417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4417");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str10 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4418");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean15 = mongoClientOptions13.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory16 = mongoClientOptions13.getSocketFactory();
        int int17 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions13);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions13.getSocketFactory();
        int int23 = mongoClientOptions13.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
    }

    @Test
    public void test4419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4419");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions27);
        int int29 = mongoClientOptions27.getSocketTimeout();
        boolean boolean30 = mongoClientOptions27.isAutoConnectRetry();
        boolean boolean31 = mongoClientOptions27.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test4420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4420");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions36);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        boolean boolean47 = mongoClientOptions46.isSocketKeepAlive();
        boolean boolean48 = mongoClientOptions46.isSocketKeepAlive();
        int int49 = mongoClientOptions46.getHeartbeatThreadCount();
        int int50 = mongoClientOptions46.getMaxConnectionLifeTime();
        int int51 = mongoClientOptions46.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties0.builder(mongoClientOptions46);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        int int56 = mongoClientOptions55.getLocalThreshold();
        int int57 = mongoClientOptions55.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 500 + "'", int57 == 500);
    }

    @Test
    public void test4421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4421");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        java.lang.String str16 = mongoClientOptions15.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
    }

    @Test
    public void test4422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4422");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        javax.net.SocketFactory socketFactory61 = mongoClientOptions60.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder52.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder43.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder32.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder65 = builder11.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder66 = builder10.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        com.mongodb.MongoClientOptions.Builder builder69 = builder66.maxAutoConnectRetryTime((long) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder66.heartbeatConnectRetryFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(socketFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test4423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4423");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4424");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4425");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions7.getReadPreference();
        boolean boolean13 = mongoClientOptions7.isSocketKeepAlive();
        int int14 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test4426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4426");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions15, environment18);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions15.getSocketFactory();
        int int21 = mongoClientOptions15.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions15.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions15.getDbDecoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
    }

    @Test
    public void test4427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4427");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions29.getHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        int int33 = mongoClientOptions29.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getSocketTimeout();
        int int46 = mongoClientOptions44.getHeartbeatThreadCount();
        int int47 = mongoClientOptions44.getHeartbeatThreadCount();
        java.lang.String str48 = mongoClientOptions44.getRequiredReplicaSetName();
        int int49 = mongoClientOptions44.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions44.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions44.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder52 = builder36.readPreference(readPreference51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test4428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4428");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.maxWaitTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4429");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        java.lang.String str23 = mongoClientOptions21.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
    }

    @Test
    public void test4430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4430");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.acceptableLatencyDifference(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4431");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties7.getGridFsDatabase();
        mongoProperties7.port = 5000;
        java.lang.Class<?> wildcardClass13 = mongoProperties7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        boolean boolean15 = mongoProperties0.hasCustomAddress();
        mongoProperties0.port = 52;
        mongoProperties0.database = "hi!";
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4432");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatThreadCount(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4433");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        mongoProperties7.port = 10;
        mongoProperties7.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties7.createMongoClient(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties7.createMongoClient(mongoClientOptions23, environment24);
        java.lang.String str26 = mongoProperties7.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.MongoClient mongoClient35 = mongoProperties7.createMongoClient(mongoClientOptions34);
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions34);
        int int37 = mongoClientOptions34.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions34.getWriteConcern();
        int int39 = mongoClientOptions34.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
    }

    @Test
    public void test4434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4434");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4435");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.database;
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test4436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4436");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions11.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
    }

    @Test
    public void test4437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4437");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatConnectTimeout((int) (short) 10);
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) builder26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions48.getSocketFactory();
        long long50 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        int int51 = mongoClientOptions48.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions48.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder38.dbEncoderFactory(dBEncoderFactory53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder31.dbEncoderFactory(dBEncoderFactory53);
        com.mongodb.MongoClientOptions.Builder builder57 = builder31.maxConnectionIdleTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4438");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinConnectionsPerHost();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
    }

    @Test
    public void test4439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4439");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        java.lang.String str19 = mongoProperties0.getDatabase();
        boolean boolean20 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test4440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4440");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder8.writeConcern(writeConcern23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatSocketTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test4441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4441");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        java.lang.String str13 = mongoClientOptions7.toString();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4442");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions7.getMinConnectionsPerHost();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        int int15 = mongoClientOptions7.getMaxWaitTime();
        java.lang.String str16 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4443");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.String str11 = mongoProperties0.host;
        mongoProperties0.username = "";
        mongoProperties0.port = 5;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test4444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4444");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder0.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold(120000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4445");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4446");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions23.getSocketFactory();
        long long25 = mongoClientOptions23.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions23.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions23.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions23.getDbEncoderFactory();
        int int29 = mongoClientOptions23.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions23.getAcceptableLatencyDifference();
        int int31 = mongoClientOptions23.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder15.socketFactory(socketFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.build();
        int int60 = mongoClientOptions59.getHeartbeatSocketTimeout();
        int int61 = mongoClientOptions59.getHeartbeatFrequency();
        boolean boolean62 = mongoClientOptions59.isSocketKeepAlive();
        int int63 = mongoClientOptions59.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern64 = mongoClientOptions59.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder65 = builder45.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder42.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder15.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder6.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("");
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.threadsAllowedToBlockForConnectionMultiplier(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5000 + "'", int61 == 5000);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 120000 + "'", int63 == 120000);
        org.junit.Assert.assertNotNull(writeConcern64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test4447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4447");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions15, environment18);
        mongoProperties0.database = "";
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
    }

    @Test
    public void test4448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4448");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean14 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
    }

    @Test
    public void test4449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4449");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getLocalThreshold();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        int int16 = mongoClientOptions7.getMaxWaitTime();
        int int17 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test4450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4450");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.readPreference(readPreference17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        javax.net.SocketFactory socketFactory55 = mongoClientOptions54.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder46.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder67.build();
        long long71 = mongoClientOptions70.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern72 = mongoClientOptions70.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder62.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder18.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions.Builder builder76 = builder18.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(socketFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertNotNull(writeConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test4451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4451");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.authenticationDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
    }

    @Test
    public void test4452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4452");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str11 = mongoProperties0.authenticationDatabase;
        java.lang.String str12 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4453");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        mongoProperties22.host = "hi!";
        java.lang.String str26 = mongoProperties22.uri;
        boolean boolean27 = mongoProperties22.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        boolean boolean30 = mongoProperties28.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        com.mongodb.MongoClient mongoClient39 = mongoProperties28.createMongoClient(mongoClientOptions38);
        int int40 = mongoClientOptions38.getMaxWaitTime();
        java.lang.String str41 = mongoClientOptions38.toString();
        com.mongodb.MongoClient mongoClient42 = mongoProperties22.createMongoClient(mongoClientOptions38);
        java.lang.Class<?> wildcardClass43 = mongoClientOptions38.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass43;
        org.springframework.core.env.Environment environment45 = null;
        int int46 = mongoProperties0.determinePort(environment45);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
    }

    @Test
    public void test4454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4454");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions.Builder builder1 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.build();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions8.getSocketFactory();
        long long10 = mongoClientOptions8.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions8.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions8.getWriteConcern();
        int int13 = mongoClientOptions8.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions8);
        mongoProperties0.port = 52;
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(mongoClient14);
    }

    @Test
    public void test4455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4455");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        boolean boolean16 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test4456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4456");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getConnectionsPerHost();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test4457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4457");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatSocketTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder18.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder18.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder18.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder18.acceptableLatencyDifference(97);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions44.getDbEncoderFactory();
        long long47 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        int int48 = mongoClientOptions44.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str49 = mongoClientOptions44.getRequiredReplicaSetName();
        int int50 = mongoClientOptions44.getConnectTimeout();
        java.lang.String str51 = mongoClientOptions44.toString();
        boolean boolean52 = mongoClientOptions44.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions44.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions44.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory55 = mongoClientOptions44.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder36.dbDecoderFactory(dBDecoderFactory55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder8.dbDecoderFactory(dBDecoderFactory55);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(dBDecoderFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4458");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.String str11 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4459");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions7.getConnectionsPerHost();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4460");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test4461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4461");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime(97);
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder29 = builder24.heartbeatSocketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4462");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        boolean boolean15 = mongoProperties13.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.MongoClient mongoClient24 = mongoProperties13.createMongoClient(mongoClientOptions23);
        char[] charArray25 = mongoProperties13.getPassword();
        mongoProperties13.clearPassword();
        mongoProperties13.gridFsDatabase = "hi!";
        java.lang.String str29 = mongoProperties13.database;
        mongoProperties13.setUsername("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        mongoProperties32.setUri("mongodb://localhost/test");
        java.lang.String str38 = mongoProperties32.getHost();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties32.createMongoClient(mongoClientOptions46, environment47);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass50 = mongoProperties49.fieldNamingStrategy;
        mongoProperties49.host = "hi!";
        int int53 = mongoProperties49.getDEFAULT_PORT();
        mongoProperties49.host = "";
        mongoProperties49.setHost("hi!");
        java.lang.String str58 = mongoProperties49.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass60 = mongoProperties59.fieldNamingStrategy;
        java.lang.String str61 = mongoProperties59.getAuthenticationDatabase();
        boolean boolean62 = mongoProperties59.hasCustomCredentials();
        boolean boolean63 = mongoProperties59.hasCustomAddress();
        java.lang.String str64 = mongoProperties59.uri;
        mongoProperties59.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties67 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass68 = mongoProperties67.fieldNamingStrategy;
        java.lang.String str69 = mongoProperties67.getAuthenticationDatabase();
        char[] charArray70 = mongoProperties67.getPassword();
        mongoProperties67.host = "hi!";
        mongoProperties67.setUsername("hi!");
        char[] charArray76 = new char[] { '4' };
        mongoProperties67.password = charArray76;
        mongoProperties59.setPassword(charArray76);
        mongoProperties49.setPassword(charArray76);
        java.lang.Class<?> wildcardClass80 = mongoProperties49.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties81 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass82 = mongoProperties81.fieldNamingStrategy;
        mongoProperties81.host = "hi!";
        int int85 = mongoProperties81.getDEFAULT_PORT();
        mongoProperties81.host = "";
        mongoProperties81.setHost("hi!");
        char[] charArray94 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties81.setPassword(charArray94);
        mongoProperties49.password = charArray94;
        mongoProperties32.setPassword(charArray94);
        mongoProperties13.setPassword(charArray94);
        mongoProperties0.setPassword(charArray94);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(charArray25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 27017 + "'", int53 == 27017);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "mongodb://localhost/test" + "'", str64, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(charArray70);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4]");
        org.junit.Assert.assertNull(wildcardClass80);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 27017 + "'", int85 == 27017);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[ , a, a, 4]");
    }

    @Test
    public void test4463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4463");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getLocalThreshold();
        boolean boolean14 = mongoClientOptions10.isSocketKeepAlive();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4464");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.heartbeatThreadCount((int) (byte) 10);
        boolean boolean31 = mongoClientOptions14.equals((java.lang.Object) (byte) 10);
        int int32 = mongoClientOptions14.getHeartbeatConnectTimeout();
        java.lang.String str33 = mongoClientOptions14.getDescription();
        long long34 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
    }

    @Test
    public void test4465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4465");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions7.getDbEncoderFactory();
        long long17 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test4466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4466");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        java.lang.String str9 = mongoProperties0.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        int int14 = mongoProperties10.getDEFAULT_PORT();
        mongoProperties10.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass19 = mongoProperties17.getFieldNamingStrategy();
        mongoProperties17.port = 10;
        mongoProperties17.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties17.createMongoClient(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties17.createMongoClient(mongoClientOptions33, environment34);
        java.lang.String str36 = mongoProperties17.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClient mongoClient45 = mongoProperties17.createMongoClient(mongoClientOptions44);
        com.mongodb.MongoClient mongoClient46 = mongoProperties10.createMongoClient(mongoClientOptions44);
        int int47 = mongoClientOptions44.getAcceptableLatencyDifference();
        int int48 = mongoClientOptions44.getHeartbeatFrequency();
        int int49 = mongoClientOptions44.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties0.builder(mongoClientOptions44);
        boolean boolean51 = mongoClientOptions44.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5000 + "'", int48 == 5000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test4467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4467");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.username;
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setUri("");
        mongoProperties0.database = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test4468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4468");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        int int12 = mongoClientOptions7.getConnectionsPerHost();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test4469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4469");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatThreadCount((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        int int65 = mongoClientOptions64.getHeartbeatSocketTimeout();
        int int66 = mongoClientOptions64.getHeartbeatFrequency();
        boolean boolean67 = mongoClientOptions64.isSocketKeepAlive();
        int int68 = mongoClientOptions64.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory69 = mongoClientOptions64.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder70 = builder56.dbDecoderFactory(dBDecoderFactory69);
        com.mongodb.MongoClientOptions.Builder builder71 = builder47.dbDecoderFactory(dBDecoderFactory69);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder47.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions72.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder34.dbDecoderFactory(dBDecoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder25.dbDecoderFactory(dBDecoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder14.dbDecoderFactory(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5000 + "'", int66 == 5000);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 120000 + "'", int68 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test4470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4470");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4471");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.String str7 = mongoProperties0.host;
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int10 = mongoProperties0.port;
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.String str15 = mongoProperties13.getAuthenticationDatabase();
        char[] charArray16 = mongoProperties13.getPassword();
        mongoProperties13.host = "hi!";
        java.lang.String str19 = mongoProperties13.authenticationDatabase;
        java.lang.String str20 = mongoProperties13.getHost();
        mongoProperties13.host = "hi!";
        java.lang.String str23 = mongoProperties13.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        java.lang.String str26 = mongoProperties24.getAuthenticationDatabase();
        char[] charArray27 = mongoProperties24.getPassword();
        mongoProperties24.host = "hi!";
        mongoProperties24.setUsername("hi!");
        char[] charArray33 = new char[] { '4' };
        mongoProperties24.password = charArray33;
        mongoProperties13.password = charArray33;
        mongoProperties0.setPassword(charArray33);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(charArray27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4]");
    }

    @Test
    public void test4472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4472");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.acceptableLatencyDifference(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) 5);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        boolean boolean15 = mongoProperties13.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.MongoClient mongoClient24 = mongoProperties13.createMongoClient(mongoClientOptions23);
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions23.getDbEncoderFactory();
        int int26 = mongoClientOptions23.getConnectTimeout();
        int int27 = mongoClientOptions23.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.writeConcern(writeConcern28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder10.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4473");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
    }

    @Test
    public void test4474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4474");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        int int12 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str13 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4475");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minConnectionsPerHost(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4476");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        int int14 = mongoClientOptions7.getHeartbeatFrequency();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        int int16 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4477");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        char[] charArray12 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties0.determinePort(environment15);
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
    }

    @Test
    public void test4478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4478");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str25 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass26 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass29 = mongoProperties27.getFieldNamingStrategy();
        mongoProperties27.port = 10;
        java.lang.String str32 = mongoProperties27.getAuthenticationDatabase();
        java.lang.String str33 = mongoProperties27.getUsername();
        java.lang.String str34 = mongoProperties27.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatFrequency((int) (short) 10);
        java.lang.Class<?> wildcardClass52 = builder47.getClass();
        mongoProperties27.fieldNamingStrategy = wildcardClass52;
        mongoProperties0.fieldNamingStrategy = wildcardClass52;
        mongoProperties0.setPort((java.lang.Integer) 5000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test4479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4479");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions23.getSocketFactory();
        long long25 = mongoClientOptions23.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions23.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions23.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions23.isCursorFinalizerEnabled();
        int int29 = mongoClientOptions23.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions23, environment30);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNotNull(mongoClient31);
    }

    @Test
    public void test4480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4480");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean14 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        boolean boolean17 = mongoClientOptions7.isSocketKeepAlive();
        int int18 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test4481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4481");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        mongoProperties0.port = 100;
        java.lang.String str29 = mongoProperties0.getGridFsDatabase();
        java.lang.String str30 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test4482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4482");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.socketFactory(socketFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4483");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        int int6 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.port = 0;
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
    }

    @Test
    public void test4484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4484");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.acceptableLatencyDifference(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.localThreshold(35);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionLifeTime((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4485");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxAutoConnectRetryTime((long) 20000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4486");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder7.socketFactory(socketFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder7.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder7.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder7.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder7.acceptableLatencyDifference(97);
        com.mongodb.MongoClientOptions.Builder builder27 = builder7.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder7.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionLifeTime(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4487");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions9.getDescription();
        int int12 = mongoClientOptions9.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
    }

    @Test
    public void test4488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4488");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getHeartbeatThreadCount();
        int int13 = mongoClientOptions7.getSocketTimeout();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        long long25 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        java.lang.String str26 = mongoClientOptions22.toString();
        int int27 = mongoClientOptions22.getMaxWaitTime();
        boolean boolean28 = mongoClientOptions22.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions22.getReadPreference();
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) readPreference29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4489");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatFrequency();
        boolean boolean18 = mongoClientOptions15.isSocketKeepAlive();
        int int19 = mongoClientOptions15.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions15.getSocketFactory();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions15.getReadPreference();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions15, environment22);
        java.lang.Integer int24 = mongoProperties0.port;
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test4490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4490");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        int int19 = mongoClientOptions16.getConnectTimeout();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions16.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions30.getSocketFactory();
        long long32 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        int int33 = mongoClientOptions30.getMinHeartbeatFrequency();
        long long34 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        int int35 = mongoClientOptions30.getMaxConnectionLifeTime();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions30);
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions30.getReadPreference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNotNull(readPreference37);
    }

    @Test
    public void test4491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4491");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectionsPerHost(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions29.getSocketFactory();
        long long31 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions29.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions53.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder45.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions67.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder69 = builder59.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder36.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder76 = builder70.maxConnectionIdleTime(35);
        com.mongodb.MongoClientOptions.Builder builder78 = builder70.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test4492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4492");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getMaxWaitTime();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions16.getSocketFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions16, environment20);
        java.lang.String str22 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test4493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4493");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        char[] charArray9 = mongoProperties0.password;
        mongoProperties0.port = 0;
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test4494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4494");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.connectTimeout(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4495");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.maxConnectionLifeTime(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4496");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        int int10 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int11 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        boolean boolean20 = mongoClientOptions19.isSocketKeepAlive();
        boolean boolean21 = mongoClientOptions19.isSocketKeepAlive();
        int int22 = mongoClientOptions19.getHeartbeatThreadCount();
        int int23 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int24 = mongoClientOptions19.getLocalThreshold();
        int int25 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions19.getWriteConcern();
        int int27 = mongoClientOptions19.getHeartbeatConnectTimeout();
        long long28 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions19.getWriteConcern();
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions19);
        boolean boolean31 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test4497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4497");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder43 = builder35.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder45 = builder35.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass54 = mongoProperties53.fieldNamingStrategy;
        boolean boolean55 = mongoProperties53.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        com.mongodb.MongoClient mongoClient64 = mongoProperties53.createMongoClient(mongoClientOptions63);
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder46.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder45.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder32.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder25.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder70 = builder8.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder78 = builder74.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test4498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4498");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4499");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference(1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionLifeTime(97);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder31.build();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("");
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getLocalThreshold();
        javax.net.SocketFactory socketFactory73 = mongoClientOptions71.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder63.socketFactory(socketFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder48.socketFactory(socketFactory73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder31.socketFactory(socketFactory73);
        com.mongodb.MongoClientOptions.Builder builder77 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder81.build();
        javax.net.SocketFactory socketFactory85 = mongoClientOptions84.getSocketFactory();
        long long86 = mongoClientOptions84.getMaxAutoConnectRetryTime();
        int int87 = mongoClientOptions84.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory88 = mongoClientOptions84.getDbDecoderFactory();
        boolean boolean89 = mongoClientOptions84.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory90 = mongoClientOptions84.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder91 = builder31.dbEncoderFactory(dBEncoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder16.dbEncoderFactory(dBEncoderFactory90);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertNotNull(socketFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertNotNull(socketFactory85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 20000 + "'", int87 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test4500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4500");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }
}

