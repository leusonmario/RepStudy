import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.port = 5;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        mongoProperties8.authenticationDatabase = "";
        java.lang.String str14 = mongoProperties8.database;
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        int int25 = mongoClientOptions22.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient26 = mongoProperties8.createMongoClient(mongoClientOptions22);
        boolean boolean27 = mongoClientOptions22.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties0.builder(mongoClientOptions22);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectionsPerHost(10000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        int int20 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions14.getSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions14.getDbEncoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.gridFsDatabase = "test";
        java.lang.String str9 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean19 = mongoClientOptions17.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        int int21 = mongoClientOptions17.getConnectionsPerHost();
        int int22 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions17);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(mongoClient24);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getSocketTimeout();
        java.lang.String str14 = mongoClientOptions7.getDescription();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions7.getConnectTimeout();
        int int18 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.uri;
        java.lang.String str4 = mongoProperties0.gridFsDatabase;
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        boolean boolean6 = mongoProperties0.hasCustomCredentials();
        char[] charArray7 = mongoProperties0.password;
        java.lang.String str8 = mongoProperties0.database;
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.port = 10000;
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime(35);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions29.getReadPreference();
        int int31 = mongoClientOptions29.getAcceptableLatencyDifference();
        java.lang.String str32 = mongoClientOptions29.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder20.dbEncoderFactory(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoClientOptions16.getDescription();
        java.lang.String str20 = mongoClientOptions16.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getLocalThreshold();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        java.lang.String str14 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectRetryFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatThreadCount(97);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.minConnectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        java.lang.String str8 = mongoProperties6.getAuthenticationDatabase();
        mongoProperties6.setPort((java.lang.Integer) (-1));
        mongoProperties6.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        mongoProperties13.host = "hi!";
        mongoProperties13.setUri("mongodb://localhost/test");
        mongoProperties13.authenticationDatabase = "test";
        mongoProperties13.authenticationDatabase = "";
        java.lang.String str23 = mongoProperties13.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        mongoProperties24.host = "hi!";
        mongoProperties24.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass31 = mongoProperties30.fieldNamingStrategy;
        mongoProperties30.host = "hi!";
        int int34 = mongoProperties30.getDEFAULT_PORT();
        mongoProperties30.host = "";
        mongoProperties30.setHost("hi!");
        char[] charArray43 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties30.setPassword(charArray43);
        char[] charArray45 = mongoProperties30.password;
        mongoProperties24.setPassword(charArray45);
        mongoProperties13.password = charArray45;
        mongoProperties13.setUri("");
        char[] charArray50 = mongoProperties13.password;
        org.springframework.core.env.Environment environment51 = null;
        int int52 = mongoProperties13.determinePort(environment51);
        java.lang.String str53 = mongoProperties13.getHost();
        mongoProperties13.authenticationDatabase = "test";
        char[] charArray56 = mongoProperties13.password;
        mongoProperties6.password = charArray56;
        mongoProperties0.setPassword(charArray56);
        mongoProperties0.uri = "mongodb://localhost/test";
        char[] charArray61 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 27017 + "'", int34 == 27017);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 27017 + "'", int52 == 27017);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , a, a, 4]");
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass14 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties12.port = 10;
        mongoProperties12.database = "hi!";
        java.lang.String str19 = mongoProperties12.getUri();
        boolean boolean20 = mongoProperties12.hasCustomCredentials();
        java.lang.String str21 = mongoProperties12.authenticationDatabase;
        char[] charArray22 = mongoProperties12.getPassword();
        mongoProperties12.setPort((java.lang.Integer) 10000);
        boolean boolean25 = mongoClientOptions7.equals((java.lang.Object) 10000);
        javax.net.SocketFactory socketFactory26 = mongoClientOptions7.getSocketFactory();
        int int27 = mongoClientOptions7.getSocketTimeout();
        int int28 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        mongoProperties0.port = 500;
        java.lang.String str14 = mongoProperties0.uri;
        java.lang.String str15 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.Integer int14 = mongoProperties0.port;
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.Integer int17 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray20 = mongoProperties0.getPassword();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(charArray20);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        java.lang.Integer int4 = mongoProperties0.port;
        java.lang.Integer int5 = mongoProperties0.port;
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        java.lang.String str15 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str15 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int18 = mongoClientOptions14.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(readPreference16);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        int int15 = mongoClientOptions10.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions10.getDbEncoderFactory();
        int int17 = mongoClientOptions10.getLocalThreshold();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean14 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions7.isAutoConnectRetry();
        int int18 = mongoClientOptions7.getHeartbeatThreadCount();
        int int19 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        int int30 = mongoClientOptions27.getHeartbeatFrequency();
        int int31 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        long long32 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatConnectRetryFrequency((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass39 = mongoProperties38.fieldNamingStrategy;
        mongoProperties38.host = "hi!";
        java.lang.String str42 = mongoProperties38.uri;
        mongoProperties38.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getLocalThreshold();
        boolean boolean54 = mongoClientOptions52.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder55 = mongoProperties38.builder(mongoClientOptions52);
        com.mongodb.ReadPreference readPreference56 = mongoClientOptions52.getReadPreference();
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions52.getReadPreference();
        int int58 = mongoClientOptions52.getAcceptableLatencyDifference();
        int int59 = mongoClientOptions52.getMaxConnectionIdleTime();
        int int60 = mongoClientOptions52.getConnectTimeout();
        javax.net.SocketFactory socketFactory61 = mongoClientOptions52.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder37.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(readPreference56);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(socketFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a, a, 4]");
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        java.lang.String str12 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties13.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        long long27 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        boolean boolean28 = mongoClientOptions24.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties13.builder(mongoClientOptions24);
        int int30 = mongoClientOptions24.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions24.getDbDecoderFactory();
        int int32 = mongoClientOptions24.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties0.createMongoClient(mongoClientOptions24, environment33);
        mongoProperties0.host = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mongoClient34);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        int int30 = mongoClientOptions27.getHeartbeatFrequency();
        int int31 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        long long32 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatConnectTimeout((int) (short) 10);
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) builder26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.minHeartbeatFrequency(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        mongoProperties0.uri = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setHost("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        long long25 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions24.getMinConnectionsPerHost();
        boolean boolean27 = mongoClientOptions24.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions24.getDbDecoderFactory();
        long long29 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        int int30 = mongoClientOptions24.getHeartbeatThreadCount();
        int int31 = mongoClientOptions24.getMinHeartbeatFrequency();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions24);
            org.junit.Assert.fail("Expected exception of type com.mongodb.MongoException; message: host and port should be specified in host:port format");
        } catch (com.mongodb.MongoException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions10.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions10.getDbEncoderFactory();
        int int17 = mongoClientOptions10.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionLifeTime(100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder10.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.Class<?> wildcardClass25 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.uri = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str15 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.String str5 = mongoProperties0.database;
        mongoProperties0.host = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions15);
        mongoProperties0.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass21 = mongoProperties20.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass22 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.port = 10;
        mongoProperties20.database = "hi!";
        java.lang.String str27 = mongoProperties20.getUri();
        mongoProperties20.setPort((java.lang.Integer) 20000);
        java.lang.String str30 = mongoProperties20.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        int int35 = mongoProperties31.getDEFAULT_PORT();
        mongoProperties31.host = "";
        mongoProperties31.setHost("hi!");
        char[] charArray44 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties31.setPassword(charArray44);
        mongoProperties20.setPassword(charArray44);
        mongoProperties20.port = 100;
        char[] charArray49 = mongoProperties20.password;
        mongoProperties0.setPassword(charArray49);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean60 = mongoClientOptions58.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory61 = mongoClientOptions58.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory62 = mongoClientOptions58.getDbEncoderFactory();
        int int63 = mongoClientOptions58.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient64 = mongoProperties0.createMongoClient(mongoClientOptions58);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(socketFactory61);
        org.junit.Assert.assertNotNull(dBEncoderFactory62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(mongoClient64);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatThreadCount((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.Integer int14 = mongoProperties0.port;
        mongoProperties0.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        java.lang.String str26 = mongoClientOptions24.getRequiredReplicaSetName();
        int int27 = mongoClientOptions24.getMaxWaitTime();
        int int28 = mongoClientOptions24.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties0.builder(mongoClientOptions24);
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "hi!";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        java.lang.String str11 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions10.getSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.uri;
        java.lang.String str5 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties13.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        long long27 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        boolean boolean28 = mongoClientOptions24.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties13.builder(mongoClientOptions24);
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) mongoProperties13);
        int int31 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int32 = mongoClientOptions7.getLocalThreshold();
        int int33 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions17.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions17.getDbEncoderFactory();
        long long20 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions17.isAutoConnectRetry();
        int int24 = mongoClientOptions17.getLocalThreshold();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions17.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder9.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder9.minHeartbeatFrequency(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions7.getDbDecoderFactory();
        int int24 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str7 = mongoProperties0.database;
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getUri();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.String str17 = mongoProperties8.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        mongoProperties18.setUri("mongodb://localhost/test");
        mongoProperties18.authenticationDatabase = "test";
        mongoProperties18.authenticationDatabase = "";
        java.lang.String str28 = mongoProperties18.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass30 = mongoProperties29.fieldNamingStrategy;
        mongoProperties29.host = "hi!";
        mongoProperties29.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        mongoProperties35.host = "hi!";
        int int39 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.host = "";
        mongoProperties35.setHost("hi!");
        char[] charArray48 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties35.setPassword(charArray48);
        char[] charArray50 = mongoProperties35.password;
        mongoProperties29.setPassword(charArray50);
        mongoProperties18.password = charArray50;
        mongoProperties8.password = charArray50;
        mongoProperties0.setPassword(charArray50);
        java.lang.Class<?> wildcardClass55 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str56 = mongoProperties0.getHost();
        mongoProperties0.username = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions20.getConnectTimeout();
        boolean boolean23 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions20);
        int int24 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions7.getDbEncoderFactory();
        int int26 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str27 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        com.mongodb.MongoClientOptions.Builder builder19 = mongoProperties0.builder(mongoClientOptions18);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass21 = mongoProperties20.fieldNamingStrategy;
        mongoProperties20.host = "hi!";
        org.springframework.core.env.Environment environment24 = null;
        int int25 = mongoProperties20.determinePort(environment24);
        java.lang.String str26 = mongoProperties20.username;
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        boolean boolean36 = mongoClientOptions34.isSocketKeepAlive();
        int int37 = mongoClientOptions34.getHeartbeatThreadCount();
        int int38 = mongoClientOptions34.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties20.createMongoClient(mongoClientOptions34, environment39);
        java.lang.Class<?> wildcardClass41 = mongoProperties20.getFieldNamingStrategy();
        java.lang.Integer int42 = mongoProperties20.getPort();
        mongoProperties20.host = "";
        java.lang.String str45 = mongoProperties20.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass47 = mongoProperties46.fieldNamingStrategy;
        boolean boolean48 = mongoProperties46.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        com.mongodb.MongoClient mongoClient57 = mongoProperties46.createMongoClient(mongoClientOptions56);
        int int58 = mongoClientOptions56.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions56.getDbDecoderFactory();
        boolean boolean60 = mongoClientOptions56.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient61 = mongoProperties20.createMongoClient(mongoClientOptions56);
        mongoProperties20.setGridFsDatabase("");
        boolean boolean64 = mongoClientOptions18.equals((java.lang.Object) "");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27017 + "'", int25 == 27017);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 120000 + "'", int58 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.username = "test";
        int int6 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        mongoProperties15.host = "hi!";
        java.lang.String str19 = mongoProperties15.uri;
        mongoProperties15.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getLocalThreshold();
        boolean boolean31 = mongoClientOptions29.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties15.builder(mongoClientOptions29);
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions29.getReadPreference();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        int int35 = mongoClientOptions29.getAcceptableLatencyDifference();
        int int36 = mongoClientOptions29.getMaxConnectionIdleTime();
        int int37 = mongoClientOptions29.getConnectTimeout();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder12.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder12.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.maxConnectionIdleTime(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        mongoProperties0.uri = "";
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.username;
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(97);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.acceptableLatencyDifference((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.String str12 = mongoClientOptions10.getRequiredReplicaSetName();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions10.getMaxWaitTime();
        int int16 = mongoClientOptions10.getHeartbeatFrequency();
        int int17 = mongoClientOptions10.getHeartbeatSocketTimeout();
        java.lang.Object obj18 = null;
        boolean boolean19 = mongoClientOptions10.equals(obj18);
        int int20 = mongoClientOptions10.getConnectionsPerHost();
        int int21 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean15 = mongoClientOptions13.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory16 = mongoClientOptions13.getSocketFactory();
        int int17 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions29.getSocketFactory();
        long long31 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions29.getDbDecoderFactory();
        boolean boolean34 = mongoClientOptions29.isCursorFinalizerEnabled();
        int int35 = mongoClientOptions29.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions29);
        int int37 = mongoClientOptions29.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.Class<?> wildcardClass12 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getMaxWaitTime();
        java.lang.String str19 = mongoClientOptions16.toString();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout(97);
        java.lang.Class<?> wildcardClass30 = builder29.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass30;
        java.lang.String str32 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int33 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        mongoProperties15.host = "hi!";
        mongoProperties15.setUri("mongodb://localhost/test");
        mongoProperties15.authenticationDatabase = "test";
        mongoProperties15.authenticationDatabase = "";
        java.lang.String str25 = mongoProperties15.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass27 = mongoProperties26.fieldNamingStrategy;
        mongoProperties26.host = "hi!";
        mongoProperties26.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        int int36 = mongoProperties32.getDEFAULT_PORT();
        mongoProperties32.host = "";
        mongoProperties32.setHost("hi!");
        char[] charArray45 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties32.setPassword(charArray45);
        char[] charArray47 = mongoProperties32.password;
        mongoProperties26.setPassword(charArray47);
        mongoProperties15.password = charArray47;
        mongoProperties15.setUri("");
        char[] charArray52 = mongoProperties15.getPassword();
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        int int61 = mongoClientOptions60.getSocketTimeout();
        int int62 = mongoClientOptions60.getHeartbeatThreadCount();
        java.lang.String str63 = mongoClientOptions60.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient64 = mongoProperties15.createMongoClient(mongoClientOptions60);
        com.mongodb.ReadPreference readPreference65 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder66 = builder14.readPreference(readPreference65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.threadsAllowedToBlockForConnectionMultiplier(20000);
        java.lang.Class<?> wildcardClass71 = builder68.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 27017 + "'", int36 == 27017);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(readPreference65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean20 = mongoClientOptions18.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions18.getSocketFactory();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions18.getWriteConcern();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions18.getWriteConcern();
        int int28 = mongoClientOptions18.getConnectionsPerHost();
        int int29 = mongoClientOptions18.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions18, environment30);
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions18.getReadPreference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(readPreference32);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime(1L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.port = 100;
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.host = "hi!";
        java.lang.String str18 = mongoProperties14.uri;
        org.springframework.core.env.Environment environment19 = null;
        int int20 = mongoProperties14.determinePort(environment19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean30 = mongoClientOptions28.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory31 = mongoClientOptions28.getSocketFactory();
        int int32 = mongoClientOptions28.getMaxConnectionLifeTime();
        int int33 = mongoClientOptions28.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties14.builder(mongoClientOptions28);
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions28, environment35);
        int int37 = mongoClientOptions28.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("test");
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.host = "";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str15 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 35);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getLocalThreshold();
        boolean boolean17 = mongoClientOptions15.isCursorFinalizerEnabled();
        int int18 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions15.getDbDecoderFactory();
        int int20 = mongoClientOptions15.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions15.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions15.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int24 = mongoClientOptions15.getLocalThreshold();
        java.lang.String str25 = mongoClientOptions15.getDescription();
        int int26 = mongoClientOptions15.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean10 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions21.getSocketFactory();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties11.createMongoClient(mongoClientOptions21, environment23);
        java.lang.Integer int25 = mongoProperties11.port;
        java.lang.String str26 = mongoProperties11.database;
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) str26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        boolean boolean23 = mongoClientOptions14.equals((java.lang.Object) false);
        int int24 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions14);
        int int26 = mongoClientOptions14.getHeartbeatFrequency();
        java.lang.String str27 = mongoClientOptions14.getDescription();
        int int28 = mongoClientOptions14.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int30 = mongoClientOptions14.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        char[] charArray6 = mongoProperties0.password;
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int9 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.setUri("hi!");
        java.lang.String str12 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        int int10 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        java.lang.String str14 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        boolean boolean14 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder44 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder55 = builder47.heartbeatConnectRetryFrequency((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass57 = mongoProperties56.fieldNamingStrategy;
        mongoProperties56.host = "hi!";
        java.lang.String str60 = mongoProperties56.uri;
        mongoProperties56.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder67.build();
        int int71 = mongoClientOptions70.getLocalThreshold();
        boolean boolean72 = mongoClientOptions70.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder73 = mongoProperties56.builder(mongoClientOptions70);
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions70.getReadPreference();
        com.mongodb.ReadPreference readPreference75 = mongoClientOptions70.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder76 = builder55.readPreference(readPreference75);
        com.mongodb.MongoClientOptions.Builder builder77 = builder6.readPreference(readPreference75);
        com.mongodb.MongoClientOptions.Builder builder79 = builder6.acceptableLatencyDifference(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "mongodb://localhost/test" + "'", str60, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertNotNull(readPreference75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        char[] charArray12 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties0.determinePort(environment15);
        java.lang.Integer int17 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        int int13 = mongoClientOptions12.getLocalThreshold();
        boolean boolean14 = mongoClientOptions12.isCursorFinalizerEnabled();
        int int15 = mongoClientOptions12.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions12.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder2.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getSocketTimeout();
        int int27 = mongoClientOptions25.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder17.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout((int) (short) 1);
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass17;
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.autoConnectRetry(false);
        boolean boolean35 = mongoClientOptions26.equals((java.lang.Object) false);
        java.lang.String str36 = mongoClientOptions26.getDescription();
        int int37 = mongoClientOptions26.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties0.builder(mongoClientOptions26);
        int int39 = mongoClientOptions26.getHeartbeatConnectTimeout();
        int int40 = mongoClientOptions26.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions26.getDbDecoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime(97);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        boolean boolean14 = mongoClientOptions10.isAlwaysUseMBeans();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        long long16 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str18 = mongoClientOptions10.getRequiredReplicaSetName();
        int int19 = mongoClientOptions10.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.connectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.heartbeatThreadCount(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        int int12 = mongoClientOptions7.getHeartbeatFrequency();
        int int13 = mongoClientOptions7.getSocketTimeout();
        int int14 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        int int16 = mongoClientOptions7.getHeartbeatThreadCount();
        long long17 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        int int19 = mongoClientOptions17.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions12.getMaxWaitTime();
        boolean boolean15 = mongoClientOptions12.isAutoConnectRetry();
        int int16 = mongoClientOptions12.getMaxWaitTime();
        int int17 = mongoClientOptions12.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12);
        java.lang.String str19 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        int int16 = mongoClientOptions15.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        long long26 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        java.lang.String str27 = mongoClientOptions24.getRequiredReplicaSetName();
        int int28 = mongoClientOptions24.getLocalThreshold();
        int int29 = mongoClientOptions24.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions24.getHeartbeatConnectTimeout();
        boolean boolean32 = mongoClientOptions15.equals((java.lang.Object) mongoClientOptions24);
        int int33 = mongoClientOptions15.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions15.getWriteConcern();
        int int36 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        int int37 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold(35);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions13.getDbEncoderFactory();
        int int15 = mongoClientOptions13.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(socketFactory16);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str16 = mongoProperties10.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.autoConnectRetry(false);
        boolean boolean33 = mongoClientOptions24.equals((java.lang.Object) false);
        int int34 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        long long46 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        int int47 = mongoClientOptions44.getHeartbeatConnectTimeout();
        boolean boolean48 = mongoClientOptions24.equals((java.lang.Object) mongoClientOptions44);
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions44.getReadPreference();
        int int50 = mongoClientOptions44.getMinConnectionsPerHost();
        boolean boolean51 = mongoClientOptions44.isAutoConnectRetry();
        boolean boolean52 = mongoClientOptions44.isAutoConnectRetry();
        int int53 = mongoClientOptions44.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 120000 + "'", int53 == 120000);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.host;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.username = "";
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder8.acceptableLatencyDifference((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean16 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean20 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean14 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        int int16 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(readPreference17);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        mongoProperties12.host = "hi!";
        int int16 = mongoProperties12.getDEFAULT_PORT();
        mongoProperties12.host = "";
        java.lang.String str19 = mongoProperties12.uri;
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.connectTimeout((int) (short) 1);
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        mongoProperties12.fieldNamingStrategy = wildcardClass29;
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.autoConnectRetry(false);
        boolean boolean47 = mongoClientOptions38.equals((java.lang.Object) false);
        java.lang.String str48 = mongoClientOptions38.getDescription();
        int int49 = mongoClientOptions38.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties12.builder(mongoClientOptions38);
        mongoProperties12.database = "mongodb://localhost/test";
        mongoProperties12.setGridFsDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass55 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties0.fieldNamingStrategy = wildcardClass55;
        java.lang.String str57 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 500 + "'", int49 == 500);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        int int19 = mongoClientOptions17.getHeartbeatThreadCount();
        int int20 = mongoClientOptions17.getHeartbeatFrequency();
        int int21 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions17.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass25 = mongoProperties23.getFieldNamingStrategy();
        java.lang.String str26 = mongoProperties23.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions34.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions34.getDbEncoderFactory();
        long long37 = mongoClientOptions34.getMaxAutoConnectRetryTime();
        boolean boolean38 = mongoClientOptions34.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties23.builder(mongoClientOptions34);
        boolean boolean40 = mongoClientOptions17.equals((java.lang.Object) mongoProperties23);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions48.getSocketFactory();
        long long50 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        java.lang.String str51 = mongoClientOptions48.getRequiredReplicaSetName();
        int int52 = mongoClientOptions48.getLocalThreshold();
        int int53 = mongoClientOptions48.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder54 = mongoProperties23.builder(mongoClientOptions48);
        com.mongodb.MongoClient mongoClient55 = mongoProperties0.createMongoClient(mongoClientOptions48);
        mongoProperties0.setAuthenticationDatabase("hi!");
        boolean boolean58 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.port = 97;
        java.lang.String str61 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        int int11 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass31 = mongoProperties30.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass32 = mongoProperties30.getFieldNamingStrategy();
        mongoProperties30.port = 10;
        mongoProperties30.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties30.createMongoClient(mongoClientOptions37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties30.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder14.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder3.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder3.build();
        boolean boolean54 = mongoClientOptions53.isAutoConnectRetry();
        long long55 = mongoClientOptions53.getMaxAutoConnectRetryTime();
        int int56 = mongoClientOptions53.getSocketTimeout();
        int int57 = mongoClientOptions53.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        int int6 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        long long15 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str16 = mongoClientOptions7.toString();
        int int17 = mongoClientOptions7.getLocalThreshold();
        int int18 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int20 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        java.lang.String str4 = mongoProperties0.authenticationDatabase;
        int int5 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int38 = mongoClientOptions36.getHeartbeatFrequency();
        boolean boolean39 = mongoClientOptions36.isSocketKeepAlive();
        int int40 = mongoClientOptions36.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder28.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.dbDecoderFactory(dBDecoderFactory41);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions44.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder6.dbDecoderFactory(dBDecoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.username;
        java.lang.String str13 = mongoProperties10.uri;
        java.lang.String str14 = mongoProperties10.gridFsDatabase;
        java.lang.String str15 = mongoProperties10.getMongoClientDatabase();
        boolean boolean16 = mongoProperties10.hasCustomCredentials();
        int int17 = mongoProperties10.getDEFAULT_PORT();
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) mongoProperties10);
        java.lang.String str19 = mongoProperties10.getUsername();
        int int20 = mongoProperties10.getDEFAULT_PORT();
        java.lang.String str21 = mongoProperties10.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        mongoProperties22.host = "hi!";
        mongoProperties22.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean37 = mongoClientOptions35.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory38 = mongoClientOptions35.getSocketFactory();
        int int39 = mongoClientOptions35.getMaxConnectionLifeTime();
        int int40 = mongoClientOptions35.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions35.getWriteConcern();
        java.lang.String str42 = mongoClientOptions35.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder43 = mongoProperties22.builder(mongoClientOptions35);
        javax.net.SocketFactory socketFactory44 = mongoClientOptions35.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = mongoProperties10.builder(mongoClientOptions35);
        char[] charArray46 = mongoProperties10.getPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27017 + "'", int17 == 27017);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(charArray46);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.port = 5;
        java.lang.String str8 = mongoProperties0.host;
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions7.getReadPreference();
        int int18 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxConnectionIdleTime();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.Integer int8 = mongoProperties0.getPort();
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.host = "test";
        java.lang.String str14 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        long long25 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int26 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str27 = mongoClientOptions22.getRequiredReplicaSetName();
        boolean boolean28 = mongoClientOptions22.isAutoConnectRetry();
        int int29 = mongoClientOptions22.getLocalThreshold();
        int int30 = mongoClientOptions22.getHeartbeatFrequency();
        int int31 = mongoClientOptions22.getConnectTimeout();
        java.lang.String str32 = mongoClientOptions22.toString();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions22.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions55.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions55.getDbEncoderFactory();
        long long58 = mongoClientOptions55.getMaxAutoConnectRetryTime();
        int int59 = mongoClientOptions55.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str60 = mongoClientOptions55.getRequiredReplicaSetName();
        boolean boolean61 = mongoClientOptions55.isAutoConnectRetry();
        int int62 = mongoClientOptions55.getLocalThreshold();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions55.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder45.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder34.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder67 = builder34.socketTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder22 = builder2.writeConcern(writeConcern21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass53 = mongoProperties52.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass54 = mongoProperties52.getFieldNamingStrategy();
        mongoProperties52.port = 10;
        mongoProperties52.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties52.createMongoClient(mongoClientOptions59);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties52.createMongoClient(mongoClientOptions68, environment69);
        com.mongodb.DBEncoderFactory dBEncoderFactory71 = mongoClientOptions68.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder45.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder36.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder74 = builder25.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder25.build();
        int int76 = mongoClientOptions75.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment77 = null;
        com.mongodb.MongoClient mongoClient78 = mongoProperties0.createMongoClient(mongoClientOptions75, environment77);
        int int79 = mongoClientOptions75.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern80 = mongoClientOptions75.getWriteConcern();
        int int81 = mongoClientOptions75.getConnectTimeout();
        javax.net.SocketFactory socketFactory82 = mongoClientOptions75.getSocketFactory();
        com.mongodb.ReadPreference readPreference83 = mongoClientOptions75.getReadPreference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertNotNull(dBEncoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(mongoClient78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 120000 + "'", int79 == 120000);
        org.junit.Assert.assertNotNull(writeConcern80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10000 + "'", int81 == 10000);
        org.junit.Assert.assertNotNull(socketFactory82);
        org.junit.Assert.assertNotNull(readPreference83);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.Integer int9 = mongoProperties0.getPort();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minConnectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str14 = mongoClientOptions7.toString();
        boolean boolean15 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str16 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        int int5 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.port = 52;
        java.lang.String str10 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass37 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.port = 10;
        mongoProperties35.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties35.createMongoClient(mongoClientOptions42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties35.createMongoClient(mongoClientOptions51, environment52);
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions51.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder28.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder19.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder8.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder57.connectionsPerHost(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions14.getReadPreference();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        int int20 = mongoClientOptions14.getAcceptableLatencyDifference();
        int int21 = mongoClientOptions14.getMaxConnectionIdleTime();
        int int22 = mongoClientOptions14.getLocalThreshold();
        java.lang.String str23 = mongoClientOptions14.toString();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions14.getSocketFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(socketFactory24);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions13, environment18);
        int int20 = mongoClientOptions13.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        int int12 = mongoClientOptions11.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions11.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = mongoProperties0.builder(mongoClientOptions11);
        javax.net.SocketFactory socketFactory15 = mongoClientOptions11.getSocketFactory();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions11.getSocketFactory();
        int int17 = mongoClientOptions11.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions11.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatConnectRetryFrequency((int) ' ');
        boolean boolean38 = mongoClientOptions11.equals((java.lang.Object) builder33);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder33.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray9 = mongoProperties0.password;
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        int int10 = mongoClientOptions9.getConnectionsPerHost();
        int int11 = mongoClientOptions9.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        int int30 = mongoClientOptions27.getHeartbeatFrequency();
        int int31 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        long long32 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions27);
        java.lang.Class<?> wildcardClass34 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        java.lang.String str37 = mongoProperties35.getAuthenticationDatabase();
        mongoProperties35.database = "mongodb://localhost/test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass41 = mongoProperties40.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass42 = mongoProperties40.getFieldNamingStrategy();
        mongoProperties40.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass45 = mongoProperties40.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass55 = builder54.getClass();
        mongoProperties40.fieldNamingStrategy = wildcardClass55;
        mongoProperties35.fieldNamingStrategy = wildcardClass55;
        java.lang.Class<?> wildcardClass58 = mongoProperties35.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass60 = mongoProperties59.fieldNamingStrategy;
        mongoProperties59.host = "hi!";
        int int63 = mongoProperties59.getDEFAULT_PORT();
        mongoProperties59.host = "";
        mongoProperties59.setHost("hi!");
        char[] charArray72 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties59.setPassword(charArray72);
        char[] charArray74 = mongoProperties59.password;
        mongoProperties35.password = charArray74;
        mongoProperties0.setPassword(charArray74);
        java.lang.String str77 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 27017 + "'", int63 == 27017);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[ , a, a, 4]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "test" + "'", str77, "test");
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        int int9 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray22 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        boolean boolean25 = mongoProperties23.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        com.mongodb.MongoClient mongoClient34 = mongoProperties23.createMongoClient(mongoClientOptions33);
        int int35 = mongoClientOptions33.getMaxWaitTime();
        int int36 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions33.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties0.builder(mongoClientOptions33);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getSocketTimeout();
        int int49 = mongoClientOptions47.getHeartbeatThreadCount();
        java.lang.String str50 = mongoClientOptions47.getRequiredReplicaSetName();
        java.lang.String str51 = mongoClientOptions47.toString();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties0.builder(mongoClientOptions47);
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions47.getDbEncoderFactory();
        boolean boolean54 = mongoClientOptions47.isSocketKeepAlive();
        boolean boolean55 = mongoClientOptions47.isAlwaysUseMBeans();
        int int56 = mongoClientOptions47.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 15 + "'", int56 == 15);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.username;
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.username = "mongodb://localhost/test";
        java.lang.String str10 = mongoProperties0.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        boolean boolean13 = mongoProperties11.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.MongoClient mongoClient22 = mongoProperties11.createMongoClient(mongoClientOptions21);
        int int23 = mongoClientOptions21.getMaxWaitTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions21.getMaxWaitTime();
        boolean boolean26 = mongoClientOptions21.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions21.getDbEncoderFactory();
        boolean boolean28 = mongoClientOptions21.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions21.getWriteConcern();
        int int30 = mongoClientOptions21.getSocketTimeout();
        int int31 = mongoClientOptions21.getHeartbeatConnectTimeout();
        java.lang.String str32 = mongoClientOptions21.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions21);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        int int30 = mongoClientOptions27.getHeartbeatFrequency();
        int int31 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        long long32 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.legacyDefaults();
        java.lang.Class<?> wildcardClass37 = builder36.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions15, environment18);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions15.getSocketFactory();
        boolean boolean21 = mongoClientOptions15.isAutoConnectRetry();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.Class<?> wildcardClass25 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        java.lang.String str37 = mongoClientOptions33.toString();
        int int38 = mongoClientOptions33.getMaxWaitTime();
        boolean boolean39 = mongoClientOptions33.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties0.builder(mongoClientOptions33);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str43 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 120000 + "'", int38 == 120000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions30.getSocketFactory();
        long long32 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        int int33 = mongoClientOptions30.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions30.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder22.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder11.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder4.socketFactory(socketFactory34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.password;
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        mongoProperties0.port = 5000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int22 = mongoProperties0.getPort();
        java.lang.String str23 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        boolean boolean26 = mongoProperties24.hasCustomAddress();
        java.lang.String str27 = mongoProperties24.uri;
        mongoProperties24.setHost("");
        java.lang.String str30 = mongoProperties24.getHost();
        java.lang.String str31 = mongoProperties24.getUsername();
        mongoProperties24.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass35 = mongoProperties34.fieldNamingStrategy;
        mongoProperties34.host = "hi!";
        mongoProperties34.authenticationDatabase = "";
        java.lang.String str40 = mongoProperties34.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.autoConnectRetry(false);
        boolean boolean57 = mongoClientOptions48.equals((java.lang.Object) false);
        int int58 = mongoClientOptions48.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder59 = mongoProperties34.builder(mongoClientOptions48);
        com.mongodb.MongoClientOptions.Builder builder60 = mongoProperties24.builder(mongoClientOptions48);
        org.springframework.core.env.Environment environment61 = null;
        com.mongodb.MongoClient mongoClient62 = mongoProperties0.createMongoClient(mongoClientOptions48, environment61);
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClient62);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder23.build();
        int int31 = mongoClientOptions30.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        long long41 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        java.lang.String str42 = mongoClientOptions39.getRequiredReplicaSetName();
        int int43 = mongoClientOptions39.getLocalThreshold();
        int int44 = mongoClientOptions39.getMaxConnectionIdleTime();
        int int45 = mongoClientOptions39.getHeartbeatConnectTimeout();
        int int46 = mongoClientOptions39.getHeartbeatConnectTimeout();
        boolean boolean47 = mongoClientOptions30.equals((java.lang.Object) mongoClientOptions39);
        int int48 = mongoClientOptions30.getAcceptableLatencyDifference();
        int int49 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions30.getWriteConcern();
        int int51 = mongoClientOptions30.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment52 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient53 = mongoProperties0.createMongoClient(mongoClientOptions30, environment52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: spring.data.mongodb.port=0 and no local mongo port configuration is available");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        char[] charArray7 = null;
        mongoProperties0.password = charArray7;
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        java.lang.String str10 = mongoProperties0.getUri();
        org.springframework.core.env.Environment environment11 = null;
        int int12 = mongoProperties0.determinePort(environment11);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Integer int7 = mongoProperties0.port;
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minHeartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        int int37 = mongoClientOptions33.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str38 = mongoClientOptions33.getRequiredReplicaSetName();
        boolean boolean39 = mongoClientOptions33.isAutoConnectRetry();
        int int40 = mongoClientOptions33.getLocalThreshold();
        int int41 = mongoClientOptions33.getHeartbeatFrequency();
        int int42 = mongoClientOptions33.getConnectTimeout();
        java.lang.String str43 = mongoClientOptions33.toString();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder23.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(97);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass49 = mongoProperties48.fieldNamingStrategy;
        boolean boolean50 = mongoProperties48.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        com.mongodb.MongoClient mongoClient59 = mongoProperties48.createMongoClient(mongoClientOptions58);
        int int60 = mongoClientOptions58.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory61 = mongoClientOptions58.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder45.dbDecoderFactory(dBDecoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder10.dbDecoderFactory(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5000 + "'", int41 == 5000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120000 + "'", int60 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties7.getGridFsDatabase();
        mongoProperties7.port = 5000;
        java.lang.Class<?> wildcardClass13 = mongoProperties7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        boolean boolean15 = mongoProperties0.hasCustomAddress();
        mongoProperties0.port = 52;
        mongoProperties0.gridFsDatabase = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int10 = mongoClientOptions7.getSocketTimeout();
        int int11 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoClientOptions14.toString();
        java.lang.String str18 = mongoClientOptions14.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        long long18 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int19 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int20 = mongoClientOptions16.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions16.getConnectTimeout();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder6.socketFactory(socketFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        mongoProperties0.uri = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str26 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int22 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder9.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getLocalThreshold();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions7.getWriteConcern();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean14 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean15 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getLocalThreshold();
        int int10 = mongoClientOptions7.getConnectTimeout();
        int int11 = mongoClientOptions7.getMinConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(writeConcern14);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass7 = mongoProperties5.getFieldNamingStrategy();
        mongoProperties5.port = 10;
        mongoProperties5.database = "hi!";
        mongoProperties5.setAuthenticationDatabase("hi!");
        mongoProperties5.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        mongoProperties5.fieldNamingStrategy = wildcardClass23;
        java.lang.Class<?> wildcardClass25 = mongoProperties5.getFieldNamingStrategy();
        mongoProperties0.fieldNamingStrategy = wildcardClass25;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.database = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        int int14 = mongoClientOptions7.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions7.getSocketFactory();
        int int16 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder6.build();
        int int12 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        int int13 = mongoClientOptions11.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.heartbeatSocketTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.gridFsDatabase = "hi!";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.requiredReplicaSetName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder2.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.password;
        org.springframework.core.env.Environment environment38 = null;
        int int39 = mongoProperties0.determinePort(environment38);
        java.lang.String str40 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setUsername("test");
        java.lang.String str45 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass11 = mongoProperties9.getFieldNamingStrategy();
        mongoProperties9.port = 10;
        mongoProperties9.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties9.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties9.createMongoClient(mongoClientOptions25, environment26);
        javax.net.SocketFactory socketFactory28 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        int int14 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatThreadCount(5000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder43 = builder35.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder45 = builder35.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass54 = mongoProperties53.fieldNamingStrategy;
        boolean boolean55 = mongoProperties53.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        com.mongodb.MongoClient mongoClient64 = mongoProperties53.createMongoClient(mongoClientOptions63);
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder46.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder45.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder32.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder25.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder70 = builder10.dbDecoderFactory(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.localThreshold((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties0.getUsername();
        java.lang.String str14 = mongoProperties0.username;
        java.lang.String str15 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("test");
        char[] charArray18 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(charArray18);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.readPreference(readPreference17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder37.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getLocalThreshold();
        boolean boolean19 = mongoClientOptions17.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions17.getDbDecoderFactory();
        int int22 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions17.getSocketTimeout();
        int int24 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(52);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.username;
        java.lang.String str13 = mongoProperties10.uri;
        java.lang.String str14 = mongoProperties10.gridFsDatabase;
        java.lang.String str15 = mongoProperties10.getMongoClientDatabase();
        boolean boolean16 = mongoProperties10.hasCustomCredentials();
        int int17 = mongoProperties10.getDEFAULT_PORT();
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) mongoProperties10);
        java.lang.Class<?> wildcardClass19 = mongoProperties10.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass20 = mongoProperties10.fieldNamingStrategy;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27017 + "'", int17 == 27017);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(socketFactory14);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getSocketTimeout();
        int int47 = mongoClientOptions45.getHeartbeatThreadCount();
        java.lang.String str48 = mongoClientOptions45.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions45);
        mongoProperties0.uri = "hi!";
        java.lang.String str52 = mongoProperties0.uri;
        mongoProperties0.setUri("test");
        java.lang.String str55 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        mongoProperties0.uri = "test";
        java.lang.String str12 = mongoProperties0.getHost();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        java.lang.String str9 = mongoProperties0.host;
        mongoProperties0.gridFsDatabase = "hi!";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        mongoProperties12.host = "hi!";
        mongoProperties12.setUri("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties12.getHost();
        char[] charArray19 = mongoProperties12.getPassword();
        java.lang.Integer int20 = mongoProperties12.getPort();
        mongoProperties12.database = "hi!";
        java.lang.Integer int23 = mongoProperties12.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass26 = mongoProperties24.getFieldNamingStrategy();
        mongoProperties24.port = 10;
        mongoProperties24.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties24.createMongoClient(mongoClientOptions31);
        mongoProperties24.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass37 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.port = 10;
        mongoProperties35.database = "hi!";
        java.lang.String str42 = mongoProperties35.getUri();
        boolean boolean43 = mongoProperties35.hasCustomCredentials();
        java.lang.String str44 = mongoProperties35.authenticationDatabase;
        char[] charArray45 = mongoProperties35.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass47 = mongoProperties46.fieldNamingStrategy;
        mongoProperties46.host = "hi!";
        mongoProperties46.setUri("mongodb://localhost/test");
        mongoProperties46.authenticationDatabase = "test";
        mongoProperties46.authenticationDatabase = "";
        java.lang.String str56 = mongoProperties46.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass58 = mongoProperties57.fieldNamingStrategy;
        mongoProperties57.host = "hi!";
        mongoProperties57.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties63 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass64 = mongoProperties63.fieldNamingStrategy;
        mongoProperties63.host = "hi!";
        int int67 = mongoProperties63.getDEFAULT_PORT();
        mongoProperties63.host = "";
        mongoProperties63.setHost("hi!");
        char[] charArray76 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties63.setPassword(charArray76);
        char[] charArray78 = mongoProperties63.password;
        mongoProperties57.setPassword(charArray78);
        mongoProperties46.password = charArray78;
        mongoProperties35.password = charArray78;
        mongoProperties24.password = charArray78;
        mongoProperties12.setPassword(charArray78);
        mongoProperties0.setPassword(charArray78);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(charArray45);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 27017 + "'", int67 == 27017);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , a, a, 4]");
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions18.isSocketKeepAlive();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        int int24 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        int int25 = mongoClientOptions18.getConnectTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        boolean boolean13 = mongoClientOptions7.isAlwaysUseMBeans();
        int int14 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(readPreference15);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int18 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.heartbeatThreadCount(10);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        boolean boolean28 = mongoClientOptions26.isSocketKeepAlive();
        int int29 = mongoClientOptions26.getHeartbeatThreadCount();
        int int30 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean31 = mongoClientOptions26.isAutoConnectRetry();
        int int32 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        int int33 = mongoClientOptions26.getConnectTimeout();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder7.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectRetryFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatThreadCount(97);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectTimeout(52);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass21 = mongoProperties20.fieldNamingStrategy;
        java.lang.String str22 = mongoProperties20.getAuthenticationDatabase();
        boolean boolean23 = mongoProperties20.hasCustomCredentials();
        boolean boolean24 = mongoProperties20.hasCustomAddress();
        mongoProperties20.username = "";
        boolean boolean27 = mongoProperties20.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getSocketTimeout();
        int int37 = mongoClientOptions35.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties20.createMongoClient(mongoClientOptions35, environment38);
        boolean boolean40 = mongoClientOptions35.isAlwaysUseMBeans();
        int int41 = mongoClientOptions35.getSocketTimeout();
        java.lang.String str42 = mongoClientOptions35.getRequiredReplicaSetName();
        int int43 = mongoClientOptions35.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder17.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder8.readPreference(readPreference44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        long long11 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str13 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getLocalThreshold();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions7.getWriteConcern();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        long long16 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions7.getWriteConcern();
        java.lang.Class<?> wildcardClass18 = writeConcern17.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions10.getSocketFactory();
        int int14 = mongoClientOptions10.getHeartbeatFrequency();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(writeConcern16);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass17 = mongoProperties15.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties15.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions26.getDbEncoderFactory();
        long long29 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        boolean boolean30 = mongoClientOptions26.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties15.builder(mongoClientOptions26);
        int int32 = mongoClientOptions26.getMinConnectionsPerHost();
        long long33 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = builder14.readPreference(readPreference34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder14.maxConnectionLifeTime((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectRetryFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatThreadCount(97);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatThreadCount();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatConnectTimeout((int) (short) 10);
        boolean boolean36 = mongoClientOptions16.equals((java.lang.Object) builder35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.build();
        int int48 = mongoClientOptions47.getHeartbeatSocketTimeout();
        int int49 = mongoClientOptions47.getHeartbeatFrequency();
        boolean boolean50 = mongoClientOptions47.isSocketKeepAlive();
        int int51 = mongoClientOptions47.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions47.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder39.writeConcern(writeConcern52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.writeConcern(writeConcern52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5000 + "'", int49 == 5000);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 120000 + "'", int51 == 120000);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        java.lang.String str12 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties13.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        long long27 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        boolean boolean28 = mongoClientOptions24.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties13.builder(mongoClientOptions24);
        int int30 = mongoClientOptions24.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions24.getDbDecoderFactory();
        int int32 = mongoClientOptions24.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties0.createMongoClient(mongoClientOptions24, environment33);
        java.lang.String str35 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder38.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.heartbeatFrequency((int) (short) 10);
        boolean boolean51 = mongoClientOptions24.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass39 = mongoProperties38.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass40 = mongoProperties38.getFieldNamingStrategy();
        mongoProperties38.port = 10;
        mongoProperties38.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties38.createMongoClient(mongoClientOptions45);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        org.springframework.core.env.Environment environment55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties38.createMongoClient(mongoClientOptions54, environment55);
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder31.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder22.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder11.dbEncoderFactory(dBEncoderFactory57);
        java.lang.Class<?> wildcardClass61 = builder60.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass61;
        char[] charArray63 = null;
        mongoProperties0.setPassword(charArray63);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str10 = mongoProperties0.username;
        java.lang.String str11 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder25.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder48.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder57.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties64 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass65 = mongoProperties64.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass66 = mongoProperties64.getFieldNamingStrategy();
        mongoProperties64.port = 10;
        mongoProperties64.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties64.createMongoClient(mongoClientOptions71);
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder77.build();
        org.springframework.core.env.Environment environment81 = null;
        com.mongodb.MongoClient mongoClient82 = mongoProperties64.createMongoClient(mongoClientOptions80, environment81);
        com.mongodb.DBEncoderFactory dBEncoderFactory83 = mongoClientOptions80.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder84 = builder57.dbEncoderFactory(dBEncoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder48.dbEncoderFactory(dBEncoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder37.dbEncoderFactory(dBEncoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder87 = builder25.dbEncoderFactory(dBEncoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder88 = builder20.dbEncoderFactory(dBEncoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder89 = builder12.dbEncoderFactory(dBEncoderFactory83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(mongoClient72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoClientOptions80);
        org.junit.Assert.assertNotNull(mongoClient82);
        org.junit.Assert.assertNotNull(dBEncoderFactory83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout((int) ' ');
        java.lang.Class<?> wildcardClass17 = builder14.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.authenticationDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        int int5 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str6 = mongoProperties0.host;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        mongoProperties5.host = "hi!";
        java.lang.String str9 = mongoProperties5.uri;
        mongoProperties5.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder22 = mongoProperties5.builder(mongoClientOptions19);
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int24 = mongoClientOptions19.getLocalThreshold();
        int int25 = mongoClientOptions19.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        int int27 = mongoClientOptions19.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions19, environment28);
        org.springframework.core.env.Environment environment30 = null;
        int int31 = mongoProperties0.determinePort(environment30);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5000 + "'", int25 == 5000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 27017 + "'", int31 == 27017);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoClientOptions14.toString();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions22.getReadPreference();
        boolean boolean24 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions22);
        java.lang.String str25 = mongoClientOptions14.toString();
        long long26 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int27 = mongoClientOptions14.getConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) 52);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.connectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass31 = mongoProperties30.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass32 = mongoProperties30.getFieldNamingStrategy();
        mongoProperties30.port = 10;
        mongoProperties30.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties30.createMongoClient(mongoClientOptions37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties30.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder14.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder3.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        mongoProperties9.host = "hi!";
        java.lang.String str13 = mongoProperties9.uri;
        org.springframework.core.env.Environment environment14 = null;
        int int15 = mongoProperties9.determinePort(environment14);
        java.lang.String str16 = mongoProperties9.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        int int36 = mongoProperties32.getDEFAULT_PORT();
        mongoProperties32.host = "";
        mongoProperties32.setHost("hi!");
        char[] charArray45 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties32.setPassword(charArray45);
        mongoProperties17.password = charArray45;
        mongoProperties9.setPassword(charArray45);
        mongoProperties0.setPassword(charArray45);
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.setHost("hi!");
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 27017 + "'", int36 == 27017);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , a, a, 4]");
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        org.springframework.core.env.Environment environment3 = null;
        int int4 = mongoProperties0.determinePort(environment3);
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int6 = mongoProperties0.getPort();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.Integer int9 = mongoProperties0.getPort();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str11 = mongoProperties0.username;
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        char[] charArray13 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties0.setPassword(charArray13);
        char[] charArray15 = mongoProperties0.password;
        boolean boolean16 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.username = "test";
        java.lang.String str19 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        boolean boolean23 = mongoClientOptions14.equals((java.lang.Object) false);
        int int24 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions14);
        int int26 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions14.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions18.getSocketFactory();
        long long20 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions18.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions18.getWriteConcern();
        int int23 = mongoClientOptions18.getHeartbeatFrequency();
        int int24 = mongoClientOptions18.getSocketTimeout();
        int int25 = mongoClientOptions18.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder6.dbDecoderFactory(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getUri();
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        char[] charArray13 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties0.setPassword(charArray13);
        char[] charArray15 = mongoProperties0.password;
        java.lang.Integer int16 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , a, a, 4]");
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder44 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder6.maxAutoConnectRetryTime(1L);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder49.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        javax.net.SocketFactory socketFactory64 = mongoClientOptions63.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder55.socketFactory(socketFactory64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder72.build();
        int int76 = mongoClientOptions75.getHeartbeatSocketTimeout();
        int int77 = mongoClientOptions75.getHeartbeatFrequency();
        boolean boolean78 = mongoClientOptions75.isSocketKeepAlive();
        int int79 = mongoClientOptions75.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory80 = mongoClientOptions75.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder81 = builder67.dbEncoderFactory(dBEncoderFactory80);
        com.mongodb.MongoClientOptions.Builder builder82 = builder6.dbEncoderFactory(dBEncoderFactory80);
        com.mongodb.MongoClientOptions.Builder builder84 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(socketFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20000 + "'", int76 == 20000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5000 + "'", int77 == 5000);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 120000 + "'", int79 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        java.lang.String str16 = mongoClientOptions7.getRequiredReplicaSetName();
        int int17 = mongoClientOptions7.getMaxWaitTime();
        int int18 = mongoClientOptions7.getConnectionsPerHost();
        int int19 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.username = "";
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass18;
        mongoProperties0.gridFsDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.database;
        java.lang.String str2 = mongoProperties0.gridFsDatabase;
        char[] charArray3 = mongoProperties0.password;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass11 = mongoProperties9.getFieldNamingStrategy();
        mongoProperties9.port = 10;
        mongoProperties9.database = "hi!";
        mongoProperties9.setAuthenticationDatabase("hi!");
        mongoProperties9.setUri("mongodb://localhost/test");
        boolean boolean20 = mongoProperties9.hasCustomCredentials();
        java.lang.String str21 = mongoProperties9.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        mongoProperties22.host = "hi!";
        mongoProperties22.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        int int32 = mongoProperties28.getDEFAULT_PORT();
        mongoProperties28.host = "";
        mongoProperties28.setHost("hi!");
        char[] charArray41 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties28.setPassword(charArray41);
        char[] charArray43 = mongoProperties28.password;
        mongoProperties22.setPassword(charArray43);
        mongoProperties9.password = charArray43;
        mongoProperties0.password = charArray43;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 27017 + "'", int32 == 27017);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , a, a, 4]");
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.uri;
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions7.getHeartbeatThreadCount();
        int int13 = mongoClientOptions7.getSocketTimeout();
        int int14 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        long long16 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        long long18 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getSocketTimeout();
        int int28 = mongoClientOptions26.getHeartbeatThreadCount();
        int int29 = mongoClientOptions26.getHeartbeatThreadCount();
        boolean boolean31 = mongoClientOptions26.equals((java.lang.Object) 100L);
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions26);
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions26, environment34);
        java.lang.String str36 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.host = "";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions7.getReadPreference();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.fieldNamingStrategy;
        boolean boolean23 = mongoProperties21.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        com.mongodb.MongoClient mongoClient32 = mongoProperties21.createMongoClient(mongoClientOptions31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions31.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder47 = builder39.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        javax.net.SocketFactory socketFactory58 = mongoClientOptions57.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions57.getDbEncoderFactory();
        long long60 = mongoClientOptions57.getMaxAutoConnectRetryTime();
        boolean boolean61 = mongoClientOptions57.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions57.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder49.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder34.dbDecoderFactory(dBDecoderFactory62);
        boolean boolean65 = mongoClientOptions7.equals((java.lang.Object) builder64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(socketFactory58);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder8.writeConcern(writeConcern23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder22 = builder2.writeConcern(writeConcern21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        boolean boolean34 = mongoProperties32.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        com.mongodb.MongoClient mongoClient43 = mongoProperties32.createMongoClient(mongoClientOptions42);
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder25.dbDecoderFactory(dBDecoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder58 = builder50.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        javax.net.SocketFactory socketFactory69 = mongoClientOptions68.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions68.getDbEncoderFactory();
        long long71 = mongoClientOptions68.getMaxAutoConnectRetryTime();
        boolean boolean72 = mongoClientOptions68.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions68.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder60.dbDecoderFactory(dBDecoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder45.dbDecoderFactory(dBDecoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder80.build();
        boolean boolean84 = mongoClientOptions83.isSocketKeepAlive();
        boolean boolean85 = mongoClientOptions83.isSocketKeepAlive();
        int int86 = mongoClientOptions83.getHeartbeatThreadCount();
        int int87 = mongoClientOptions83.getMaxConnectionLifeTime();
        boolean boolean88 = mongoClientOptions83.isAutoConnectRetry();
        java.lang.String str89 = mongoClientOptions83.toString();
        com.mongodb.ReadPreference readPreference90 = mongoClientOptions83.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder91 = builder75.readPreference(readPreference90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder24.readPreference(readPreference90);
        com.mongodb.MongoClientOptions.Builder builder94 = builder92.socketTimeout((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder96 = builder94.connectionsPerHost((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(socketFactory69);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(readPreference90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        int int19 = mongoClientOptions17.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectRetryFrequency(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatThreadCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        java.lang.String str13 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        int int13 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(false);
        boolean boolean21 = mongoClientOptions12.equals((java.lang.Object) false);
        int int22 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = mongoProperties0.builder(mongoClientOptions12);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getSocketTimeout();
        int int35 = mongoClientOptions33.getHeartbeatThreadCount();
        int int36 = mongoClientOptions33.getHeartbeatThreadCount();
        java.lang.String str37 = mongoClientOptions33.getRequiredReplicaSetName();
        int int38 = mongoClientOptions33.getHeartbeatConnectTimeout();
        boolean boolean39 = mongoClientOptions33.isAutoConnectRetry();
        int int40 = mongoClientOptions33.getAcceptableLatencyDifference();
        boolean boolean41 = mongoClientOptions33.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder23.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectRetryFrequency(52);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.acceptableLatencyDifference(10);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions39.getDbEncoderFactory();
        long long42 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        boolean boolean43 = mongoClientOptions39.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder31.dbDecoderFactory(dBDecoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder31.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder31.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        int int68 = mongoClientOptions67.getLocalThreshold();
        boolean boolean69 = mongoClientOptions67.isCursorFinalizerEnabled();
        int int70 = mongoClientOptions67.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions67.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder57.dbDecoderFactory(dBDecoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder79 = builder75.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder79.build();
        int int81 = mongoClientOptions80.getSocketTimeout();
        int int82 = mongoClientOptions80.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference83 = mongoClientOptions80.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder84 = builder72.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder50.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder31.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder87 = builder18.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder89 = builder18.connectTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 500 + "'", int70 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoClientOptions80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(readPreference83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions7.getDbDecoderFactory();
        int int19 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(socketFactory13);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str25 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str28 = mongoProperties0.host;
        boolean boolean29 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions30);
        mongoProperties0.authenticationDatabase = "test";
        java.lang.Class<?> wildcardClass34 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.heartbeatConnectTimeout(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.maxConnectionLifeTime(10000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.heartbeatFrequency(35);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass19 = mongoProperties17.getFieldNamingStrategy();
        mongoProperties17.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass22 = mongoProperties17.fieldNamingStrategy;
        char[] charArray23 = mongoProperties17.password;
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        boolean boolean32 = mongoClientOptions31.isSocketKeepAlive();
        boolean boolean33 = mongoClientOptions31.isSocketKeepAlive();
        int int34 = mongoClientOptions31.getHeartbeatSocketTimeout();
        boolean boolean35 = mongoClientOptions31.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient36 = mongoProperties17.createMongoClient(mongoClientOptions31);
        long long37 = mongoClientOptions31.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder16.writeConcern(writeConcern38);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions27.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder19.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        long long43 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        int int44 = mongoClientOptions42.getMinConnectionsPerHost();
        int int45 = mongoClientOptions42.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder34.dbDecoderFactory(dBDecoderFactory46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatThreadCount((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        int int17 = mongoClientOptions11.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions11.getDbDecoderFactory();
        int int19 = mongoClientOptions11.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions11.getSocketFactory();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions11.getWriteConcern();
        long long22 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder23.build();
        int int31 = mongoClientOptions30.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        long long41 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        java.lang.String str42 = mongoClientOptions39.getRequiredReplicaSetName();
        int int43 = mongoClientOptions39.getLocalThreshold();
        int int44 = mongoClientOptions39.getMaxConnectionIdleTime();
        int int45 = mongoClientOptions39.getHeartbeatConnectTimeout();
        int int46 = mongoClientOptions39.getHeartbeatConnectTimeout();
        boolean boolean47 = mongoClientOptions30.equals((java.lang.Object) mongoClientOptions39);
        int int48 = mongoClientOptions30.getAcceptableLatencyDifference();
        int int49 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder10.writeConcern(writeConcern50);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        java.lang.String str37 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        long long46 = mongoClientOptions45.getMaxAutoConnectRetryTime();
        int int47 = mongoClientOptions45.getMinConnectionsPerHost();
        boolean boolean48 = mongoClientOptions45.isAlwaysUseMBeans();
        int int49 = mongoClientOptions45.getConnectTimeout();
        java.lang.String str50 = mongoClientOptions45.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions45);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.build();
        int int60 = mongoClientOptions59.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory61 = mongoClientOptions59.getSocketFactory();
        boolean boolean62 = mongoClientOptions45.equals((java.lang.Object) socketFactory61);
        int int63 = mongoClientOptions45.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10000 + "'", int49 == 10000);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertNotNull(socketFactory61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 500 + "'", int63 == 500);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout(35);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        mongoProperties0.setPort((java.lang.Integer) 5000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.database = "hi!";
        java.lang.String str16 = mongoProperties0.getUri();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getSocketTimeout();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        long long13 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        boolean boolean14 = mongoClientOptions10.isAlwaysUseMBeans();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        long long16 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        int int18 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions10.isAlwaysUseMBeans();
        int int20 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass14 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties12.port = 10;
        mongoProperties12.database = "hi!";
        java.lang.String str19 = mongoProperties12.getUri();
        boolean boolean20 = mongoProperties12.hasCustomCredentials();
        java.lang.String str21 = mongoProperties12.authenticationDatabase;
        char[] charArray22 = mongoProperties12.getPassword();
        mongoProperties12.setPort((java.lang.Integer) 10000);
        boolean boolean25 = mongoClientOptions7.equals((java.lang.Object) 10000);
        javax.net.SocketFactory socketFactory26 = mongoClientOptions7.getSocketFactory();
        int int27 = mongoClientOptions7.getSocketTimeout();
        java.lang.String str28 = mongoClientOptions7.toString();
        long long29 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        boolean boolean6 = mongoProperties0.hasCustomAddress();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        java.lang.String str17 = mongoProperties11.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.autoConnectRetry(false);
        boolean boolean34 = mongoClientOptions25.equals((java.lang.Object) false);
        int int35 = mongoClientOptions25.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties11.builder(mongoClientOptions25);
        int int37 = mongoClientOptions25.getHeartbeatFrequency();
        java.lang.String str38 = mongoClientOptions25.getDescription();
        int int39 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient40 = mongoProperties0.createMongoClient(mongoClientOptions25);
        int int41 = mongoClientOptions25.getLocalThreshold();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.Integer int7 = mongoProperties0.port;
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.host = "mongodb://localhost/test";
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.host = "hi!";
        java.lang.String str18 = mongoProperties14.uri;
        mongoProperties14.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getLocalThreshold();
        boolean boolean30 = mongoClientOptions28.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties14.builder(mongoClientOptions28);
        boolean boolean32 = mongoClientOptions28.isCursorFinalizerEnabled();
        long long33 = mongoClientOptions28.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder36.heartbeatThreadCount((int) (byte) 10);
        boolean boolean45 = mongoClientOptions28.equals((java.lang.Object) (byte) 10);
        int int46 = mongoClientOptions28.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        int int55 = mongoClientOptions54.getMinHeartbeatFrequency();
        int int56 = mongoClientOptions54.getConnectTimeout();
        int int57 = mongoClientOptions54.getMaxWaitTime();
        int int58 = mongoClientOptions54.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions54.getDbEncoderFactory();
        boolean boolean60 = mongoClientOptions28.equals((java.lang.Object) mongoClientOptions54);
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions28.getReadPreference();
        org.springframework.core.env.Environment environment62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient63 = mongoProperties0.createMongoClient(mongoClientOptions28, environment62);
            org.junit.Assert.fail("Expected exception of type com.mongodb.MongoException; message: host and port should be specified in host:port format");
        } catch (com.mongodb.MongoException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 500 + "'", int46 == 500);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 500 + "'", int55 == 500);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 120000 + "'", int57 == 120000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(readPreference61);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions25.getHeartbeatFrequency();
        boolean boolean28 = mongoClientOptions25.isSocketKeepAlive();
        int int29 = mongoClientOptions25.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder11.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.localThreshold((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int6 = mongoProperties0.port;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        java.lang.String str8 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean22 = mongoClientOptions20.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions20.getSocketFactory();
        boolean boolean24 = mongoClientOptions20.isCursorFinalizerEnabled();
        boolean boolean25 = mongoClientOptions20.isAutoConnectRetry();
        java.lang.String str26 = mongoClientOptions20.toString();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.dbDecoderFactory(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.connectTimeout(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder29 = builder23.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.password;
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.host = "mongodb://localhost/test";
        java.lang.String str14 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        int int12 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str13 = mongoProperties0.uri;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str16 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectRetryFrequency((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        boolean boolean9 = mongoProperties7.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions17);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder0.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder33 = builder25.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        javax.net.SocketFactory socketFactory44 = mongoClientOptions43.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions43.getDbEncoderFactory();
        long long46 = mongoClientOptions43.getMaxAutoConnectRetryTime();
        boolean boolean47 = mongoClientOptions43.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions43.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder35.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder20.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.clearPassword();
        char[] charArray12 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(charArray12);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int16 = mongoClientOptions14.getHeartbeatFrequency();
        boolean boolean17 = mongoClientOptions14.isSocketKeepAlive();
        int int18 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getMinHeartbeatFrequency();
        int int29 = mongoClientOptions27.getConnectTimeout();
        boolean boolean30 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions27);
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions14, environment31);
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClient32);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        org.springframework.core.env.Environment environment12 = null;
        int int13 = mongoProperties0.determinePort(environment12);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.host = "hi!";
        java.lang.String str18 = mongoProperties14.uri;
        boolean boolean19 = mongoProperties14.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass21 = mongoProperties20.fieldNamingStrategy;
        boolean boolean22 = mongoProperties20.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        com.mongodb.MongoClient mongoClient31 = mongoProperties20.createMongoClient(mongoClientOptions30);
        int int32 = mongoClientOptions30.getMaxWaitTime();
        java.lang.String str33 = mongoClientOptions30.toString();
        com.mongodb.MongoClient mongoClient34 = mongoProperties14.createMongoClient(mongoClientOptions30);
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions30);
        boolean boolean36 = mongoProperties0.hasCustomCredentials();
        org.springframework.core.env.Environment environment37 = null;
        int int38 = mongoProperties0.determinePort(environment37);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        mongoProperties39.host = "hi!";
        java.lang.String str43 = mongoProperties39.uri;
        org.springframework.core.env.Environment environment44 = null;
        int int45 = mongoProperties39.determinePort(environment44);
        java.lang.Class<?> wildcardClass46 = mongoProperties39.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass47 = mongoProperties39.getFieldNamingStrategy();
        mongoProperties39.setHost("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass51 = mongoProperties50.fieldNamingStrategy;
        mongoProperties50.host = "hi!";
        java.lang.String str54 = mongoProperties50.uri;
        org.springframework.core.env.Environment environment55 = null;
        int int56 = mongoProperties50.determinePort(environment55);
        java.lang.Integer int57 = mongoProperties50.port;
        java.lang.Integer int58 = mongoProperties50.getPort();
        char[] charArray59 = mongoProperties50.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties60 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass61 = mongoProperties60.fieldNamingStrategy;
        mongoProperties60.host = "hi!";
        mongoProperties60.authenticationDatabase = "";
        java.lang.String str66 = mongoProperties60.database;
        java.lang.String str67 = mongoProperties60.gridFsDatabase;
        java.lang.String str68 = mongoProperties60.getMongoClientDatabase();
        java.lang.Integer int69 = mongoProperties60.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties70 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass71 = mongoProperties70.fieldNamingStrategy;
        java.lang.String str72 = mongoProperties70.username;
        java.lang.String str73 = mongoProperties70.host;
        mongoProperties70.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties76 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass77 = mongoProperties76.fieldNamingStrategy;
        boolean boolean78 = mongoProperties76.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder83.build();
        com.mongodb.MongoClient mongoClient87 = mongoProperties76.createMongoClient(mongoClientOptions86);
        int int88 = mongoClientOptions86.getMaxWaitTime();
        javax.net.SocketFactory socketFactory89 = mongoClientOptions86.getSocketFactory();
        org.springframework.core.env.Environment environment90 = null;
        com.mongodb.MongoClient mongoClient91 = mongoProperties70.createMongoClient(mongoClientOptions86, environment90);
        char[] charArray94 = new char[] { '4', '4' };
        mongoProperties70.setPassword(charArray94);
        mongoProperties60.password = charArray94;
        mongoProperties50.setPassword(charArray94);
        mongoProperties39.setPassword(charArray94);
        mongoProperties0.setPassword(charArray94);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb://localhost/test" + "'", str43, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 27017 + "'", int45 == 27017);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 27017 + "'", int56 == 27017);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNull(charArray59);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "test" + "'", str68, "test");
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertNotNull(mongoClient87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 120000 + "'", int88 == 120000);
        org.junit.Assert.assertNotNull(socketFactory89);
        org.junit.Assert.assertNotNull(mongoClient91);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[4, 4]");
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketTimeout(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions10.getLocalThreshold();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions10.getReadPreference();
        int int17 = mongoClientOptions10.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions10.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        java.lang.String str9 = mongoProperties0.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        int int14 = mongoProperties10.getDEFAULT_PORT();
        mongoProperties10.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass19 = mongoProperties17.getFieldNamingStrategy();
        mongoProperties17.port = 10;
        mongoProperties17.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties17.createMongoClient(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties17.createMongoClient(mongoClientOptions33, environment34);
        java.lang.String str36 = mongoProperties17.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClient mongoClient45 = mongoProperties17.createMongoClient(mongoClientOptions44);
        com.mongodb.MongoClient mongoClient46 = mongoProperties10.createMongoClient(mongoClientOptions44);
        int int47 = mongoClientOptions44.getAcceptableLatencyDifference();
        int int48 = mongoClientOptions44.getHeartbeatFrequency();
        int int49 = mongoClientOptions44.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties0.builder(mongoClientOptions44);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass52 = mongoProperties51.fieldNamingStrategy;
        boolean boolean53 = mongoProperties51.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.build();
        com.mongodb.MongoClient mongoClient62 = mongoProperties51.createMongoClient(mongoClientOptions61);
        int int63 = mongoClientOptions61.getMaxWaitTime();
        int int64 = mongoClientOptions61.getHeartbeatConnectTimeout();
        int int65 = mongoClientOptions61.getMinConnectionsPerHost();
        boolean boolean66 = mongoClientOptions61.isAlwaysUseMBeans();
        int int67 = mongoClientOptions61.getHeartbeatConnectTimeout();
        int int68 = mongoClientOptions61.getConnectTimeout();
        int int69 = mongoClientOptions61.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder70 = mongoProperties0.builder(mongoClientOptions61);
        java.lang.String str71 = mongoClientOptions61.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5000 + "'", int48 == 5000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertNotNull(mongoClient62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 120000 + "'", int63 == 120000);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20000 + "'", int67 == 20000);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 120000 + "'", int69 == 120000);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.uri = "";
        char[] charArray11 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getUri();
        java.lang.String str10 = mongoProperties0.username;
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.setUsername("hi!");
        char[] charArray9 = new char[] { '4' };
        mongoProperties0.password = charArray9;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        java.lang.Class<?> wildcardClass15 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.authenticationDatabase = "test";
        java.lang.String str18 = mongoProperties11.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        java.lang.String str21 = mongoProperties19.getAuthenticationDatabase();
        char[] charArray22 = mongoProperties19.getPassword();
        mongoProperties19.host = "hi!";
        mongoProperties19.setUsername("hi!");
        char[] charArray28 = new char[] { '4' };
        mongoProperties19.password = charArray28;
        mongoProperties11.password = charArray28;
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions38.getSocketFactory();
        long long40 = mongoClientOptions38.getMaxAutoConnectRetryTime();
        int int41 = mongoClientOptions38.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions38.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions38.getDbEncoderFactory();
        int int44 = mongoClientOptions38.getMaxConnectionLifeTime();
        int int45 = mongoClientOptions38.getAcceptableLatencyDifference();
        int int46 = mongoClientOptions38.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory47 = mongoClientOptions38.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties11.builder(mongoClientOptions38);
        com.mongodb.MongoClientOptions.Builder builder49 = mongoProperties0.builder(mongoClientOptions38);
        java.lang.String str50 = mongoProperties0.getUri();
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str53 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4]");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 500 + "'", int46 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb://localhost/test" + "'", str50, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.connectionsPerHost((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        mongoProperties15.host = "hi!";
        mongoProperties15.setUri("mongodb://localhost/test");
        mongoProperties15.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        boolean boolean31 = mongoClientOptions30.isSocketKeepAlive();
        boolean boolean32 = mongoClientOptions30.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient33 = mongoProperties15.createMongoClient(mongoClientOptions30);
        boolean boolean34 = mongoProperties15.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getSocketTimeout();
        int int44 = mongoClientOptions42.getHeartbeatThreadCount();
        int int45 = mongoClientOptions42.getHeartbeatFrequency();
        int int46 = mongoClientOptions42.getHeartbeatConnectRetryFrequency();
        long long47 = mongoClientOptions42.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties15.builder(mongoClientOptions42);
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder8.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder8.localThreshold((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5000 + "'", int45 == 5000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 500 + "'", int46 == 500);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions20);
        java.lang.String str22 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        long long31 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions30.getMinConnectionsPerHost();
        boolean boolean33 = mongoClientOptions30.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions30.getDbDecoderFactory();
        long long35 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        int int36 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions30);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(mongoClient37);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        java.lang.String str13 = mongoClientOptions10.toString();
        int int14 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions10.getDbEncoderFactory();
        int int16 = mongoClientOptions10.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass37 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.port = 10;
        mongoProperties35.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties35.createMongoClient(mongoClientOptions42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties35.createMongoClient(mongoClientOptions51, environment52);
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions51.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder28.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder19.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder8.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder59 = builder8.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isSocketKeepAlive();
        int int12 = mongoClientOptions7.getLocalThreshold();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder2.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder2.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder6.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.description("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Integer int7 = mongoProperties0.port;
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.Integer int9 = mongoProperties0.port;
        char[] charArray10 = null;
        mongoProperties0.setPassword(charArray10);
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int15 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(readPreference11);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        mongoProperties13.port = 10;
        mongoProperties13.database = "hi!";
        java.lang.String str20 = mongoProperties13.getUri();
        boolean boolean21 = mongoProperties13.hasCustomCredentials();
        mongoProperties13.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        mongoProperties24.host = "hi!";
        int int28 = mongoProperties24.getDEFAULT_PORT();
        mongoProperties24.host = "";
        mongoProperties24.setHost("hi!");
        char[] charArray37 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties24.setPassword(charArray37);
        mongoProperties13.setPassword(charArray37);
        mongoProperties0.setPassword(charArray37);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass43 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 27017 + "'", int28 == 27017);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass43);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        boolean boolean17 = mongoProperties15.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        com.mongodb.MongoClient mongoClient26 = mongoProperties15.createMongoClient(mongoClientOptions25);
        int int27 = mongoClientOptions25.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions25.getWriteConcern();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder5.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder5.build();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions32.getWriteConcern();
        int int34 = mongoClientOptions32.getThreadsAllowedToBlockForConnectionMultiplier();
        int int35 = mongoClientOptions32.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10000 + "'", int35 == 10000);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        java.lang.String str14 = mongoProperties10.uri;
        mongoProperties10.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getLocalThreshold();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        int int44 = mongoClientOptions43.getLocalThreshold();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder35.socketFactory(socketFactory45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder18.socketFactory(socketFactory45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder18.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions50.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.username;
        java.lang.String str13 = mongoProperties10.uri;
        java.lang.String str14 = mongoProperties10.gridFsDatabase;
        java.lang.String str15 = mongoProperties10.getMongoClientDatabase();
        boolean boolean16 = mongoProperties10.hasCustomCredentials();
        int int17 = mongoProperties10.getDEFAULT_PORT();
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) mongoProperties10);
        java.lang.String str19 = mongoProperties10.database;
        java.lang.String str20 = mongoProperties10.getGridFsDatabase();
        java.lang.String str21 = mongoProperties10.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27017 + "'", int17 == 27017);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMinHeartbeatFrequency();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getMaxWaitTime();
        long long17 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions10.getDbEncoderFactory();
        int int20 = mongoClientOptions10.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.uri;
        mongoProperties0.setPort((java.lang.Integer) 52);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.String str7 = mongoProperties0.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        char[] charArray21 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties8.setPassword(charArray21);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        mongoProperties23.host = "hi!";
        int int27 = mongoProperties23.getDEFAULT_PORT();
        mongoProperties23.host = "";
        mongoProperties23.setHost("hi!");
        char[] charArray36 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties23.setPassword(charArray36);
        mongoProperties8.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        java.lang.String str40 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.heartbeatFrequency((int) (short) 10);
        java.lang.Class<?> wildcardClass58 = builder53.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass58;
        java.lang.Class<?> wildcardClass60 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 27017 + "'", int27 == 27017);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getLocalThreshold();
        boolean boolean26 = mongoClientOptions24.isCursorFinalizerEnabled();
        int int27 = mongoClientOptions24.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions24.getDbDecoderFactory();
        int int29 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder16.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder16.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        boolean boolean17 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions7.getReadPreference();
        int int19 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.setUri("mongodb://localhost/test");
        mongoProperties10.authenticationDatabase = "test";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str20 = mongoProperties10.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.fieldNamingStrategy;
        mongoProperties21.host = "hi!";
        mongoProperties21.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        mongoProperties27.host = "hi!";
        int int31 = mongoProperties27.getDEFAULT_PORT();
        mongoProperties27.host = "";
        mongoProperties27.setHost("hi!");
        char[] charArray40 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties27.setPassword(charArray40);
        char[] charArray42 = mongoProperties27.password;
        mongoProperties21.setPassword(charArray42);
        mongoProperties10.password = charArray42;
        mongoProperties0.password = charArray42;
        java.lang.String str46 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 27017 + "'", int31 == 27017);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , a, a, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "test" + "'", str46, "test");
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectionsPerHost(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions10.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions10.getDbDecoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        boolean boolean15 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int16 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        com.mongodb.MongoClientOptions.Builder builder7 = builder2.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        boolean boolean37 = mongoClientOptions33.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder25.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        java.lang.Integer int4 = mongoProperties0.port;
        java.lang.Integer int5 = mongoProperties0.port;
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "";
        char[] charArray12 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(charArray12);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minHeartbeatFrequency(52);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.heartbeatThreadCount((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean10 = mongoClientOptions7.isAutoConnectRetry();
        int int11 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str12 = mongoClientOptions7.toString();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        java.lang.String str17 = mongoClientOptions14.getRequiredReplicaSetName();
        int int18 = mongoClientOptions14.getLocalThreshold();
        int int19 = mongoClientOptions14.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions14.getSocketFactory();
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions14);
        java.lang.String str22 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        java.lang.Class<?> wildcardClass27 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = (-1);
        mongoProperties0.setHost("");
        mongoProperties0.database = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(writeConcern15);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        boolean boolean17 = mongoProperties15.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        com.mongodb.MongoClient mongoClient26 = mongoProperties15.createMongoClient(mongoClientOptions25);
        int int27 = mongoClientOptions25.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions25.getWriteConcern();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder5.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        long long41 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        int int42 = mongoClientOptions39.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions39.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder5.dbEncoderFactory(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 500 + "'", int42 == 500);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions7.equals((java.lang.Object) 100L);
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        int int14 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(readPreference15);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getHeartbeatSocketTimeout();
        int int56 = mongoClientOptions54.getHeartbeatFrequency();
        boolean boolean57 = mongoClientOptions54.isSocketKeepAlive();
        int int58 = mongoClientOptions54.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        int int68 = mongoClientOptions67.getMinHeartbeatFrequency();
        int int69 = mongoClientOptions67.getConnectTimeout();
        boolean boolean70 = mongoClientOptions54.equals((java.lang.Object) mongoClientOptions67);
        int int71 = mongoClientOptions54.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder73 = builder46.dbEncoderFactory(dBEncoderFactory72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxWaitTime((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5000 + "'", int56 == 5000);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 120000 + "'", int58 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 500 + "'", int68 == 500);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10000 + "'", int69 == 10000);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatThreadCount((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.connectTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.core.env.Environment environment7 = null;
        int int8 = mongoProperties0.determinePort(environment7);
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass20;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.String str7 = mongoProperties0.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        char[] charArray21 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties8.setPassword(charArray21);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        mongoProperties23.host = "hi!";
        int int27 = mongoProperties23.getDEFAULT_PORT();
        mongoProperties23.host = "";
        mongoProperties23.setHost("hi!");
        char[] charArray36 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties23.setPassword(charArray36);
        mongoProperties8.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        mongoProperties0.uri = "hi!";
        java.lang.String str42 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 27017 + "'", int27 == 27017);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions20.getMaxWaitTime();
        int int23 = mongoClientOptions20.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder12.dbDecoderFactory(dBDecoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder12.heartbeatConnectTimeout(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getLocalThreshold();
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions14.getSocketFactory();
        int int22 = mongoClientOptions14.getHeartbeatThreadCount();
        java.lang.String str23 = mongoClientOptions14.getDescription();
        boolean boolean24 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.autoConnectRetry(false);
        boolean boolean31 = mongoClientOptions22.equals((java.lang.Object) false);
        java.lang.String str32 = mongoClientOptions22.getDescription();
        int int33 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        int int34 = mongoClientOptions22.getHeartbeatThreadCount();
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions22);
        javax.net.SocketFactory socketFactory36 = mongoClientOptions22.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions22.getDbDecoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        int int14 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions10.getDbDecoderFactory();
        int int13 = mongoClientOptions10.getLocalThreshold();
        int int14 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions10.getMaxConnectionLifeTime();
        boolean boolean16 = mongoClientOptions10.isAutoConnectRetry();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        boolean boolean18 = mongoClientOptions7.isAutoConnectRetry();
        int int19 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(97);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        java.lang.String str13 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.setHost("");
        mongoProperties0.username = "test";
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "";
        java.lang.String str12 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getLocalThreshold();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions52.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder44.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder29.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder58 = builder29.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        com.mongodb.ReadPreference readPreference69 = mongoClientOptions68.getReadPreference();
        int int70 = mongoClientOptions68.getAcceptableLatencyDifference();
        int int71 = mongoClientOptions68.getHeartbeatThreadCount();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties72 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass73 = mongoProperties72.fieldNamingStrategy;
        boolean boolean74 = mongoProperties72.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder79.build();
        com.mongodb.MongoClient mongoClient83 = mongoProperties72.createMongoClient(mongoClientOptions82);
        com.mongodb.DBEncoderFactory dBEncoderFactory84 = mongoClientOptions82.getDbEncoderFactory();
        boolean boolean85 = mongoClientOptions68.equals((java.lang.Object) dBEncoderFactory84);
        com.mongodb.MongoClientOptions.Builder builder86 = builder58.dbEncoderFactory(dBEncoderFactory84);
        com.mongodb.MongoClientOptions.Builder builder87 = builder17.dbEncoderFactory(dBEncoderFactory84);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(readPreference69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertNotNull(mongoClient83);
        org.junit.Assert.assertNotNull(dBEncoderFactory84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass37 = mongoProperties36.fieldNamingStrategy;
        boolean boolean38 = mongoProperties36.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        com.mongodb.MongoClient mongoClient47 = mongoProperties36.createMongoClient(mongoClientOptions46);
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder29.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder28.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder15.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder8.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder8.minConnectionsPerHost((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        int int19 = mongoClientOptions16.getConnectTimeout();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions16.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getSocketTimeout();
        int int32 = mongoClientOptions30.getHeartbeatThreadCount();
        int int33 = mongoClientOptions30.getHeartbeatThreadCount();
        java.lang.String str34 = mongoClientOptions30.getRequiredReplicaSetName();
        boolean boolean35 = mongoClientOptions30.isCursorFinalizerEnabled();
        int int36 = mongoClientOptions30.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions30);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertNotNull(mongoClient37);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxWaitTime(100);
        boolean boolean25 = mongoClientOptions7.equals((java.lang.Object) 100);
        int int26 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.uri = "hi!";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str11 = mongoProperties0.getUsername();
        java.lang.String str12 = mongoProperties0.getUsername();
        java.lang.String str13 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getLocalThreshold();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions22.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder32 = builder29.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        long long16 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions14.getHeartbeatConnectTimeout();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions14.getReadPreference();
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions14);
        int int22 = mongoClientOptions14.getHeartbeatConnectRetryFrequency();
        int int23 = mongoClientOptions14.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getMaxWaitTime();
        java.lang.String str19 = mongoClientOptions16.toString();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout(97);
        java.lang.Class<?> wildcardClass30 = builder29.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass30;
        mongoProperties0.gridFsDatabase = "";
        char[] charArray34 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.Class<?> wildcardClass37 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.database = "";
        java.lang.String str40 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(charArray34);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        boolean boolean14 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions13.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        int int9 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        int int11 = mongoClientOptions7.getConnectTimeout();
        boolean boolean12 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        int int12 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str13 = mongoProperties0.uri;
        boolean boolean14 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions17.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions17.getDbEncoderFactory();
        long long20 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        int int21 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        int int23 = mongoClientOptions17.getSocketTimeout();
        boolean boolean24 = mongoClientOptions17.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) (short) 10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.database = "hi!";
        char[] charArray11 = mongoProperties0.password;
        mongoProperties0.port = 20000;
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        int int17 = mongoClientOptions11.getMinConnectionsPerHost();
        long long18 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int19 = mongoClientOptions11.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions12.getSocketFactory();
        long long14 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions12.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions12.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.heartbeatSocketTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.setUri("");
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        mongoProperties12.host = "hi!";
        mongoProperties12.authenticationDatabase = "";
        java.lang.String str18 = mongoProperties12.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.autoConnectRetry(false);
        boolean boolean35 = mongoClientOptions26.equals((java.lang.Object) false);
        int int36 = mongoClientOptions26.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties12.builder(mongoClientOptions26);
        int int38 = mongoClientOptions26.getHeartbeatFrequency();
        int int39 = mongoClientOptions26.getHeartbeatThreadCount();
        int int40 = mongoClientOptions26.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder42 = builder11.readPreference(readPreference41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        mongoProperties0.setHost("");
        mongoProperties0.host = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str18 = mongoProperties0.database;
        java.lang.String str19 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass21 = mongoProperties20.fieldNamingStrategy;
        mongoProperties20.host = "hi!";
        mongoProperties20.setUri("mongodb://localhost/test");
        mongoProperties20.authenticationDatabase = "test";
        mongoProperties20.authenticationDatabase = "";
        java.lang.String str30 = mongoProperties20.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        mongoProperties31.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass38 = mongoProperties37.fieldNamingStrategy;
        mongoProperties37.host = "hi!";
        int int41 = mongoProperties37.getDEFAULT_PORT();
        mongoProperties37.host = "";
        mongoProperties37.setHost("hi!");
        char[] charArray50 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties37.setPassword(charArray50);
        char[] charArray52 = mongoProperties37.password;
        mongoProperties31.setPassword(charArray52);
        mongoProperties20.password = charArray52;
        mongoProperties0.setPassword(charArray52);
        java.lang.String str56 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 27017 + "'", int41 == 27017);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        char[] charArray7 = null;
        mongoProperties0.password = charArray7;
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        java.lang.Integer int10 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions14);
        java.lang.String str19 = mongoProperties0.getHost();
        java.lang.String str20 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minConnectionsPerHost(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "test";
        mongoProperties0.authenticationDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        char[] charArray13 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties0.setPassword(charArray13);
        char[] charArray15 = mongoProperties0.password;
        boolean boolean16 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        int int13 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(false);
        boolean boolean21 = mongoClientOptions12.equals((java.lang.Object) false);
        int int22 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = mongoProperties0.builder(mongoClientOptions12);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getSocketTimeout();
        int int35 = mongoClientOptions33.getHeartbeatThreadCount();
        int int36 = mongoClientOptions33.getHeartbeatThreadCount();
        java.lang.String str37 = mongoClientOptions33.getRequiredReplicaSetName();
        int int38 = mongoClientOptions33.getHeartbeatConnectTimeout();
        boolean boolean39 = mongoClientOptions33.isAutoConnectRetry();
        int int40 = mongoClientOptions33.getAcceptableLatencyDifference();
        boolean boolean41 = mongoClientOptions33.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder23.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder23.minConnectionsPerHost(5);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.username;
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions7.getConnectTimeout();
        int int15 = mongoClientOptions7.getMaxWaitTime();
        int int16 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(20000);
        java.lang.Class<?> wildcardClass13 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean11 = mongoClientOptions7.isAlwaysUseMBeans();
        int int12 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.uri;
        mongoProperties0.gridFsDatabase = "hi!";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        boolean boolean16 = mongoProperties14.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClient mongoClient25 = mongoProperties14.createMongoClient(mongoClientOptions24);
        char[] charArray26 = mongoProperties14.getPassword();
        mongoProperties14.clearPassword();
        java.lang.String str28 = mongoProperties14.authenticationDatabase;
        java.lang.String str29 = mongoProperties14.uri;
        mongoProperties14.gridFsDatabase = "hi!";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        java.lang.String str36 = mongoProperties32.uri;
        org.springframework.core.env.Environment environment37 = null;
        int int38 = mongoProperties32.determinePort(environment37);
        java.lang.String str39 = mongoProperties32.host;
        java.lang.String str40 = mongoProperties32.getUri();
        java.lang.String str41 = mongoProperties32.getAuthenticationDatabase();
        mongoProperties32.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass45 = mongoProperties44.fieldNamingStrategy;
        mongoProperties44.host = "hi!";
        int int48 = mongoProperties44.getDEFAULT_PORT();
        mongoProperties44.host = "";
        mongoProperties44.setHost("hi!");
        java.lang.String str53 = mongoProperties44.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass55 = mongoProperties54.fieldNamingStrategy;
        java.lang.String str56 = mongoProperties54.getAuthenticationDatabase();
        boolean boolean57 = mongoProperties54.hasCustomCredentials();
        boolean boolean58 = mongoProperties54.hasCustomAddress();
        java.lang.String str59 = mongoProperties54.uri;
        mongoProperties54.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass63 = mongoProperties62.fieldNamingStrategy;
        java.lang.String str64 = mongoProperties62.getAuthenticationDatabase();
        char[] charArray65 = mongoProperties62.getPassword();
        mongoProperties62.host = "hi!";
        mongoProperties62.setUsername("hi!");
        char[] charArray71 = new char[] { '4' };
        mongoProperties62.password = charArray71;
        mongoProperties54.setPassword(charArray71);
        mongoProperties44.setPassword(charArray71);
        java.lang.Class<?> wildcardClass75 = mongoProperties44.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties76 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass77 = mongoProperties76.fieldNamingStrategy;
        mongoProperties76.host = "hi!";
        int int80 = mongoProperties76.getDEFAULT_PORT();
        mongoProperties76.host = "";
        mongoProperties76.setHost("hi!");
        char[] charArray89 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties76.setPassword(charArray89);
        mongoProperties44.password = charArray89;
        mongoProperties32.setPassword(charArray89);
        mongoProperties14.setPassword(charArray89);
        mongoProperties0.setPassword(charArray89);
        mongoProperties0.setUsername("");
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(charArray26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "mongodb://localhost/test" + "'", str40, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 27017 + "'", int48 == 27017);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "mongodb://localhost/test" + "'", str59, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(charArray65);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4]");
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 27017 + "'", int80 == 27017);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[ , a, a, 4]");
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getLocalThreshold();
        javax.net.SocketFactory socketFactory36 = mongoClientOptions34.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder26.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder11.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference(10000);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) 5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions7.getWriteConcern();
        int int11 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.port = 10000;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions20.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions20.equals((java.lang.Object) "");
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        boolean boolean34 = mongoClientOptions20.equals((java.lang.Object) builder33);
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions20.getDbDecoderFactory();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions20, environment36);
        boolean boolean38 = mongoClientOptions20.isSocketKeepAlive();
        int int39 = mongoClientOptions20.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5000 + "'", int22 == 5000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        java.lang.String str5 = mongoProperties0.host;
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties0.getUsername();
        java.lang.String str14 = mongoProperties0.username;
        java.lang.String str15 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        java.lang.String str22 = mongoProperties18.uri;
        mongoProperties18.clearPassword();
        java.lang.String str24 = mongoProperties18.getUsername();
        mongoProperties18.database = "hi!";
        java.lang.String str27 = mongoProperties18.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        int int32 = mongoProperties28.getDEFAULT_PORT();
        mongoProperties28.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass37 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.port = 10;
        mongoProperties35.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties35.createMongoClient(mongoClientOptions42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties35.createMongoClient(mongoClientOptions51, environment52);
        java.lang.String str54 = mongoProperties35.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        com.mongodb.MongoClient mongoClient63 = mongoProperties35.createMongoClient(mongoClientOptions62);
        com.mongodb.MongoClient mongoClient64 = mongoProperties28.createMongoClient(mongoClientOptions62);
        int int65 = mongoClientOptions62.getAcceptableLatencyDifference();
        int int66 = mongoClientOptions62.getHeartbeatFrequency();
        int int67 = mongoClientOptions62.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder68 = mongoProperties18.builder(mongoClientOptions62);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties69 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass70 = mongoProperties69.fieldNamingStrategy;
        boolean boolean71 = mongoProperties69.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder76.build();
        com.mongodb.MongoClient mongoClient80 = mongoProperties69.createMongoClient(mongoClientOptions79);
        int int81 = mongoClientOptions79.getMaxWaitTime();
        int int82 = mongoClientOptions79.getHeartbeatConnectTimeout();
        int int83 = mongoClientOptions79.getMinConnectionsPerHost();
        boolean boolean84 = mongoClientOptions79.isAlwaysUseMBeans();
        int int85 = mongoClientOptions79.getHeartbeatConnectTimeout();
        int int86 = mongoClientOptions79.getConnectTimeout();
        int int87 = mongoClientOptions79.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder88 = mongoProperties18.builder(mongoClientOptions79);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient89 = mongoProperties0.createMongoClient(mongoClientOptions79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: can't specify port in construct and via host");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 27017 + "'", int32 == 27017);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5000 + "'", int66 == 5000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 15 + "'", int67 == 15);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertNotNull(mongoClient80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 120000 + "'", int81 == 120000);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 20000 + "'", int82 == 20000);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20000 + "'", int85 == 20000);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 120000 + "'", int87 == 120000);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) 52);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.readPreference(readPreference14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getLocalThreshold();
        boolean boolean35 = mongoClientOptions33.isCursorFinalizerEnabled();
        int int36 = mongoClientOptions33.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder23.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder20.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder15.dbDecoderFactory(dBDecoderFactory37);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder42 = builder15.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getMaxWaitTime();
        java.lang.String str19 = mongoClientOptions16.toString();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout(97);
        java.lang.Class<?> wildcardClass30 = builder29.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass30;
        mongoProperties0.gridFsDatabase = "";
        char[] charArray34 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.Class<?> wildcardClass37 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.database = "";
        mongoProperties0.database = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(charArray34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions18.getHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions18.isSocketKeepAlive();
        int int22 = mongoClientOptions18.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions18.getSocketFactory();
        int int24 = mongoClientOptions18.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.Integer int27 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.localThreshold(5);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.String str17 = mongoProperties8.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        mongoProperties18.setUri("mongodb://localhost/test");
        mongoProperties18.authenticationDatabase = "test";
        mongoProperties18.authenticationDatabase = "";
        java.lang.String str28 = mongoProperties18.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass30 = mongoProperties29.fieldNamingStrategy;
        mongoProperties29.host = "hi!";
        mongoProperties29.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        mongoProperties35.host = "hi!";
        int int39 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.host = "";
        mongoProperties35.setHost("hi!");
        char[] charArray48 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties35.setPassword(charArray48);
        char[] charArray50 = mongoProperties35.password;
        mongoProperties29.setPassword(charArray50);
        mongoProperties18.password = charArray50;
        mongoProperties8.password = charArray50;
        mongoProperties0.setPassword(charArray50);
        java.lang.Class<?> wildcardClass55 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str56 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        boolean boolean65 = mongoClientOptions64.isSocketKeepAlive();
        java.lang.String str66 = mongoClientOptions64.getRequiredReplicaSetName();
        int int67 = mongoClientOptions64.getMaxWaitTime();
        int int68 = mongoClientOptions64.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder69 = mongoProperties0.builder(mongoClientOptions64);
        int int70 = mongoClientOptions64.getMaxConnectionIdleTime();
        int int71 = mongoClientOptions64.getHeartbeatConnectRetryFrequency();
        boolean boolean72 = mongoClientOptions64.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 120000 + "'", int67 == 120000);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 500 + "'", int71 == 500);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(true);
        java.lang.Class<?> wildcardClass11 = builder10.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        char[] charArray8 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        long long17 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions16.getMinConnectionsPerHost();
        int int19 = mongoClientOptions16.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        java.lang.String str21 = mongoClientOptions16.getRequiredReplicaSetName();
        boolean boolean22 = mongoClientOptions16.isSocketKeepAlive();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions10.getWriteConcern();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        java.lang.String str15 = mongoClientOptions10.toString();
        boolean boolean16 = mongoClientOptions10.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getLocalThreshold();
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        int int21 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int22 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions14.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions7.toString();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions7.getWriteConcern();
        java.lang.String str13 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean14 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        int int16 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        boolean boolean14 = mongoClientOptions7.isAutoConnectRetry();
        int int15 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.String str15 = mongoProperties13.username;
        java.lang.String str16 = mongoProperties13.host;
        mongoProperties13.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        boolean boolean21 = mongoProperties19.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        com.mongodb.MongoClient mongoClient30 = mongoProperties19.createMongoClient(mongoClientOptions29);
        int int31 = mongoClientOptions29.getMaxWaitTime();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties13.createMongoClient(mongoClientOptions29, environment33);
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions29);
        boolean boolean36 = mongoClientOptions29.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions29.getReadPreference();
        long long38 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(35);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        boolean boolean8 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions20.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions20.getDbEncoderFactory();
        long long23 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int24 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str25 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean26 = mongoClientOptions20.isAutoConnectRetry();
        int int27 = mongoClientOptions20.getLocalThreshold();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions20.getSocketFactory();
        int int29 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions20.getReadPreference();
        boolean boolean31 = mongoClientOptions7.equals((java.lang.Object) readPreference30);
        int int32 = mongoClientOptions7.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        mongoProperties12.host = "hi!";
        mongoProperties12.setUri("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties12.getHost();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties12.createMongoClient(mongoClientOptions26, environment27);
        java.lang.String str29 = mongoClientOptions26.toString();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions34.getReadPreference();
        boolean boolean36 = mongoClientOptions26.equals((java.lang.Object) mongoClientOptions34);
        java.lang.String str37 = mongoClientOptions34.getDescription();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions34);
        java.lang.Class<?> wildcardClass39 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str40 = mongoProperties0.getGridFsDatabase();
        java.lang.String str41 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray9 = mongoProperties0.password;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("test");
        java.lang.Class<?> wildcardClass37 = builder34.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass37;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        long long14 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectRetryFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties13.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        long long27 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        boolean boolean28 = mongoClientOptions24.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties13.builder(mongoClientOptions24);
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) mongoProperties13);
        int int31 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int32 = mongoClientOptions7.getLocalThreshold();
        long long33 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder49.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatSocketTimeout();
        int int65 = mongoClientOptions63.getHeartbeatFrequency();
        boolean boolean66 = mongoClientOptions63.isSocketKeepAlive();
        int int67 = mongoClientOptions63.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory68 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder55.dbDecoderFactory(dBDecoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder46.dbDecoderFactory(dBDecoderFactory68);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder46.build();
        com.mongodb.MongoClientOptions.Builder builder73 = builder46.maxAutoConnectRetryTime((long) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder75 = builder46.connectionsPerHost(10);
        boolean boolean76 = mongoClientOptions7.equals((java.lang.Object) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5000 + "'", int65 == 5000);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 120000 + "'", int67 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        int int20 = mongoClientOptions14.getConnectionsPerHost();
        int int21 = mongoClientOptions14.getConnectionsPerHost();
        int int22 = mongoClientOptions14.getHeartbeatThreadCount();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        java.lang.String str12 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(writeConcern15);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        long long15 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str16 = mongoClientOptions7.toString();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions7.getReadPreference();
        java.lang.String str18 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(readPreference17);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime(0L);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.threadsAllowedToBlockForConnectionMultiplier(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        int int17 = mongoClientOptions11.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions11.getReadPreference();
        int int19 = mongoClientOptions11.getMinConnectionsPerHost();
        int int20 = mongoClientOptions11.getSocketTimeout();
        int int21 = mongoClientOptions11.getConnectionsPerHost();
        int int22 = mongoClientOptions11.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean20 = mongoClientOptions18.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory21 = mongoClientOptions18.getSocketFactory();
        boolean boolean22 = mongoClientOptions18.isCursorFinalizerEnabled();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.dbDecoderFactory(dBDecoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int6 = mongoProperties0.port;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        java.lang.String str12 = mongoProperties8.uri;
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties8.determinePort(environment13);
        java.lang.String str15 = mongoProperties8.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass17 = mongoProperties16.fieldNamingStrategy;
        mongoProperties16.host = "hi!";
        int int20 = mongoProperties16.getDEFAULT_PORT();
        mongoProperties16.host = "";
        mongoProperties16.setHost("hi!");
        char[] charArray29 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties16.setPassword(charArray29);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        int int35 = mongoProperties31.getDEFAULT_PORT();
        mongoProperties31.host = "";
        mongoProperties31.setHost("hi!");
        char[] charArray44 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties31.setPassword(charArray44);
        mongoProperties16.password = charArray44;
        mongoProperties8.setPassword(charArray44);
        mongoProperties0.setPassword(charArray44);
        boolean boolean49 = mongoProperties0.hasCustomCredentials();
        char[] charArray50 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        mongoProperties5.host = "hi!";
        java.lang.String str9 = mongoProperties5.uri;
        mongoProperties5.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder22 = mongoProperties5.builder(mongoClientOptions19);
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int24 = mongoClientOptions19.getLocalThreshold();
        int int25 = mongoClientOptions19.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        int int27 = mongoClientOptions19.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions19, environment28);
        javax.net.SocketFactory socketFactory30 = mongoClientOptions19.getSocketFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5000 + "'", int25 == 5000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(socketFactory30);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions20.getReadPreference();
        int int22 = mongoClientOptions20.getAcceptableLatencyDifference();
        int int23 = mongoClientOptions20.getHeartbeatThreadCount();
        boolean boolean24 = mongoClientOptions7.equals((java.lang.Object) int23);
        int int25 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean26 = mongoClientOptions7.isAutoConnectRetry();
        boolean boolean27 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.connectionsPerHost(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass12 = mongoProperties10.getFieldNamingStrategy();
        mongoProperties10.port = 10;
        mongoProperties10.database = "hi!";
        java.lang.String str17 = mongoProperties10.getUri();
        boolean boolean18 = mongoProperties10.hasCustomCredentials();
        java.lang.String str19 = mongoProperties10.authenticationDatabase;
        char[] charArray20 = mongoProperties10.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.fieldNamingStrategy;
        mongoProperties21.host = "hi!";
        mongoProperties21.setUri("mongodb://localhost/test");
        mongoProperties21.authenticationDatabase = "test";
        mongoProperties21.authenticationDatabase = "";
        java.lang.String str31 = mongoProperties21.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        mongoProperties32.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass39 = mongoProperties38.fieldNamingStrategy;
        mongoProperties38.host = "hi!";
        int int42 = mongoProperties38.getDEFAULT_PORT();
        mongoProperties38.host = "";
        mongoProperties38.setHost("hi!");
        char[] charArray51 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties38.setPassword(charArray51);
        char[] charArray53 = mongoProperties38.password;
        mongoProperties32.setPassword(charArray53);
        mongoProperties21.password = charArray53;
        mongoProperties10.password = charArray53;
        mongoProperties0.password = charArray53;
        mongoProperties0.username = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 27017 + "'", int42 == 27017);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , a, a, 4]");
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        int int5 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.uri = "test";
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.getUri();
        mongoProperties0.username = "";
        java.lang.Integer int24 = mongoProperties0.port;
        java.lang.Integer int25 = mongoProperties0.getPort();
        mongoProperties0.gridFsDatabase = "";
        boolean boolean28 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int29 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        int int6 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getSocketTimeout();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        java.lang.String str13 = mongoProperties11.getAuthenticationDatabase();
        char[] charArray14 = mongoProperties11.getPassword();
        mongoProperties11.host = "hi!";
        java.lang.String str17 = mongoProperties11.gridFsDatabase;
        java.lang.String str18 = mongoProperties11.getUri();
        boolean boolean19 = mongoClientOptions7.equals((java.lang.Object) mongoProperties11);
        char[] charArray20 = new char[] {};
        mongoProperties11.password = charArray20;
        java.lang.String str22 = mongoProperties11.getMongoClientDatabase();
        mongoProperties11.setAuthenticationDatabase("hi!");
        char[] charArray25 = mongoProperties11.getPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "test" + "'", str22, "test");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str11 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.port = 120000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int10 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        boolean boolean14 = mongoProperties12.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        com.mongodb.MongoClient mongoClient23 = mongoProperties12.createMongoClient(mongoClientOptions22);
        int int24 = mongoClientOptions22.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = builder7.writeConcern(writeConcern25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.writeConcern(writeConcern25);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions35.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder27.writeConcern(writeConcern38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder27.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass43 = mongoProperties42.fieldNamingStrategy;
        java.lang.String str44 = mongoProperties42.getAuthenticationDatabase();
        boolean boolean45 = mongoProperties42.hasCustomCredentials();
        boolean boolean46 = mongoProperties42.hasCustomAddress();
        mongoProperties42.username = "";
        boolean boolean49 = mongoProperties42.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getSocketTimeout();
        int int59 = mongoClientOptions57.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties42.createMongoClient(mongoClientOptions57, environment60);
        boolean boolean62 = mongoClientOptions57.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference63 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder64 = builder41.readPreference(readPreference63);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(readPreference63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        boolean boolean34 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient35 = mongoProperties17.createMongoClient(mongoClientOptions32);
        boolean boolean36 = mongoProperties17.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getSocketTimeout();
        int int46 = mongoClientOptions44.getHeartbeatThreadCount();
        int int47 = mongoClientOptions44.getHeartbeatFrequency();
        int int48 = mongoClientOptions44.getHeartbeatConnectRetryFrequency();
        long long49 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties17.builder(mongoClientOptions44);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatConnectRetryFrequency((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass56 = mongoProperties55.fieldNamingStrategy;
        mongoProperties55.host = "hi!";
        java.lang.String str59 = mongoProperties55.uri;
        mongoProperties55.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getLocalThreshold();
        boolean boolean71 = mongoClientOptions69.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder72 = mongoProperties55.builder(mongoClientOptions69);
        com.mongodb.ReadPreference readPreference73 = mongoClientOptions69.getReadPreference();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions69.getReadPreference();
        int int75 = mongoClientOptions69.getAcceptableLatencyDifference();
        int int76 = mongoClientOptions69.getMaxConnectionIdleTime();
        int int77 = mongoClientOptions69.getConnectTimeout();
        javax.net.SocketFactory socketFactory78 = mongoClientOptions69.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder79 = builder54.socketFactory(socketFactory78);
        com.mongodb.MongoClientOptions.Builder builder80 = builder16.socketFactory(socketFactory78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5000 + "'", int47 == 5000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 500 + "'", int48 == 500);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "mongodb://localhost/test" + "'", str59, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(readPreference73);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10000 + "'", int77 == 10000);
        org.junit.Assert.assertNotNull(socketFactory78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        boolean boolean13 = mongoClientOptions10.isAlwaysUseMBeans();
        int int14 = mongoClientOptions10.getLocalThreshold();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatThreadCount((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean16 = mongoClientOptions7.isAutoConnectRetry();
        int int17 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.String str12 = mongoClientOptions10.getDescription();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions10.getSocketFactory();
        int int14 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        int int17 = mongoClientOptions10.getSocketTimeout();
        int int18 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int18 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setHost("hi!");
        java.lang.String str15 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(socketFactory9);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getUsername();
        org.springframework.core.env.Environment environment11 = null;
        int int12 = mongoProperties0.determinePort(environment11);
        java.lang.String str13 = mongoProperties0.username;
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        int int12 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions7.getReadPreference();
        int int14 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        int int15 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.uri = "test";
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        org.springframework.core.env.Environment environment9 = null;
        int int10 = mongoProperties0.determinePort(environment9);
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean10 = mongoClientOptions7.isAutoConnectRetry();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions7.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions15, environment18);
        boolean boolean20 = mongoClientOptions15.isAlwaysUseMBeans();
        boolean boolean21 = mongoClientOptions15.isCursorFinalizerEnabled();
        long long22 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        int int23 = mongoClientOptions15.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions15.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions15.getDbEncoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.maxAutoConnectRetryTime((long) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder10.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass13 = mongoProperties11.getFieldNamingStrategy();
        mongoProperties11.port = 10;
        mongoProperties11.database = "hi!";
        java.lang.String str18 = mongoProperties11.getUri();
        boolean boolean19 = mongoProperties11.hasCustomCredentials();
        java.lang.String str20 = mongoProperties11.authenticationDatabase;
        char[] charArray21 = mongoProperties11.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        mongoProperties22.host = "hi!";
        mongoProperties22.setUri("mongodb://localhost/test");
        mongoProperties22.authenticationDatabase = "test";
        mongoProperties22.authenticationDatabase = "";
        java.lang.String str32 = mongoProperties22.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass34 = mongoProperties33.fieldNamingStrategy;
        mongoProperties33.host = "hi!";
        mongoProperties33.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        mongoProperties39.host = "hi!";
        int int43 = mongoProperties39.getDEFAULT_PORT();
        mongoProperties39.host = "";
        mongoProperties39.setHost("hi!");
        char[] charArray52 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties39.setPassword(charArray52);
        char[] charArray54 = mongoProperties39.password;
        mongoProperties33.setPassword(charArray54);
        mongoProperties22.password = charArray54;
        mongoProperties11.password = charArray54;
        mongoProperties0.password = charArray54;
        boolean boolean59 = mongoProperties0.hasCustomAddress();
        java.lang.String str60 = mongoProperties0.database;
        java.lang.String str61 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 27017 + "'", int43 == 27017);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "test" + "'", str61, "test");
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getHost();
        boolean boolean4 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.database = "";
        java.lang.Integer int7 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int22 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder9.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder31 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getLocalThreshold();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(readPreference11);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        int int15 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions7.getWriteConcern();
        int int17 = mongoClientOptions7.getConnectionsPerHost();
        int int18 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass16 = mongoProperties14.getFieldNamingStrategy();
        mongoProperties14.port = 10;
        mongoProperties14.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties14.createMongoClient(mongoClientOptions21);
        java.lang.String str23 = mongoProperties14.gridFsDatabase;
        mongoProperties14.setGridFsDatabase("mongodb://localhost/test");
        int int26 = mongoProperties14.getDEFAULT_PORT();
        char[] charArray27 = mongoProperties14.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        mongoProperties28.setUri("mongodb://localhost/test");
        mongoProperties28.authenticationDatabase = "test";
        mongoProperties28.authenticationDatabase = "";
        java.lang.String str38 = mongoProperties28.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        mongoProperties39.host = "hi!";
        mongoProperties39.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass46 = mongoProperties45.fieldNamingStrategy;
        mongoProperties45.host = "hi!";
        int int49 = mongoProperties45.getDEFAULT_PORT();
        mongoProperties45.host = "";
        mongoProperties45.setHost("hi!");
        char[] charArray58 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties45.setPassword(charArray58);
        char[] charArray60 = mongoProperties45.password;
        mongoProperties39.setPassword(charArray60);
        mongoProperties28.password = charArray60;
        mongoProperties28.setUri("");
        char[] charArray65 = mongoProperties28.password;
        org.springframework.core.env.Environment environment66 = null;
        int int67 = mongoProperties28.determinePort(environment66);
        java.lang.String str68 = mongoProperties28.getHost();
        mongoProperties28.authenticationDatabase = "test";
        char[] charArray71 = mongoProperties28.password;
        mongoProperties14.password = charArray71;
        mongoProperties0.password = charArray71;
        java.lang.String str74 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 27017 + "'", int26 == 27017);
        org.junit.Assert.assertNull(charArray27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 27017 + "'", int49 == 27017);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 27017 + "'", int67 == 27017);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , a, a, 4]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "test" + "'", str74, "test");
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        long long11 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions18.getHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions18.isSocketKeepAlive();
        int int22 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder4.dbDecoderFactory(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout((int) (short) 1);
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass17;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        mongoProperties19.host = "hi!";
        mongoProperties19.setUri("mongodb://localhost/test");
        java.lang.String str25 = mongoProperties19.getHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties19.createMongoClient(mongoClientOptions33, environment34);
        java.lang.String str36 = mongoClientOptions33.toString();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder37.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions41.getReadPreference();
        boolean boolean43 = mongoClientOptions33.equals((java.lang.Object) mongoClientOptions41);
        java.lang.String str44 = mongoClientOptions33.toString();
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties0.createMongoClient(mongoClientOptions33, environment45);
        boolean boolean47 = mongoClientOptions33.isAutoConnectRetry();
        int int48 = mongoClientOptions33.getConnectionsPerHost();
        boolean boolean49 = mongoClientOptions33.isSocketKeepAlive();
        java.lang.String str50 = mongoClientOptions33.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.Class<?> wildcardClass12 = mongoClientOptions7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        char[] charArray13 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties0.setPassword(charArray13);
        java.lang.String str15 = mongoProperties0.gridFsDatabase;
        java.lang.String str16 = mongoProperties0.getUri();
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        java.lang.String str19 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.username;
        java.lang.String str9 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions15.getReadPreference();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions15.getReadPreference();
        int int22 = mongoClientOptions15.getHeartbeatSocketTimeout();
        boolean boolean23 = mongoClientOptions15.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions12.getSocketFactory();
        long long14 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions12.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions12.getWriteConcern();
        int int17 = mongoClientOptions12.getHeartbeatFrequency();
        int int18 = mongoClientOptions12.getSocketTimeout();
        int int19 = mongoClientOptions12.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions12.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder2.dbDecoderFactory(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        java.lang.Class<?> wildcardClass27 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = (-1);
        mongoProperties0.setHost("");
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str34 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.dbEncoderFactory(dBEncoderFactory18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "";
        mongoProperties0.uri = "hi!";
        java.lang.String str13 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.uri = "test";
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        java.lang.String str14 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.port = 5;
        java.lang.String str8 = mongoProperties0.getUri();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass11 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        int int16 = mongoClientOptions10.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        java.lang.String str27 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int10 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder27.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        java.lang.Class<?> wildcardClass42 = builder41.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass42;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.setHost("test");
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        java.lang.Class<?> wildcardClass12 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUri("test");
        mongoProperties0.authenticationDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        int int15 = mongoProperties11.getDEFAULT_PORT();
        mongoProperties11.host = "";
        mongoProperties11.setHost("hi!");
        char[] charArray24 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties11.setPassword(charArray24);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass27 = mongoProperties26.fieldNamingStrategy;
        mongoProperties26.host = "hi!";
        int int30 = mongoProperties26.getDEFAULT_PORT();
        mongoProperties26.host = "";
        mongoProperties26.setHost("hi!");
        char[] charArray39 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties26.setPassword(charArray39);
        mongoProperties11.password = charArray39;
        mongoProperties0.password = charArray39;
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 27017 + "'", int30 == 27017);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , a, a, 4]");
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        char[] charArray12 = null;
        mongoProperties0.password = charArray12;
        char[] charArray14 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(charArray14);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass42 = mongoProperties41.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass43 = mongoProperties41.getFieldNamingStrategy();
        mongoProperties41.port = 10;
        mongoProperties41.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties41.createMongoClient(mongoClientOptions48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties41.createMongoClient(mongoClientOptions57, environment58);
        com.mongodb.DBEncoderFactory dBEncoderFactory60 = mongoClientOptions57.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder34.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder25.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder63 = builder14.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder14.build();
        int int65 = mongoClientOptions64.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern66 = mongoClientOptions64.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder67 = builder2.writeConcern(writeConcern66);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNotNull(dBEncoderFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(writeConcern66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isAutoConnectRetry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass14 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties12.port = 10;
        mongoProperties12.database = "hi!";
        java.lang.String str19 = mongoProperties12.getUri();
        boolean boolean20 = mongoProperties12.hasCustomCredentials();
        java.lang.String str21 = mongoProperties12.authenticationDatabase;
        char[] charArray22 = mongoProperties12.getPassword();
        mongoProperties12.setPort((java.lang.Integer) 10000);
        boolean boolean25 = mongoClientOptions7.equals((java.lang.Object) 10000);
        javax.net.SocketFactory socketFactory26 = mongoClientOptions7.getSocketFactory();
        int int27 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int28 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setHost("");
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout(52);
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass23;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        boolean boolean14 = mongoClientOptions7.isAlwaysUseMBeans();
        int int15 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getHeartbeatSocketTimeout();
        int int42 = mongoClientOptions40.getHeartbeatFrequency();
        boolean boolean43 = mongoClientOptions40.isSocketKeepAlive();
        int int44 = mongoClientOptions40.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions40.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder26.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder23.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder14.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass55 = mongoProperties54.fieldNamingStrategy;
        boolean boolean56 = mongoProperties54.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        com.mongodb.MongoClient mongoClient65 = mongoProperties54.createMongoClient(mongoClientOptions64);
        int int66 = mongoClientOptions64.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions64.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder49.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder77 = builder73.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        boolean boolean80 = mongoClientOptions78.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory81 = mongoClientOptions78.getSocketFactory();
        int int82 = mongoClientOptions78.getMaxConnectionLifeTime();
        int int83 = mongoClientOptions78.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern84 = mongoClientOptions78.getWriteConcern();
        int int85 = mongoClientOptions78.getSocketTimeout();
        int int86 = mongoClientOptions78.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern87 = mongoClientOptions78.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder88 = builder70.writeConcern(writeConcern87);
        com.mongodb.MongoClientOptions.Builder builder89 = builder14.writeConcern(writeConcern87);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5000 + "'", int42 == 5000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 120000 + "'", int44 == 120000);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertNotNull(mongoClient65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(socketFactory81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(writeConcern84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 20000 + "'", int86 == 20000);
        org.junit.Assert.assertNotNull(writeConcern87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        org.springframework.core.env.Environment environment3 = null;
        int int4 = mongoProperties0.determinePort(environment3);
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int6 = mongoProperties0.getPort();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.Integer int8 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.gridFsDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions29.getHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions29.equals((java.lang.Object) "");
        int int34 = mongoClientOptions29.getHeartbeatConnectTimeout();
        boolean boolean35 = mongoClientOptions29.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxWaitTime((int) 'a');
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.port = 20000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        boolean boolean34 = mongoProperties32.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        com.mongodb.MongoClient mongoClient43 = mongoProperties32.createMongoClient(mongoClientOptions42);
        int int44 = mongoClientOptions42.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder29.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder23.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder16.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder50 = builder16.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("");
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        javax.net.SocketFactory socketFactory72 = mongoClientOptions71.getSocketFactory();
        long long73 = mongoClientOptions71.getMaxAutoConnectRetryTime();
        int int74 = mongoClientOptions71.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference75 = mongoClientOptions71.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder76 = builder61.readPreference(readPreference75);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties77 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass78 = mongoProperties77.fieldNamingStrategy;
        boolean boolean79 = mongoProperties77.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder80 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder84.build();
        com.mongodb.MongoClient mongoClient88 = mongoProperties77.createMongoClient(mongoClientOptions87);
        int int89 = mongoClientOptions87.getMaxWaitTime();
        int int90 = mongoClientOptions87.getHeartbeatConnectTimeout();
        int int91 = mongoClientOptions87.getMaxWaitTime();
        int int92 = mongoClientOptions87.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory93 = mongoClientOptions87.getDbEncoderFactory();
        int int94 = mongoClientOptions87.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern95 = mongoClientOptions87.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder96 = builder76.writeConcern(writeConcern95);
        com.mongodb.MongoClientOptions.Builder builder97 = builder16.writeConcern(writeConcern95);
        com.mongodb.MongoClientOptions.Builder builder99 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(socketFactory72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10L + "'", long73 == 10L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20000 + "'", int74 == 20000);
        org.junit.Assert.assertNotNull(readPreference75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertNotNull(mongoClient88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 120000 + "'", int89 == 120000);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 20000 + "'", int90 == 20000);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 120000 + "'", int91 == 120000);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 20000 + "'", int92 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 20000 + "'", int94 == 20000);
        org.junit.Assert.assertNotNull(writeConcern95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        java.lang.String str13 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getHeartbeatSocketTimeout();
        long long13 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str27 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatSocketTimeout();
        int int37 = mongoClientOptions35.getHeartbeatFrequency();
        boolean boolean38 = mongoClientOptions35.isSocketKeepAlive();
        int int39 = mongoClientOptions35.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions35.getSocketFactory();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions35.getReadPreference();
        int int42 = mongoClientOptions35.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions35, environment43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: spring.data.mongodb.port=0 and no local mongo port configuration is available");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }
}

