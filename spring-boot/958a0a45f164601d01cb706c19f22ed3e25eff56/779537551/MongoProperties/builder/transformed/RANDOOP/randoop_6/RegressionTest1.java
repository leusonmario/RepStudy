import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.database = "mongodb://localhost/test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass7 = mongoProperties5.getFieldNamingStrategy();
        mongoProperties5.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass10 = mongoProperties5.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties5.fieldNamingStrategy = wildcardClass20;
        mongoProperties0.fieldNamingStrategy = wildcardClass20;
        java.lang.String str23 = mongoProperties0.getDatabase();
        java.lang.String str24 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb://localhost/test" + "'", str23, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        int int22 = mongoClientOptions19.getMaxWaitTime();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertNotNull(mongoClient24);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.heartbeatConnectTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder6.build();
        java.lang.String str12 = mongoClientOptions11.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions11.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(readPreference13);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.String str17 = mongoProperties8.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        mongoProperties18.setUri("mongodb://localhost/test");
        mongoProperties18.authenticationDatabase = "test";
        mongoProperties18.authenticationDatabase = "";
        java.lang.String str28 = mongoProperties18.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass30 = mongoProperties29.fieldNamingStrategy;
        mongoProperties29.host = "hi!";
        mongoProperties29.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        mongoProperties35.host = "hi!";
        int int39 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.host = "";
        mongoProperties35.setHost("hi!");
        char[] charArray48 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties35.setPassword(charArray48);
        char[] charArray50 = mongoProperties35.password;
        mongoProperties29.setPassword(charArray50);
        mongoProperties18.password = charArray50;
        mongoProperties8.password = charArray50;
        mongoProperties0.setPassword(charArray50);
        java.lang.Class<?> wildcardClass55 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str56 = mongoProperties0.database;
        boolean boolean57 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        long long15 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str16 = mongoClientOptions7.toString();
        int int17 = mongoClientOptions7.getLocalThreshold();
        int int18 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean19 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions25.getSocketFactory();
        long long27 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions25.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder17.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        com.mongodb.MongoClientOptions.Builder builder38 = builder33.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getLocalThreshold();
        boolean boolean19 = mongoClientOptions17.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder7.dbDecoderFactory(dBDecoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getSocketTimeout();
        int int32 = mongoClientOptions30.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions30.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder22.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder0.readPreference(readPreference33);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder0.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        char[] charArray7 = null;
        mongoProperties0.password = charArray7;
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        java.lang.String str10 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.port = 0;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass37 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.port = 10;
        mongoProperties35.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties35.createMongoClient(mongoClientOptions42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties35.createMongoClient(mongoClientOptions51, environment52);
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions51.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder28.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder19.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder8.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder59 = builder8.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder61 = builder8.maxAutoConnectRetryTime((long) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.Class<?> wildcardClass12 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.socketFactory(socketFactory27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions7.getSocketFactory();
        int int16 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Integer int7 = mongoProperties0.port;
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        java.lang.String str11 = mongoProperties0.database;
        java.lang.Integer int12 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setDatabase("hi!");
        char[] charArray20 = mongoProperties0.getPassword();
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray20);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        int int16 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatThreadCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        boolean boolean19 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        int int30 = mongoClientOptions27.getHeartbeatFrequency();
        int int31 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        long long32 = mongoClientOptions27.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions27);
        int int34 = mongoClientOptions27.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str18 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass19 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str9 = mongoProperties0.database;
        char[] charArray10 = mongoProperties0.getPassword();
        char[] charArray11 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        int int19 = mongoClientOptions16.getConnectTimeout();
        int int20 = mongoClientOptions16.getMinHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions16.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions16);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mongoClient22);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.username;
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str10 = mongoProperties0.username;
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray22 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        boolean boolean25 = mongoProperties23.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        com.mongodb.MongoClient mongoClient34 = mongoProperties23.createMongoClient(mongoClientOptions33);
        int int35 = mongoClientOptions33.getMaxWaitTime();
        int int36 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions33.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties0.builder(mongoClientOptions33);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getSocketTimeout();
        int int49 = mongoClientOptions47.getHeartbeatThreadCount();
        java.lang.String str50 = mongoClientOptions47.getRequiredReplicaSetName();
        java.lang.String str51 = mongoClientOptions47.toString();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties0.builder(mongoClientOptions47);
        int int53 = mongoClientOptions47.getMinHeartbeatFrequency();
        int int54 = mongoClientOptions47.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10000 + "'", int54 == 10000);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.heartbeatConnectRetryFrequency(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions25.getHeartbeatFrequency();
        boolean boolean28 = mongoClientOptions25.isSocketKeepAlive();
        int int29 = mongoClientOptions25.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder11.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder34.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions10.getWriteConcern();
        int int13 = mongoClientOptions10.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        long long14 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.heartbeatThreadCount((int) (byte) 10);
        boolean boolean31 = mongoClientOptions14.equals((java.lang.Object) (byte) 10);
        int int32 = mongoClientOptions14.getHeartbeatConnectRetryFrequency();
        java.lang.String str33 = mongoClientOptions14.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean10 = mongoClientOptions7.isAutoConnectRetry();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        int int12 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions10.getWriteConcern();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions10.getWriteConcern();
        int int15 = mongoClientOptions10.getLocalThreshold();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions10.getSocketFactory();
        int int17 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.heartbeatThreadCount((int) (byte) 10);
        boolean boolean31 = mongoClientOptions14.equals((java.lang.Object) (byte) 10);
        java.lang.String str32 = mongoClientOptions14.toString();
        int int33 = mongoClientOptions14.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int10 = mongoClientOptions7.getSocketTimeout();
        int int11 = mongoClientOptions7.getLocalThreshold();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertNotNull(socketFactory13);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(false);
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass18;
        boolean boolean20 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder10.heartbeatConnectRetryFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        int int21 = mongoClientOptions14.getHeartbeatFrequency();
        int int22 = mongoClientOptions14.getConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.gridFsDatabase = "hi!";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        char[] charArray14 = mongoProperties0.password;
        int int15 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int6 = mongoProperties0.port;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        java.lang.String str12 = mongoProperties8.uri;
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties8.determinePort(environment13);
        java.lang.String str15 = mongoProperties8.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass17 = mongoProperties16.fieldNamingStrategy;
        mongoProperties16.host = "hi!";
        int int20 = mongoProperties16.getDEFAULT_PORT();
        mongoProperties16.host = "";
        mongoProperties16.setHost("hi!");
        char[] charArray29 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties16.setPassword(charArray29);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        int int35 = mongoProperties31.getDEFAULT_PORT();
        mongoProperties31.host = "";
        mongoProperties31.setHost("hi!");
        char[] charArray44 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties31.setPassword(charArray44);
        mongoProperties16.password = charArray44;
        mongoProperties8.setPassword(charArray44);
        mongoProperties0.setPassword(charArray44);
        boolean boolean49 = mongoProperties0.hasCustomCredentials();
        java.lang.String str50 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.setHost("test");
        char[] charArray7 = mongoProperties0.password;
        java.lang.String str8 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.localThreshold((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.autoConnectRetry(false);
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass18;
        boolean boolean20 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        java.lang.String str17 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str19 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.authenticationDatabase = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass49 = mongoProperties48.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass50 = mongoProperties48.getFieldNamingStrategy();
        mongoProperties48.port = 10;
        mongoProperties48.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties48.createMongoClient(mongoClientOptions55);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties48.createMongoClient(mongoClientOptions64, environment65);
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions64.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder41.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder32.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder21.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder9.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder72 = builder4.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder77.build();
        int int81 = mongoClientOptions80.getHeartbeatSocketTimeout();
        int int82 = mongoClientOptions80.getHeartbeatFrequency();
        boolean boolean83 = mongoClientOptions80.isSocketKeepAlive();
        int int84 = mongoClientOptions80.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory85 = mongoClientOptions80.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory86 = mongoClientOptions80.getDbDecoderFactory();
        int int87 = mongoClientOptions80.getHeartbeatSocketTimeout();
        long long88 = mongoClientOptions80.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory89 = mongoClientOptions80.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder90 = builder72.socketFactory(socketFactory89);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoClientOptions80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5000 + "'", int82 == 5000);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 120000 + "'", int84 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory85);
        org.junit.Assert.assertNotNull(dBDecoderFactory86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 20000 + "'", int87 == 20000);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10L + "'", long88 == 10L);
        org.junit.Assert.assertNotNull(socketFactory89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        int int14 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        java.lang.String str4 = mongoProperties0.authenticationDatabase;
        int int5 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str6 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClientOptions.Builder builder8 = mongoProperties0.builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass26 = mongoProperties24.getFieldNamingStrategy();
        mongoProperties24.port = 10;
        mongoProperties24.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties24.createMongoClient(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties24.createMongoClient(mongoClientOptions40, environment41);
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder17.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder8.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxWaitTime(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        boolean boolean17 = mongoProperties15.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        com.mongodb.MongoClient mongoClient26 = mongoProperties15.createMongoClient(mongoClientOptions25);
        int int27 = mongoClientOptions25.getMaxWaitTime();
        int int28 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int29 = mongoClientOptions25.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder14.readPreference(readPreference30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        java.lang.Class<?> wildcardClass10 = mongoClientOptions9.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder28.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder19.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions48.getSocketFactory();
        long long50 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        int int51 = mongoClientOptions48.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory52 = mongoClientOptions48.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder40.dbDecoderFactory(dBDecoderFactory52);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        char[] charArray13 = mongoProperties0.password;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = charArray13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getAcceptableLatencyDifference();
        java.lang.String str22 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder6.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        int int16 = mongoClientOptions15.getLocalThreshold();
        int int17 = mongoClientOptions15.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectRetryFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions18.isSocketKeepAlive();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        int int24 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        int int25 = mongoClientOptions18.getConnectTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionLifeTime(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatFrequency(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) 27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder0.writeConcern(writeConcern19);
        java.lang.Class<?> wildcardClass21 = writeConcern19.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.port = 5000;
        mongoProperties0.port = 5000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionIdleTime();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        int int16 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatSocketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getLocalThreshold();
        int int17 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        char[] charArray8 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        long long17 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions16.getMinConnectionsPerHost();
        int int19 = mongoClientOptions16.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int21 = mongoClientOptions16.getMaxWaitTime();
        int int22 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int12 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        java.lang.String str5 = mongoProperties0.database;
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatFrequency((int) 'a');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        java.lang.String str11 = mongoProperties9.getAuthenticationDatabase();
        boolean boolean12 = mongoProperties9.hasCustomCredentials();
        boolean boolean13 = mongoProperties9.hasCustomAddress();
        mongoProperties9.username = "";
        boolean boolean16 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getSocketTimeout();
        int int26 = mongoClientOptions24.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties9.createMongoClient(mongoClientOptions24, environment27);
        javax.net.SocketFactory socketFactory29 = mongoClientOptions24.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        int int20 = mongoClientOptions16.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions16.getLocalThreshold();
        int int22 = mongoClientOptions16.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions16.getWriteConcern();
        int int24 = mongoClientOptions16.getHeartbeatConnectTimeout();
        long long25 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder2.writeConcern(writeConcern26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int22 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions30.getSocketFactory();
        long long32 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        java.lang.String str33 = mongoClientOptions30.getRequiredReplicaSetName();
        int int34 = mongoClientOptions30.getLocalThreshold();
        int int35 = mongoClientOptions30.getMaxConnectionIdleTime();
        int int36 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions30);
        mongoProperties0.setPort((java.lang.Integer) 35);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(mongoClient37);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions27);
        int int29 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions27.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getAcceptableLatencyDifference();
        java.lang.String str22 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str7 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.String str12 = mongoClientOptions10.getDescription();
        int int13 = mongoClientOptions10.getSocketTimeout();
        int int14 = mongoClientOptions10.getSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        long long16 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions22.getHeartbeatFrequency();
        boolean boolean25 = mongoClientOptions22.isSocketKeepAlive();
        int int26 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions22.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions18.isSocketKeepAlive();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        int int24 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        int int25 = mongoClientOptions18.getConnectTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder31 = builder27.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int9 = mongoClientOptions7.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        java.lang.String str13 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getSocketTimeout();
        int int47 = mongoClientOptions45.getHeartbeatThreadCount();
        java.lang.String str48 = mongoClientOptions45.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions45);
        mongoProperties0.setPort((java.lang.Integer) 35);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(mongoClient49);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass23 = mongoProperties21.getFieldNamingStrategy();
        mongoProperties21.port = 10;
        mongoProperties21.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties21.createMongoClient(mongoClientOptions28);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties21.createMongoClient(mongoClientOptions37, environment38);
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder14.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder11.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder11.maxConnectionIdleTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass17;
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray20 = mongoProperties0.password;
        mongoProperties0.host = "";
        org.springframework.core.env.Environment environment23 = null;
        int int24 = mongoProperties0.determinePort(environment23);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.host = "test";
        char[] charArray10 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass53 = mongoProperties52.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass54 = mongoProperties52.getFieldNamingStrategy();
        mongoProperties52.port = 10;
        mongoProperties52.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties52.createMongoClient(mongoClientOptions59);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties52.createMongoClient(mongoClientOptions68, environment69);
        com.mongodb.DBEncoderFactory dBEncoderFactory71 = mongoClientOptions68.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder45.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder36.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder74 = builder25.dbEncoderFactory(dBEncoderFactory71);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder25.build();
        int int76 = mongoClientOptions75.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment77 = null;
        com.mongodb.MongoClient mongoClient78 = mongoProperties0.createMongoClient(mongoClientOptions75, environment77);
        int int79 = mongoClientOptions75.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertNotNull(dBEncoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(mongoClient78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getMaxWaitTime();
        int int15 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions7.getWriteConcern();
        int int17 = mongoClientOptions7.getConnectionsPerHost();
        int int18 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray13 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.dbEncoderFactory(dBEncoderFactory16);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder20 = mongoProperties0.builder(mongoClientOptions14);
        java.lang.String str21 = mongoProperties0.getUri();
        mongoProperties0.username = "";
        java.lang.Integer int24 = mongoProperties0.port;
        java.lang.Integer int25 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        org.springframework.core.env.Environment environment28 = null;
        int int29 = mongoProperties0.determinePort(environment28);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 27017 + "'", int29 == 27017);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        int int22 = mongoClientOptions19.getMaxWaitTime();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        boolean boolean25 = mongoProperties0.hasCustomAddress();
        mongoProperties0.authenticationDatabase = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("hi!");
        java.lang.Class<?> wildcardClass14 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.username = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions27.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder19.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder33.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder8.readPreference(readPreference42);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions20.getConnectTimeout();
        boolean boolean23 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectTimeout(0);
        boolean boolean35 = mongoClientOptions7.equals((java.lang.Object) builder34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoClientOptions16.getRequiredReplicaSetName();
        int int20 = mongoClientOptions16.getHeartbeatFrequency();
        int int21 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions10.isAutoConnectRetry();
        int int17 = mongoClientOptions10.getConnectTimeout();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.setHost("");
        mongoProperties0.uri = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        int int16 = mongoClientOptions15.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        long long26 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        java.lang.String str27 = mongoClientOptions24.getRequiredReplicaSetName();
        int int28 = mongoClientOptions24.getLocalThreshold();
        int int29 = mongoClientOptions24.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions24.getHeartbeatConnectTimeout();
        boolean boolean32 = mongoClientOptions15.equals((java.lang.Object) mongoClientOptions24);
        int int33 = mongoClientOptions15.getAcceptableLatencyDifference();
        int int34 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        java.lang.String str18 = mongoClientOptions16.getRequiredReplicaSetName();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        boolean boolean20 = mongoClientOptions16.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions16);
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions36);
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient38);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Integer int4 = mongoProperties0.port;
        mongoProperties0.database = "test";
        mongoProperties0.database = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMinHeartbeatFrequency();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getMaxWaitTime();
        java.lang.String str17 = mongoClientOptions10.toString();
        java.lang.String str18 = mongoClientOptions10.getDescription();
        java.lang.Class<?> wildcardClass19 = mongoClientOptions10.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        int int8 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str9 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        boolean boolean22 = mongoClientOptions21.isSocketKeepAlive();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        int int24 = mongoClientOptions21.getHeartbeatThreadCount();
        int int25 = mongoClientOptions21.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions21.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties0.builder(mongoClientOptions21);
        java.lang.String str29 = mongoClientOptions21.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions12.getSocketFactory();
        long long14 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions12.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions12.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder4.maxConnectionIdleTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int22 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder9.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMinHeartbeatFrequency();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions10.getDbDecoderFactory();
        java.lang.Class<?> wildcardClass18 = mongoClientOptions10.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions10.isAutoConnectRetry();
        int int17 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder18 = mongoProperties0.builder(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        boolean boolean28 = mongoClientOptions26.isSocketKeepAlive();
        int int29 = mongoClientOptions26.getHeartbeatThreadCount();
        int int30 = mongoClientOptions26.getMaxConnectionLifeTime();
        boolean boolean31 = mongoClientOptions26.isAutoConnectRetry();
        int int32 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions26.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.dbDecoderFactory(dBDecoderFactory34);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        boolean boolean11 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        java.lang.String str15 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.Integer int7 = mongoProperties0.port;
        mongoProperties0.clearPassword();
        java.lang.String str9 = mongoProperties0.database;
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.gridFsDatabase = "test";
        java.lang.String str9 = mongoProperties0.getUri();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        boolean boolean7 = mongoProperties5.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClient mongoClient16 = mongoProperties5.createMongoClient(mongoClientOptions15);
        int int17 = mongoClientOptions15.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions25.getSocketFactory();
        long long27 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions25.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder17.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.socketFactory(socketFactory29);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        java.lang.String str14 = mongoClientOptions10.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder23 = builder15.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        long long36 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        boolean boolean37 = mongoClientOptions33.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder25.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getSocketTimeout();
        int int50 = mongoClientOptions48.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions48.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder52 = builder8.readPreference(readPreference51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean16 = mongoClientOptions14.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory17 = mongoClientOptions14.getSocketFactory();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str22 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "test" + "'", str22, "test");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str13 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        boolean boolean20 = mongoProperties18.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        com.mongodb.MongoClient mongoClient29 = mongoProperties18.createMongoClient(mongoClientOptions28);
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions28.getDbEncoderFactory();
        int int31 = mongoClientOptions28.getConnectTimeout();
        int int32 = mongoClientOptions28.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions28.isAutoConnectRetry();
        int int34 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions28.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions28);
        int int37 = mongoClientOptions28.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 120000 + "'", int34 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        org.springframework.core.env.Environment environment3 = null;
        int int4 = mongoProperties0.determinePort(environment3);
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int6 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int22 = mongoProperties0.getPort();
        mongoProperties0.host = "";
        java.lang.String str25 = mongoProperties0.authenticationDatabase;
        java.lang.String str26 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        java.lang.String str39 = mongoClientOptions37.getRequiredReplicaSetName();
        long long40 = mongoClientOptions37.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClient mongoClient41 = mongoProperties0.createMongoClient(mongoClientOptions37);
        java.lang.Class<?> wildcardClass42 = mongoClientOptions37.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.username = "";
        java.lang.Integer int9 = mongoProperties0.port;
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getMaxWaitTime();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions7.equals((java.lang.Object) "");
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions7.getWriteConcern();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        int int9 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        int int15 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int17 = mongoClientOptions13.getAcceptableLatencyDifference();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        mongoProperties12.host = "hi!";
        mongoProperties12.setUri("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties12.getHost();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties12.createMongoClient(mongoClientOptions26, environment27);
        java.lang.String str29 = mongoClientOptions26.toString();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions34.getReadPreference();
        boolean boolean36 = mongoClientOptions26.equals((java.lang.Object) mongoClientOptions34);
        java.lang.String str37 = mongoClientOptions34.getDescription();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions34);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        mongoProperties39.host = "hi!";
        org.springframework.core.env.Environment environment43 = null;
        int int44 = mongoProperties39.determinePort(environment43);
        java.lang.String str45 = mongoProperties39.username;
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        boolean boolean54 = mongoClientOptions53.isSocketKeepAlive();
        boolean boolean55 = mongoClientOptions53.isSocketKeepAlive();
        int int56 = mongoClientOptions53.getHeartbeatThreadCount();
        int int57 = mongoClientOptions53.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties39.createMongoClient(mongoClientOptions53, environment58);
        java.lang.Class<?> wildcardClass60 = mongoProperties39.getFieldNamingStrategy();
        char[] charArray61 = mongoProperties39.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass63 = mongoProperties62.fieldNamingStrategy;
        boolean boolean64 = mongoProperties62.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder69.build();
        com.mongodb.MongoClient mongoClient73 = mongoProperties62.createMongoClient(mongoClientOptions72);
        int int74 = mongoClientOptions72.getMaxWaitTime();
        int int75 = mongoClientOptions72.getHeartbeatConnectTimeout();
        int int76 = mongoClientOptions72.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference77 = mongoClientOptions72.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder78 = mongoProperties39.builder(mongoClientOptions72);
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder85 = builder81.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder85.build();
        int int87 = mongoClientOptions86.getSocketTimeout();
        int int88 = mongoClientOptions86.getHeartbeatThreadCount();
        java.lang.String str89 = mongoClientOptions86.getRequiredReplicaSetName();
        java.lang.String str90 = mongoClientOptions86.toString();
        com.mongodb.MongoClientOptions.Builder builder91 = mongoProperties39.builder(mongoClientOptions86);
        com.mongodb.DBEncoderFactory dBEncoderFactory92 = mongoClientOptions86.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient93 = mongoProperties0.createMongoClient(mongoClientOptions86);
        int int94 = mongoClientOptions86.getSocketTimeout();
        int int95 = mongoClientOptions86.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNull(charArray61);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertNotNull(mongoClient73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 120000 + "'", int74 == 120000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20000 + "'", int75 == 20000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 120000 + "'", int76 == 120000);
        org.junit.Assert.assertNotNull(readPreference77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(dBEncoderFactory92);
        org.junit.Assert.assertNotNull(mongoClient93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 500 + "'", int95 == 500);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int13 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int14 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        boolean boolean15 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass49 = mongoProperties48.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass50 = mongoProperties48.getFieldNamingStrategy();
        mongoProperties48.port = 10;
        mongoProperties48.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties48.createMongoClient(mongoClientOptions55);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties48.createMongoClient(mongoClientOptions64, environment65);
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions64.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder41.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder32.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder21.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder9.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder72 = builder4.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder74 = builder4.heartbeatSocketTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions7.getSocketFactory();
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getSocketTimeout();
        int int19 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.setUri("mongodb://localhost/test");
        mongoProperties10.authenticationDatabase = "test";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str20 = mongoProperties10.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.fieldNamingStrategy;
        mongoProperties21.host = "hi!";
        mongoProperties21.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        mongoProperties27.host = "hi!";
        int int31 = mongoProperties27.getDEFAULT_PORT();
        mongoProperties27.host = "";
        mongoProperties27.setHost("hi!");
        char[] charArray40 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties27.setPassword(charArray40);
        char[] charArray42 = mongoProperties27.password;
        mongoProperties21.setPassword(charArray42);
        mongoProperties10.password = charArray42;
        mongoProperties0.password = charArray42;
        java.lang.String str46 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str47 = mongoProperties0.host;
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 27017 + "'", int31 == 27017);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , a, a, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "test" + "'", str46, "test");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getLocalThreshold();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions7.getReadPreference();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        int int11 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions7.getWriteConcern();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionIdleTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        boolean boolean13 = mongoProperties0.hasCustomAddress();
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        boolean boolean11 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray22 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass24 = mongoProperties23.fieldNamingStrategy;
        boolean boolean25 = mongoProperties23.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        com.mongodb.MongoClient mongoClient34 = mongoProperties23.createMongoClient(mongoClientOptions33);
        int int35 = mongoClientOptions33.getMaxWaitTime();
        int int36 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions33.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties0.builder(mongoClientOptions33);
        mongoProperties0.setPort((java.lang.Integer) 5000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        char[] charArray6 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatSocketTimeout();
        boolean boolean18 = mongoClientOptions14.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14);
        int int20 = mongoClientOptions14.getConnectTimeout();
        int int21 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.uri = "test";
        mongoProperties0.username = "";
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.core.env.Environment environment12 = null;
        int int13 = mongoProperties0.determinePort(environment12);
        int int14 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str15 = mongoProperties0.getHost();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        mongoProperties0.port = (-1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setHost("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions18.getReadPreference();
        int int20 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        int int21 = mongoClientOptions18.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder22 = mongoProperties0.builder(mongoClientOptions18);
        java.lang.String str23 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean15 = mongoClientOptions13.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory16 = mongoClientOptions13.getSocketFactory();
        int int17 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions29.getSocketFactory();
        long long31 = mongoClientOptions29.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions29.getDbDecoderFactory();
        boolean boolean34 = mongoClientOptions29.isCursorFinalizerEnabled();
        int int35 = mongoClientOptions29.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("mongodb://localhost/test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder36.maxConnectionLifeTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        mongoProperties9.host = "hi!";
        java.lang.String str13 = mongoProperties9.uri;
        mongoProperties9.clearPassword();
        java.lang.Class<?> wildcardClass15 = mongoProperties9.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass26 = mongoProperties25.fieldNamingStrategy;
        mongoProperties25.host = "hi!";
        mongoProperties25.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        int int35 = mongoProperties31.getDEFAULT_PORT();
        mongoProperties31.host = "";
        mongoProperties31.setHost("hi!");
        char[] charArray44 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties31.setPassword(charArray44);
        char[] charArray46 = mongoProperties31.password;
        mongoProperties25.setPassword(charArray46);
        mongoProperties17.setPassword(charArray46);
        mongoProperties0.setPassword(charArray46);
        java.lang.String str50 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , a, a, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getLocalThreshold();
        boolean boolean17 = mongoClientOptions10.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount(97);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.core.env.Environment environment11 = null;
        int int12 = mongoProperties0.determinePort(environment11);
        java.lang.String str13 = mongoProperties0.host;
        java.lang.String str14 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions7.getDbDecoderFactory();
        java.lang.String str17 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.Class<?> wildcardClass18 = mongoClientOptions7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions28.getReadPreference();
        int int30 = mongoClientOptions28.getAcceptableLatencyDifference();
        int int31 = mongoClientOptions28.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions28.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder20.dbDecoderFactory(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions14.getReadPreference();
        int int19 = mongoClientOptions14.getMaxWaitTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder8.heartbeatSocketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.connectionsPerHost(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str14 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.gridFsDatabase = "hi!";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.String str17 = mongoProperties8.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        mongoProperties18.setUri("mongodb://localhost/test");
        mongoProperties18.authenticationDatabase = "test";
        mongoProperties18.authenticationDatabase = "";
        java.lang.String str28 = mongoProperties18.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass30 = mongoProperties29.fieldNamingStrategy;
        mongoProperties29.host = "hi!";
        mongoProperties29.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        mongoProperties35.host = "hi!";
        int int39 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.host = "";
        mongoProperties35.setHost("hi!");
        char[] charArray48 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties35.setPassword(charArray48);
        char[] charArray50 = mongoProperties35.password;
        mongoProperties29.setPassword(charArray50);
        mongoProperties18.password = charArray50;
        mongoProperties8.password = charArray50;
        mongoProperties0.setPassword(charArray50);
        java.lang.String str55 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minConnectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(97);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        mongoProperties17.authenticationDatabase = "";
        java.lang.String str27 = mongoProperties17.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        mongoProperties28.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass35 = mongoProperties34.fieldNamingStrategy;
        mongoProperties34.host = "hi!";
        int int38 = mongoProperties34.getDEFAULT_PORT();
        mongoProperties34.host = "";
        mongoProperties34.setHost("hi!");
        char[] charArray47 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties34.setPassword(charArray47);
        char[] charArray49 = mongoProperties34.password;
        mongoProperties28.setPassword(charArray49);
        mongoProperties17.password = charArray49;
        mongoProperties17.setUri("");
        char[] charArray54 = mongoProperties17.getPassword();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getSocketTimeout();
        int int64 = mongoClientOptions62.getHeartbeatThreadCount();
        java.lang.String str65 = mongoClientOptions62.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient66 = mongoProperties17.createMongoClient(mongoClientOptions62);
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions62.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder16.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder73.build();
        long long77 = mongoClientOptions76.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern78 = mongoClientOptions76.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder79 = builder68.writeConcern(writeConcern78);
        com.mongodb.MongoClientOptions.Builder builder81 = builder68.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertNotNull(writeConcern78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        char[] charArray13 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties0.setPassword(charArray13);
        java.lang.String str15 = mongoProperties0.gridFsDatabase;
        java.lang.String str16 = mongoProperties0.getHost();
        java.lang.Integer int17 = mongoProperties0.getPort();
        mongoProperties0.database = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions20.getSocketFactory();
        long long22 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int23 = mongoClientOptions20.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions33.getSocketFactory();
        long long35 = mongoClientOptions33.getMaxAutoConnectRetryTime();
        int int36 = mongoClientOptions33.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions33.getDbEncoderFactory();
        boolean boolean38 = mongoClientOptions33.isCursorFinalizerEnabled();
        int int39 = mongoClientOptions33.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.socketFactory(socketFactory40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        java.lang.String str12 = mongoProperties0.uri;
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        java.lang.String str10 = mongoProperties8.getAuthenticationDatabase();
        char[] charArray11 = mongoProperties8.getPassword();
        mongoProperties8.host = "hi!";
        mongoProperties8.setUsername("hi!");
        char[] charArray17 = new char[] { '4' };
        mongoProperties8.password = charArray17;
        mongoProperties0.setPassword(charArray17);
        java.lang.String str20 = mongoProperties0.getDatabase();
        java.lang.String str21 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "";
        mongoProperties0.uri = "hi!";
        java.lang.String str13 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatConnectRetryFrequency((int) 'a');
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) builder13);
        int int19 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getSocketTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        int int11 = mongoClientOptions7.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime(100);
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) builder24);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.host = "test";
        mongoProperties0.setUri("");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions12);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(mongoClient13);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean13 = mongoClientOptions7.isSocketKeepAlive();
        int int14 = mongoClientOptions7.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAutoConnectRetry();
        int int9 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getSocketTimeout();
        int int16 = mongoClientOptions14.getHeartbeatThreadCount();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions14.getReadPreference();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions14.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder6.socketFactory(socketFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.maxConnectionIdleTime((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder6.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        java.lang.String str16 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions20.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions20.getDbEncoderFactory();
        long long23 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        boolean boolean24 = mongoClientOptions20.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder12.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder12.localThreshold((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getConnectTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions23.getReadPreference();
        int int25 = mongoClientOptions23.getHeartbeatConnectRetryFrequency();
        int int26 = mongoClientOptions23.getSocketTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        boolean boolean28 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getLocalThreshold();
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        java.lang.String str21 = mongoClientOptions14.toString();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions14.getReadPreference();
        int int23 = mongoClientOptions14.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(readPreference12);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        boolean boolean29 = mongoProperties27.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClient mongoClient38 = mongoProperties27.createMongoClient(mongoClientOptions37);
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions37.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.autoConnectRetry(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions7.equals((java.lang.Object) "");
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(socketFactory14);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray11 = mongoProperties0.getPassword();
        mongoProperties0.username = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str16 = mongoProperties10.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.autoConnectRetry(false);
        boolean boolean33 = mongoClientOptions24.equals((java.lang.Object) false);
        int int34 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions24);
        int int37 = mongoClientOptions24.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getLocalThreshold();
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        java.lang.String str21 = mongoClientOptions14.toString();
        int int22 = mongoClientOptions14.getAcceptableLatencyDifference();
        int int23 = mongoClientOptions14.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "";
        boolean boolean8 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        int int17 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        boolean boolean23 = mongoClientOptions14.equals((java.lang.Object) false);
        int int24 = mongoClientOptions14.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions14);
        int int26 = mongoClientOptions14.getHeartbeatFrequency();
        int int27 = mongoClientOptions14.getHeartbeatThreadCount();
        java.lang.String str28 = mongoClientOptions14.toString();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions20.getSocketFactory();
        long long22 = mongoClientOptions20.getMaxAutoConnectRetryTime();
        int int23 = mongoClientOptions20.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions20.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions20.getDbEncoderFactory();
        int int26 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder12.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatThreadCount();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        int int15 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.maxConnectionLifeTime(35);
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder10.dbEncoderFactory(dBEncoderFactory14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUsername();
        java.lang.String str12 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        boolean boolean14 = mongoClientOptions10.isAlwaysUseMBeans();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions10.getDbEncoderFactory();
        int int19 = mongoClientOptions10.getLocalThreshold();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        char[] charArray13 = mongoProperties0.password;
        org.springframework.core.env.Environment environment14 = null;
        int int15 = mongoProperties0.determinePort(environment14);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime(0L);
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder18.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass37 = mongoProperties36.fieldNamingStrategy;
        boolean boolean38 = mongoProperties36.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        com.mongodb.MongoClient mongoClient47 = mongoProperties36.createMongoClient(mongoClientOptions46);
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder29.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder28.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder15.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder8.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.heartbeatFrequency((int) (short) 10);
        com.mongodb.DBDecoderFactory dBDecoderFactory55 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder56 = builder54.dbDecoderFactory(dBDecoderFactory55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.password;
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.gridFsDatabase = "hi!";
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.connectTimeout(97);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass17 = mongoProperties15.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties15.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions26.getDbEncoderFactory();
        long long29 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        boolean boolean30 = mongoClientOptions26.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties15.builder(mongoClientOptions26);
        int int32 = mongoClientOptions26.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.dbDecoderFactory(dBDecoderFactory33);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder14.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) 120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getConnectTimeout();
        boolean boolean22 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str23 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions15);
        int int18 = mongoProperties0.getDEFAULT_PORT();
        java.lang.Integer int19 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 27017 + "'", int18 == 27017);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.maxWaitTime(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        int int11 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass14 = mongoProperties13.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass15 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties13.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        long long27 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        boolean boolean28 = mongoClientOptions24.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties13.builder(mongoClientOptions24);
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) mongoProperties13);
        int int31 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions7.isAutoConnectRetry();
        java.lang.String str33 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5000 + "'", int10 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        int int13 = mongoClientOptions10.getMaxWaitTime();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        int int15 = mongoClientOptions10.getConnectTimeout();
        int int16 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        java.lang.String str4 = mongoProperties0.host;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.username = "";
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass18;
        mongoProperties0.authenticationDatabase = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder8.writeConcern(writeConcern23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.minHeartbeatFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions12.getSocketFactory();
        long long14 = mongoClientOptions12.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions12.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions12.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder4.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder4.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str13 = mongoClientOptions7.toString();
        int int14 = mongoClientOptions7.getConnectTimeout();
        boolean boolean15 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions7.isAlwaysUseMBeans();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        mongoProperties17.setGridFsDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean36 = mongoClientOptions34.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory37 = mongoClientOptions34.getSocketFactory();
        int int38 = mongoClientOptions34.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties17.createMongoClient(mongoClientOptions34, environment39);
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions34.getDbDecoderFactory();
        boolean boolean42 = mongoClientOptions7.equals((java.lang.Object) dBDecoderFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.username = "";
        mongoProperties0.database = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionLifeTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        boolean boolean18 = mongoClientOptions7.isAutoConnectRetry();
        int int19 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions14);
        long long19 = mongoClientOptions14.getMaxAutoConnectRetryTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions14.getDbEncoderFactory();
        int int21 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass26 = mongoProperties24.getFieldNamingStrategy();
        mongoProperties24.port = 10;
        mongoProperties24.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties24.createMongoClient(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties24.createMongoClient(mongoClientOptions40, environment41);
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder17.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder8.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions10.getWriteConcern();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        java.lang.String str15 = mongoClientOptions10.toString();
        int int16 = mongoClientOptions10.getMinConnectionsPerHost();
        int int17 = mongoClientOptions10.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        boolean boolean16 = mongoProperties14.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClient mongoClient25 = mongoProperties14.createMongoClient(mongoClientOptions24);
        int int26 = mongoClientOptions24.getMaxWaitTime();
        int int27 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions24.getReadPreference();
        int int30 = mongoClientOptions24.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        long long40 = mongoClientOptions39.getMaxAutoConnectRetryTime();
        int int41 = mongoClientOptions39.getMinConnectionsPerHost();
        int int42 = mongoClientOptions39.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder31.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder31.connectTimeout((int) (byte) 1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        long long16 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        java.lang.Class<?> wildcardClass11 = builder10.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int30 = mongoClientOptions28.getHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions28.isSocketKeepAlive();
        int int32 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder20.dbEncoderFactory(dBEncoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder20.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.username;
        mongoProperties0.setUsername("");
        java.lang.String str11 = mongoProperties0.username;
        int int12 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxWaitTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.String str11 = mongoProperties0.host;
        mongoProperties0.uri = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier(35);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        long long18 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int19 = mongoClientOptions16.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions16.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions16.getDbEncoderFactory();
        int int22 = mongoClientOptions16.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions16.getAcceptableLatencyDifference();
        int int24 = mongoClientOptions16.getHeartbeatConnectRetryFrequency();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.socketFactory(socketFactory25);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions7.getReadPreference();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        int int12 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean19 = mongoClientOptions17.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        int int21 = mongoClientOptions17.getConnectionsPerHost();
        int int22 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions17.getDbDecoderFactory();
        boolean boolean24 = mongoClientOptions17.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        int int26 = mongoClientOptions17.getHeartbeatSocketTimeout();
        long long27 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectTimeout(1);
        java.lang.Class<?> wildcardClass7 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder34 = builder24.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass43 = mongoProperties42.fieldNamingStrategy;
        boolean boolean44 = mongoProperties42.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        com.mongodb.MongoClient mongoClient53 = mongoProperties42.createMongoClient(mongoClientOptions52);
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions52.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder35.dbDecoderFactory(dBDecoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder34.dbDecoderFactory(dBDecoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder21.dbDecoderFactory(dBDecoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder58 = builder14.dbDecoderFactory(dBDecoderFactory54);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder60 = builder58.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str12 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.maxWaitTime((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder2.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions10.isCursorFinalizerEnabled();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions10.getWriteConcern();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions10.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(writeConcern18);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        mongoProperties17.authenticationDatabase = "";
        java.lang.String str27 = mongoProperties17.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        mongoProperties28.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass35 = mongoProperties34.fieldNamingStrategy;
        mongoProperties34.host = "hi!";
        int int38 = mongoProperties34.getDEFAULT_PORT();
        mongoProperties34.host = "";
        mongoProperties34.setHost("hi!");
        char[] charArray47 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties34.setPassword(charArray47);
        char[] charArray49 = mongoProperties34.password;
        mongoProperties28.setPassword(charArray49);
        mongoProperties17.password = charArray49;
        mongoProperties17.setUri("");
        char[] charArray54 = mongoProperties17.getPassword();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getSocketTimeout();
        int int64 = mongoClientOptions62.getHeartbeatThreadCount();
        java.lang.String str65 = mongoClientOptions62.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient66 = mongoProperties17.createMongoClient(mongoClientOptions62);
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions62.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder16.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder73.build();
        long long77 = mongoClientOptions76.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern78 = mongoClientOptions76.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder79 = builder68.writeConcern(writeConcern78);
        com.mongodb.MongoClientOptions.Builder builder81 = builder68.minHeartbeatFrequency(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertNotNull(writeConcern78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) 52);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.Integer int7 = mongoProperties0.getPort();
        int int8 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMinConnectionsPerHost();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions10.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatThreadCount();
        int int19 = mongoClientOptions10.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions27);
        org.springframework.core.env.Environment environment29 = null;
        int int30 = mongoProperties0.determinePort(environment29);
        java.lang.Class<?> wildcardClass31 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(wildcardClass31);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.port = 10000;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatConnectTimeout(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getLocalThreshold();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean15 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions14.getDbEncoderFactory();
        boolean boolean19 = mongoClientOptions14.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        java.lang.String str11 = mongoClientOptions7.toString();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(writeConcern12);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        mongoProperties9.host = "hi!";
        java.lang.String str13 = mongoProperties9.uri;
        mongoProperties9.clearPassword();
        java.lang.Class<?> wildcardClass15 = mongoProperties9.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions18.isSocketKeepAlive();
        int int21 = mongoClientOptions18.getHeartbeatThreadCount();
        int int22 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions18.isAutoConnectRetry();
        int int24 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        int int25 = mongoClientOptions18.getConnectTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxWaitTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        long long15 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions7.getSocketFactory();
        int int17 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.getAuthenticationDatabase();
        boolean boolean13 = mongoProperties10.hasCustomCredentials();
        boolean boolean14 = mongoProperties10.hasCustomAddress();
        java.lang.String str15 = mongoProperties10.uri;
        mongoProperties10.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        java.lang.String str20 = mongoProperties18.getAuthenticationDatabase();
        char[] charArray21 = mongoProperties18.getPassword();
        mongoProperties18.host = "hi!";
        mongoProperties18.setUsername("hi!");
        char[] charArray27 = new char[] { '4' };
        mongoProperties18.password = charArray27;
        mongoProperties10.setPassword(charArray27);
        mongoProperties0.setPassword(charArray27);
        java.lang.Class<?> wildcardClass31 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str32 = mongoProperties0.database;
        java.lang.String str33 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties7.getGridFsDatabase();
        mongoProperties7.port = 5000;
        java.lang.Class<?> wildcardClass13 = mongoProperties7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        java.lang.String str15 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        char[] charArray8 = mongoProperties0.password;
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.uri = "mongodb://localhost/test";
        int int11 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        char[] charArray9 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Integer int4 = mongoProperties0.port;
        mongoProperties0.database = "test";
        java.lang.Integer int7 = mongoProperties0.port;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.setUri("mongodb://localhost/test");
        java.lang.String str16 = mongoProperties10.getHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties10.createMongoClient(mongoClientOptions24, environment25);
        java.lang.String str27 = mongoClientOptions24.toString();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions32.getReadPreference();
        boolean boolean34 = mongoClientOptions24.equals((java.lang.Object) mongoClientOptions32);
        int int35 = mongoClientOptions32.getConnectionsPerHost();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions32, environment36);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(mongoClient37);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.clearPassword();
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        java.lang.String str12 = mongoProperties0.database;
        java.lang.String str13 = mongoProperties0.getHost();
        java.lang.String str14 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        mongoProperties0.setUri("");
        mongoProperties0.setUri("test");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getUsername();
        mongoProperties0.username = "";
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass26 = mongoProperties24.getFieldNamingStrategy();
        mongoProperties24.port = 10;
        mongoProperties24.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties24.createMongoClient(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties24.createMongoClient(mongoClientOptions40, environment41);
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder17.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder8.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatConnectTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.database = "";
        mongoProperties0.uri = "test";
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int13 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str14 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getMaxWaitTime();
        int int15 = mongoClientOptions7.getHeartbeatThreadCount();
        int int16 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        int int13 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(false);
        boolean boolean21 = mongoClientOptions12.equals((java.lang.Object) false);
        int int22 = mongoClientOptions12.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = mongoProperties0.builder(mongoClientOptions12);
        int int24 = mongoClientOptions12.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        java.lang.String str9 = mongoProperties0.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        int int14 = mongoProperties10.getDEFAULT_PORT();
        mongoProperties10.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass19 = mongoProperties17.getFieldNamingStrategy();
        mongoProperties17.port = 10;
        mongoProperties17.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties17.createMongoClient(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties17.createMongoClient(mongoClientOptions33, environment34);
        java.lang.String str36 = mongoProperties17.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClient mongoClient45 = mongoProperties17.createMongoClient(mongoClientOptions44);
        com.mongodb.MongoClient mongoClient46 = mongoProperties10.createMongoClient(mongoClientOptions44);
        int int47 = mongoClientOptions44.getAcceptableLatencyDifference();
        int int48 = mongoClientOptions44.getHeartbeatFrequency();
        int int49 = mongoClientOptions44.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties0.builder(mongoClientOptions44);
        java.lang.String str51 = mongoClientOptions44.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5000 + "'", int48 == 5000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        java.lang.String str8 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatThreadCount((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions7.getWriteConcern();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.uri;
        char[] charArray8 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        long long17 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions16.getMinConnectionsPerHost();
        int int19 = mongoClientOptions16.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int21 = mongoClientOptions16.getMaxWaitTime();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        boolean boolean24 = mongoProperties22.hasCustomAddress();
        mongoProperties22.setUri("");
        boolean boolean27 = mongoClientOptions16.equals((java.lang.Object) mongoProperties22);
        boolean boolean28 = mongoProperties22.hasCustomCredentials();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.setUri("mongodb://localhost/test");
        mongoProperties10.authenticationDatabase = "test";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str20 = mongoProperties10.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.fieldNamingStrategy;
        mongoProperties21.host = "hi!";
        mongoProperties21.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        mongoProperties27.host = "hi!";
        int int31 = mongoProperties27.getDEFAULT_PORT();
        mongoProperties27.host = "";
        mongoProperties27.setHost("hi!");
        char[] charArray40 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties27.setPassword(charArray40);
        char[] charArray42 = mongoProperties27.password;
        mongoProperties21.setPassword(charArray42);
        mongoProperties10.password = charArray42;
        mongoProperties0.password = charArray42;
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 27017 + "'", int31 == 27017);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , a, a, 4]");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.database = "hi!";
        mongoProperties0.username = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.port = 5;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        mongoProperties8.authenticationDatabase = "";
        java.lang.String str14 = mongoProperties8.database;
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        int int25 = mongoClientOptions22.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient26 = mongoProperties8.createMongoClient(mongoClientOptions22);
        boolean boolean27 = mongoClientOptions22.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties0.builder(mongoClientOptions22);
        boolean boolean29 = mongoClientOptions22.isAutoConnectRetry();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectRetryFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions10.getWriteConcern();
        boolean boolean16 = mongoClientOptions10.isSocketKeepAlive();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        boolean boolean9 = mongoProperties7.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions17);
        int int19 = mongoClientOptions17.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions17.getWriteConcern();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions17.getReadPreference();
        java.lang.String str22 = mongoClientOptions17.toString();
        int int23 = mongoClientOptions17.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.dbDecoderFactory(dBDecoderFactory24);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.minConnectionsPerHost(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.uri = "test";
        mongoProperties0.username = "";
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.core.env.Environment environment12 = null;
        int int13 = mongoProperties0.determinePort(environment12);
        int int14 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str15 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass17 = mongoProperties16.fieldNamingStrategy;
        mongoProperties16.host = "hi!";
        int int20 = mongoProperties16.getDEFAULT_PORT();
        mongoProperties16.database = "";
        java.lang.String str23 = mongoProperties16.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        mongoProperties24.host = "hi!";
        int int28 = mongoProperties24.getDEFAULT_PORT();
        mongoProperties24.host = "";
        mongoProperties24.setHost("hi!");
        java.lang.Integer int33 = mongoProperties24.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass35 = mongoProperties34.fieldNamingStrategy;
        mongoProperties34.host = "hi!";
        java.lang.String str38 = mongoProperties34.uri;
        org.springframework.core.env.Environment environment39 = null;
        int int40 = mongoProperties34.determinePort(environment39);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        boolean boolean50 = mongoClientOptions48.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory51 = mongoClientOptions48.getSocketFactory();
        int int52 = mongoClientOptions48.getMaxConnectionLifeTime();
        int int53 = mongoClientOptions48.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder54 = mongoProperties34.builder(mongoClientOptions48);
        java.lang.String str55 = mongoProperties34.getUri();
        mongoProperties34.username = "";
        java.lang.Integer int58 = mongoProperties34.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass60 = mongoProperties59.fieldNamingStrategy;
        mongoProperties59.host = "hi!";
        int int63 = mongoProperties59.getDEFAULT_PORT();
        mongoProperties59.host = "";
        mongoProperties59.setHost("hi!");
        char[] charArray72 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties59.setPassword(charArray72);
        mongoProperties34.setPassword(charArray72);
        mongoProperties24.setPassword(charArray72);
        mongoProperties16.setPassword(charArray72);
        mongoProperties0.password = charArray72;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 27017 + "'", int28 == 27017);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb://localhost/test" + "'", str38, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 27017 + "'", int40 == 27017);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "mongodb://localhost/test" + "'", str55, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 27017 + "'", int63 == 27017);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , a, a, 4]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.String str8 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("test");
        java.lang.Class<?> wildcardClass11 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        mongoProperties0.setHost("");
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int9 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        char[] charArray7 = null;
        mongoProperties0.password = charArray7;
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        mongoProperties0.database = "hi!";
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout((int) (short) 1);
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass17;
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.autoConnectRetry(false);
        boolean boolean35 = mongoClientOptions26.equals((java.lang.Object) false);
        java.lang.String str36 = mongoClientOptions26.getDescription();
        int int37 = mongoClientOptions26.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties0.builder(mongoClientOptions26);
        int int39 = mongoClientOptions26.getSocketTimeout();
        int int40 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int41 = mongoClientOptions26.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        boolean boolean6 = mongoProperties0.hasCustomAddress();
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getSocketTimeout();
        java.lang.String str14 = mongoClientOptions7.getDescription();
        int int15 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int16 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.String str17 = mongoProperties8.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        mongoProperties18.setUri("mongodb://localhost/test");
        mongoProperties18.authenticationDatabase = "test";
        mongoProperties18.authenticationDatabase = "";
        java.lang.String str28 = mongoProperties18.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass30 = mongoProperties29.fieldNamingStrategy;
        mongoProperties29.host = "hi!";
        mongoProperties29.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass36 = mongoProperties35.fieldNamingStrategy;
        mongoProperties35.host = "hi!";
        int int39 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.host = "";
        mongoProperties35.setHost("hi!");
        char[] charArray48 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties35.setPassword(charArray48);
        char[] charArray50 = mongoProperties35.password;
        mongoProperties29.setPassword(charArray50);
        mongoProperties18.password = charArray50;
        mongoProperties8.password = charArray50;
        mongoProperties0.setPassword(charArray50);
        java.lang.String str55 = mongoProperties0.getDatabase();
        java.lang.String str56 = mongoProperties0.getDatabase();
        java.lang.String str57 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27017 + "'", int39 == 27017);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , a, a, 4]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "mongodb://localhost/test" + "'", str57, "mongodb://localhost/test");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        long long12 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean14 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        boolean boolean16 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        char[] charArray6 = mongoProperties0.password;
        mongoProperties0.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.host;
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        java.lang.String str12 = mongoProperties10.getAuthenticationDatabase();
        char[] charArray13 = mongoProperties10.getPassword();
        mongoProperties10.host = "hi!";
        java.lang.String str16 = mongoProperties10.gridFsDatabase;
        java.lang.String str17 = mongoProperties10.getHost();
        java.lang.String str18 = mongoProperties10.gridFsDatabase;
        boolean boolean19 = mongoProperties10.hasCustomAddress();
        char[] charArray20 = null;
        mongoProperties10.setPassword(charArray20);
        mongoProperties10.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass25 = mongoProperties24.fieldNamingStrategy;
        mongoProperties24.host = "hi!";
        java.lang.Class<?> wildcardClass28 = mongoProperties24.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass29 = mongoProperties24.getFieldNamingStrategy();
        char[] charArray32 = new char[] { '#', 'a' };
        mongoProperties24.password = charArray32;
        mongoProperties10.password = charArray32;
        mongoProperties0.password = charArray32;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass46 = mongoProperties45.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass47 = mongoProperties45.getFieldNamingStrategy();
        mongoProperties45.port = 10;
        mongoProperties45.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties45.createMongoClient(mongoClientOptions52);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.build();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties45.createMongoClient(mongoClientOptions61, environment62);
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions61.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder38.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder29.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder18.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder9.dbEncoderFactory(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        int int4 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        int int14 = mongoClientOptions12.getHeartbeatThreadCount();
        int int15 = mongoClientOptions12.getHeartbeatThreadCount();
        boolean boolean17 = mongoClientOptions12.equals((java.lang.Object) 100L);
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        mongoProperties19.host = "hi!";
        mongoProperties19.setUri("mongodb://localhost/test");
        mongoProperties19.authenticationDatabase = "test";
        mongoProperties19.authenticationDatabase = "";
        java.lang.String str29 = mongoProperties19.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass31 = mongoProperties30.fieldNamingStrategy;
        mongoProperties30.host = "hi!";
        mongoProperties30.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass37 = mongoProperties36.fieldNamingStrategy;
        mongoProperties36.host = "hi!";
        int int40 = mongoProperties36.getDEFAULT_PORT();
        mongoProperties36.host = "";
        mongoProperties36.setHost("hi!");
        char[] charArray49 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties36.setPassword(charArray49);
        char[] charArray51 = mongoProperties36.password;
        mongoProperties30.setPassword(charArray51);
        mongoProperties19.password = charArray51;
        mongoProperties19.setUri("");
        char[] charArray56 = mongoProperties19.password;
        mongoProperties0.password = charArray56;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 27017 + "'", int40 == 27017);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , a, a, 4]");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        boolean boolean10 = mongoProperties0.hasCustomAddress();
        java.lang.String str11 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory8 = mongoClientOptions7.getDbDecoderFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass11 = mongoProperties9.getFieldNamingStrategy();
        java.lang.String str12 = mongoProperties9.database;
        java.lang.String str13 = mongoProperties9.host;
        mongoProperties9.username = "mongodb://localhost/test";
        mongoProperties9.username = "";
        mongoProperties9.setDatabase("mongodb://localhost/test");
        mongoProperties9.database = "test";
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        boolean boolean30 = mongoClientOptions29.isSocketKeepAlive();
        boolean boolean31 = mongoClientOptions29.isSocketKeepAlive();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties9.createMongoClient(mongoClientOptions29, environment32);
        boolean boolean34 = mongoClientOptions7.equals((java.lang.Object) environment32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBDecoderFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.uri = "test";
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatThreadCount();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        boolean boolean21 = mongoClientOptions16.equals((java.lang.Object) 100L);
        long long22 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        boolean boolean17 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions15.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatThreadCount((int) ' ');
        boolean boolean31 = mongoClientOptions15.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        mongoProperties17.setUri("mongodb://localhost/test");
        mongoProperties17.authenticationDatabase = "test";
        mongoProperties17.authenticationDatabase = "";
        java.lang.String str27 = mongoProperties17.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        mongoProperties28.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass35 = mongoProperties34.fieldNamingStrategy;
        mongoProperties34.host = "hi!";
        int int38 = mongoProperties34.getDEFAULT_PORT();
        mongoProperties34.host = "";
        mongoProperties34.setHost("hi!");
        char[] charArray47 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties34.setPassword(charArray47);
        char[] charArray49 = mongoProperties34.password;
        mongoProperties28.setPassword(charArray49);
        mongoProperties17.password = charArray49;
        mongoProperties17.setUri("");
        char[] charArray54 = mongoProperties17.getPassword();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getSocketTimeout();
        int int64 = mongoClientOptions62.getHeartbeatThreadCount();
        java.lang.String str65 = mongoClientOptions62.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient66 = mongoProperties17.createMongoClient(mongoClientOptions62);
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions62.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder16.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder73.build();
        long long77 = mongoClientOptions76.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern78 = mongoClientOptions76.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder79 = builder68.writeConcern(writeConcern78);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.heartbeatThreadCount((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertNotNull(writeConcern78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.username = "";
        mongoProperties0.database = "hi!";
        java.lang.String str12 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        java.lang.String str18 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        int int12 = mongoClientOptions7.getHeartbeatConnectTimeout();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        int int17 = mongoClientOptions11.getMinConnectionsPerHost();
        long long18 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        long long19 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int20 = mongoClientOptions11.getHeartbeatFrequency();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.host = "test";
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str8 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        int int15 = mongoClientOptions10.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(writeConcern16);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.host;
        java.lang.String str10 = mongoProperties0.host;
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.uri = "hi!";
        java.lang.String str14 = mongoProperties0.uri;
        java.lang.String str15 = mongoProperties0.database;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass15 = mongoProperties14.fieldNamingStrategy;
        boolean boolean16 = mongoProperties14.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClient mongoClient25 = mongoProperties14.createMongoClient(mongoClientOptions24);
        int int26 = mongoClientOptions24.getMaxWaitTime();
        int int27 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions24.getReadPreference();
        int int30 = mongoClientOptions24.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectTimeout(5);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean14 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str14 = mongoClientOptions7.toString();
        int int15 = mongoClientOptions7.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoClientOptions16.getRequiredReplicaSetName();
        int int20 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions16.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(writeConcern21);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int30 = mongoClientOptions28.getHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions28.isSocketKeepAlive();
        int int32 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder20.dbEncoderFactory(dBEncoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getHeartbeatThreadCount();
        int int24 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean25 = mongoClientOptions20.isAutoConnectRetry();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.heartbeatSocketTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getLocalThreshold();
        boolean boolean19 = mongoClientOptions17.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions17.getDbDecoderFactory();
        int int22 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions17.getSocketTimeout();
        int int24 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        int int26 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        int int27 = mongoClientOptions17.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass21 = mongoProperties20.fieldNamingStrategy;
        boolean boolean22 = mongoProperties20.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        com.mongodb.MongoClient mongoClient31 = mongoProperties20.createMongoClient(mongoClientOptions30);
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder13.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder12.dbEncoderFactory(dBEncoderFactory37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder17.heartbeatConnectTimeout((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        mongoProperties28.host = "hi!";
        mongoProperties28.authenticationDatabase = "";
        java.lang.String str34 = mongoProperties28.database;
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions42.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions42.getDbEncoderFactory();
        int int45 = mongoClientOptions42.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient46 = mongoProperties28.createMongoClient(mongoClientOptions42);
        boolean boolean47 = mongoClientOptions42.isAlwaysUseMBeans();
        boolean boolean48 = mongoClientOptions42.isCursorFinalizerEnabled();
        boolean boolean49 = mongoClientOptions42.isAutoConnectRetry();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder17.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder16.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder54 = builder16.acceptableLatencyDifference((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder7 = builder4.maxConnectionIdleTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions14);
        boolean boolean19 = mongoClientOptions14.isAlwaysUseMBeans();
        boolean boolean20 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int21 = mongoClientOptions14.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getSocketTimeout();
        int int47 = mongoClientOptions45.getHeartbeatThreadCount();
        java.lang.String str48 = mongoClientOptions45.getRequiredReplicaSetName();
        com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions45);
        mongoProperties0.uri = "hi!";
        java.lang.String str52 = mongoProperties0.uri;
        java.lang.String str53 = mongoProperties0.authenticationDatabase;
        int int54 = mongoProperties0.getDEFAULT_PORT();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 27017 + "'", int54 == 27017);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        int int12 = mongoClientOptions11.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions11.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = mongoProperties0.builder(mongoClientOptions11);
        javax.net.SocketFactory socketFactory15 = mongoClientOptions11.getSocketFactory();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions11.getSocketFactory();
        int int17 = mongoClientOptions11.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions11.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatConnectRetryFrequency((int) ' ');
        boolean boolean38 = mongoClientOptions11.equals((java.lang.Object) builder33);
        com.mongodb.MongoClientOptions.Builder builder40 = builder33.connectTimeout((int) (byte) 100);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5000 + "'", int17 == 5000);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        java.lang.String str5 = mongoProperties0.uri;
        mongoProperties0.uri = "test";
        mongoProperties0.username = "";
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.database = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.host = "test";
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.maxConnectionIdleTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str8 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int15 = mongoClientOptions7.getMaxConnectionIdleTime();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(socketFactory16);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass13 = mongoProperties12.fieldNamingStrategy;
        mongoProperties12.host = "hi!";
        int int16 = mongoProperties12.getDEFAULT_PORT();
        mongoProperties12.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass21 = mongoProperties19.getFieldNamingStrategy();
        mongoProperties19.port = 10;
        mongoProperties19.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties19.createMongoClient(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties19.createMongoClient(mongoClientOptions35, environment36);
        java.lang.String str38 = mongoProperties19.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        com.mongodb.MongoClient mongoClient47 = mongoProperties19.createMongoClient(mongoClientOptions46);
        com.mongodb.MongoClient mongoClient48 = mongoProperties12.createMongoClient(mongoClientOptions46);
        int int49 = mongoClientOptions46.getAcceptableLatencyDifference();
        int int50 = mongoClientOptions46.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder51 = mongoProperties0.builder(mongoClientOptions46);
        int int52 = mongoClientOptions46.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5000 + "'", int50 == 5000);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 15 + "'", int52 == 15);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        mongoProperties7.port = 10;
        mongoProperties7.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties7.createMongoClient(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties7.createMongoClient(mongoClientOptions23, environment24);
        java.lang.String str26 = mongoProperties7.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.MongoClient mongoClient35 = mongoProperties7.createMongoClient(mongoClientOptions34);
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions34);
        int int37 = mongoClientOptions34.getAcceptableLatencyDifference();
        int int38 = mongoClientOptions34.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions34.getReadPreference();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertNotNull(readPreference39);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        long long8 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (byte) 100);
        boolean boolean20 = mongoClientOptions7.equals((java.lang.Object) (byte) 100);
        int int21 = mongoClientOptions7.getConnectTimeout();
        int int22 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatConnectRetryFrequency((int) 'a');
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) builder13);
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(writeConcern19);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        java.lang.String str3 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.localThreshold(100);
        java.lang.Class<?> wildcardClass10 = builder7.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass10;
        java.lang.String str12 = mongoProperties0.host;
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str15 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.threadsAllowedToBlockForConnectionMultiplier(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass10 = mongoProperties9.fieldNamingStrategy;
        boolean boolean11 = mongoProperties9.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions19);
        int int21 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder8.writeConcern(writeConcern23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions7.getDescription();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        int int12 = mongoProperties8.getDEFAULT_PORT();
        mongoProperties8.host = "";
        mongoProperties8.setHost("hi!");
        java.lang.Integer int17 = mongoProperties8.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass19 = mongoProperties18.fieldNamingStrategy;
        mongoProperties18.host = "hi!";
        java.lang.String str22 = mongoProperties18.uri;
        org.springframework.core.env.Environment environment23 = null;
        int int24 = mongoProperties18.determinePort(environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean34 = mongoClientOptions32.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory35 = mongoClientOptions32.getSocketFactory();
        int int36 = mongoClientOptions32.getMaxConnectionLifeTime();
        int int37 = mongoClientOptions32.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties18.builder(mongoClientOptions32);
        java.lang.String str39 = mongoProperties18.getUri();
        mongoProperties18.username = "";
        java.lang.Integer int42 = mongoProperties18.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass44 = mongoProperties43.fieldNamingStrategy;
        mongoProperties43.host = "hi!";
        int int47 = mongoProperties43.getDEFAULT_PORT();
        mongoProperties43.host = "";
        mongoProperties43.setHost("hi!");
        char[] charArray56 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties43.setPassword(charArray56);
        mongoProperties18.setPassword(charArray56);
        mongoProperties8.setPassword(charArray56);
        mongoProperties0.setPassword(charArray56);
        int int61 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str62 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 27017 + "'", int61 == 27017);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 100);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getLocalThreshold();
        boolean boolean16 = mongoClientOptions14.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = mongoProperties0.builder(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatFrequency((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder17.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean3 = mongoProperties0.hasCustomCredentials();
        boolean boolean4 = mongoProperties0.hasCustomAddress();
        mongoProperties0.username = "";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        int int17 = mongoClientOptions15.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions15, environment18);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions15.getSocketFactory();
        long long21 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions15.getDbDecoderFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getMaxWaitTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions10.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int6 = mongoProperties0.port;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass9 = mongoProperties8.fieldNamingStrategy;
        mongoProperties8.host = "hi!";
        java.lang.String str12 = mongoProperties8.uri;
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties8.determinePort(environment13);
        java.lang.String str15 = mongoProperties8.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass17 = mongoProperties16.fieldNamingStrategy;
        mongoProperties16.host = "hi!";
        int int20 = mongoProperties16.getDEFAULT_PORT();
        mongoProperties16.host = "";
        mongoProperties16.setHost("hi!");
        char[] charArray29 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties16.setPassword(charArray29);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass32 = mongoProperties31.fieldNamingStrategy;
        mongoProperties31.host = "hi!";
        int int35 = mongoProperties31.getDEFAULT_PORT();
        mongoProperties31.host = "";
        mongoProperties31.setHost("hi!");
        char[] charArray44 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties31.setPassword(charArray44);
        mongoProperties16.password = charArray44;
        mongoProperties8.setPassword(charArray44);
        mongoProperties0.setPassword(charArray44);
        boolean boolean49 = mongoProperties0.hasCustomCredentials();
        java.lang.String str50 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        boolean boolean5 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getMaxWaitTime();
        java.lang.String str19 = mongoClientOptions16.toString();
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions16);
        java.lang.String str21 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        boolean boolean24 = mongoProperties22.hasCustomAddress();
        java.lang.String str25 = mongoProperties22.uri;
        mongoProperties22.setHost("");
        java.lang.String str28 = mongoProperties22.getHost();
        java.lang.String str29 = mongoProperties22.getUsername();
        mongoProperties22.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        mongoProperties32.host = "hi!";
        mongoProperties32.authenticationDatabase = "";
        java.lang.String str38 = mongoProperties32.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.autoConnectRetry(false);
        boolean boolean55 = mongoClientOptions46.equals((java.lang.Object) false);
        int int56 = mongoClientOptions46.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder57 = mongoProperties32.builder(mongoClientOptions46);
        com.mongodb.MongoClientOptions.Builder builder58 = mongoProperties22.builder(mongoClientOptions46);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder63.build();
        javax.net.SocketFactory socketFactory67 = mongoClientOptions66.getSocketFactory();
        long long68 = mongoClientOptions66.getMaxAutoConnectRetryTime();
        int int69 = mongoClientOptions66.getHeartbeatConnectTimeout();
        boolean boolean70 = mongoClientOptions46.equals((java.lang.Object) mongoClientOptions66);
        com.mongodb.ReadPreference readPreference71 = mongoClientOptions66.getReadPreference();
        com.mongodb.MongoClient mongoClient72 = mongoProperties0.createMongoClient(mongoClientOptions66);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb://localhost/test" + "'", str25, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertNotNull(socketFactory67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 20000 + "'", int69 == 20000);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(readPreference71);
        org.junit.Assert.assertNotNull(mongoClient72);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions22.getSocketFactory();
        long long24 = mongoClientOptions22.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions22.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder14.dbDecoderFactory(dBDecoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(100);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.heartbeatSocketTimeout(10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass33 = mongoProperties32.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass34 = mongoProperties32.getFieldNamingStrategy();
        java.lang.String str35 = mongoProperties32.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        javax.net.SocketFactory socketFactory44 = mongoClientOptions43.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions43.getDbEncoderFactory();
        long long46 = mongoClientOptions43.getMaxAutoConnectRetryTime();
        boolean boolean47 = mongoClientOptions43.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties32.builder(mongoClientOptions43);
        int int49 = mongoClientOptions43.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference50 = mongoClientOptions43.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder51 = builder25.readPreference(readPreference50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder14.readPreference(readPreference50);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(readPreference50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUsername("test");
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.uri;
        mongoProperties0.port = 97;
        char[] charArray14 = mongoProperties0.password;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray14);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.readPreference(readPreference17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions26.getSocketFactory();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbDecoderFactory(dBDecoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.localThreshold((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder39 = builder18.heartbeatConnectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.minConnectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder12.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        long long9 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        int int11 = mongoClientOptions7.getLocalThreshold();
        int int12 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean14 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatThreadCount(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionIdleTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions24.getSocketFactory();
        long long26 = mongoClientOptions24.getMaxAutoConnectRetryTime();
        int int27 = mongoClientOptions24.getMinHeartbeatFrequency();
        int int28 = mongoClientOptions24.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions24.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions24.getSocketFactory();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder6.readPreference(readPreference31);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatThreadCount(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions7.getConnectTimeout();
        int int15 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.database = "test";
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int18 = mongoClientOptions16.getConnectTimeout();
        int int19 = mongoClientOptions16.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions16, environment20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: spring.data.mongodb.port=0 and no local mongo port configuration is available");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.autoConnectRetry(false);
        boolean boolean16 = mongoClientOptions7.equals((java.lang.Object) false);
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxAutoConnectRetryTime((long) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime(0);
        boolean boolean30 = mongoClientOptions7.equals((java.lang.Object) builder25);
        com.mongodb.MongoClientOptions.Builder builder32 = builder25.heartbeatConnectTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder34 = builder25.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minConnectionsPerHost((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.minHeartbeatFrequency((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass40 = mongoProperties39.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass41 = mongoProperties39.getFieldNamingStrategy();
        mongoProperties39.port = 10;
        mongoProperties39.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties39.createMongoClient(mongoClientOptions46);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties39.createMongoClient(mongoClientOptions55, environment56);
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions55.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder32.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder23.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder12.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder62 = builder0.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.connectTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass66 = mongoProperties65.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass67 = mongoProperties65.getFieldNamingStrategy();
        java.lang.String str68 = mongoProperties65.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder73.build();
        javax.net.SocketFactory socketFactory77 = mongoClientOptions76.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory78 = mongoClientOptions76.getDbEncoderFactory();
        long long79 = mongoClientOptions76.getMaxAutoConnectRetryTime();
        boolean boolean80 = mongoClientOptions76.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder81 = mongoProperties65.builder(mongoClientOptions76);
        int int82 = mongoClientOptions76.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory83 = mongoClientOptions76.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder84 = builder62.dbDecoderFactory(dBDecoderFactory83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder62.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertNotNull(socketFactory77);
        org.junit.Assert.assertNotNull(dBEncoderFactory78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        boolean boolean10 = mongoProperties0.hasCustomCredentials();
        int int11 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.autoConnectRetry(false);
        java.lang.Class<?> wildcardClass19 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions7.equals((java.lang.Object) "");
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        java.lang.String str13 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        mongoProperties19.host = "hi!";
        java.lang.String str23 = mongoProperties19.uri;
        mongoProperties19.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getLocalThreshold();
        boolean boolean35 = mongoClientOptions33.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties19.builder(mongoClientOptions33);
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions33.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions33.getWriteConcern();
        java.lang.Class<?> wildcardClass39 = writeConcern38.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass39;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb://localhost/test" + "'", str23, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isAutoConnectRetry();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int16 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str17 = mongoClientOptions7.getDescription();
        int int18 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.Integer int7 = mongoProperties0.port;
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        java.lang.String str11 = mongoProperties0.username;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        mongoProperties0.uri = "test";
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUsername();
        mongoProperties0.database = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxAutoConnectRetryTime((long) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        int int13 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int16 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray11 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        mongoProperties0.setHost("hi!");
        mongoProperties0.uri = "mongodb://localhost/test";
        int int11 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.uri = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions30.getSocketFactory();
        long long32 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        int int33 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions30.getDbEncoderFactory();
        boolean boolean35 = mongoClientOptions30.isCursorFinalizerEnabled();
        int int36 = mongoClientOptions30.getMinConnectionsPerHost();
        int int37 = mongoClientOptions30.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions30.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder18.socketFactory(socketFactory38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder10.socketFactory(socketFactory38);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        int int13 = mongoClientOptions10.getConnectTimeout();
        int int14 = mongoClientOptions10.getMinHeartbeatFrequency();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getMaxWaitTime();
        long long17 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions10.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoClientOptions14.toString();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions22.getReadPreference();
        boolean boolean24 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions22);
        int int25 = mongoClientOptions22.getConnectionsPerHost();
        int int26 = mongoClientOptions22.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions11.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions11.isAutoConnectRetry();
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties0.builder(mongoClientOptions11);
        mongoProperties0.setPort((java.lang.Integer) 35);
        int int19 = mongoProperties0.getDEFAULT_PORT();
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str21 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxConnectionLifeTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.String str19 = mongoProperties0.database;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions36);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        boolean boolean47 = mongoClientOptions46.isSocketKeepAlive();
        boolean boolean48 = mongoClientOptions46.isSocketKeepAlive();
        int int49 = mongoClientOptions46.getHeartbeatThreadCount();
        int int50 = mongoClientOptions46.getMaxConnectionLifeTime();
        int int51 = mongoClientOptions46.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties0.builder(mongoClientOptions46);
        java.lang.String str53 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass55 = mongoProperties54.fieldNamingStrategy;
        mongoProperties54.host = "hi!";
        java.lang.String str58 = mongoProperties54.uri;
        mongoProperties54.setDatabase("hi!");
        mongoProperties54.setUri("test");
        mongoProperties54.authenticationDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass66 = mongoProperties65.fieldNamingStrategy;
        mongoProperties65.host = "hi!";
        int int69 = mongoProperties65.getDEFAULT_PORT();
        mongoProperties65.host = "";
        mongoProperties65.setHost("hi!");
        char[] charArray78 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties65.setPassword(charArray78);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties80 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass81 = mongoProperties80.fieldNamingStrategy;
        mongoProperties80.host = "hi!";
        int int84 = mongoProperties80.getDEFAULT_PORT();
        mongoProperties80.host = "";
        mongoProperties80.setHost("hi!");
        char[] charArray93 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties80.setPassword(charArray93);
        mongoProperties65.password = charArray93;
        mongoProperties54.password = charArray93;
        mongoProperties0.password = charArray93;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "mongodb://localhost/test" + "'", str58, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 27017 + "'", int69 == 27017);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , a, a, 4]");
        org.junit.Assert.assertNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 27017 + "'", int84 == 27017);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[ , a, a, 4]");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.authenticationDatabase = "test";
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.username = "";
        java.lang.String str13 = mongoProperties0.database;
        java.lang.String str14 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinConnectionsPerHost();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        mongoProperties10.host = "hi!";
        mongoProperties10.authenticationDatabase = "";
        java.lang.String str16 = mongoProperties10.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.autoConnectRetry(false);
        boolean boolean33 = mongoClientOptions24.equals((java.lang.Object) false);
        int int34 = mongoClientOptions24.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties10.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        long long46 = mongoClientOptions44.getMaxAutoConnectRetryTime();
        int int47 = mongoClientOptions44.getHeartbeatConnectTimeout();
        boolean boolean48 = mongoClientOptions24.equals((java.lang.Object) mongoClientOptions44);
        java.lang.String str49 = mongoClientOptions44.getDescription();
        boolean boolean50 = mongoClientOptions44.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        boolean boolean9 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions7.getHeartbeatConnectRetryFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getAcceptableLatencyDifference();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.host;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        long long10 = mongoClientOptions7.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        int int12 = mongoClientOptions7.getConnectionsPerHost();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass23 = mongoProperties22.fieldNamingStrategy;
        mongoProperties22.host = "hi!";
        java.lang.String str26 = mongoProperties22.uri;
        boolean boolean27 = mongoProperties22.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass29 = mongoProperties28.fieldNamingStrategy;
        boolean boolean30 = mongoProperties28.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        com.mongodb.MongoClient mongoClient39 = mongoProperties28.createMongoClient(mongoClientOptions38);
        int int40 = mongoClientOptions38.getMaxWaitTime();
        java.lang.String str41 = mongoClientOptions38.toString();
        com.mongodb.MongoClient mongoClient42 = mongoProperties22.createMongoClient(mongoClientOptions38);
        java.lang.Class<?> wildcardClass43 = mongoClientOptions38.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass43;
        java.lang.Class<?> wildcardClass45 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass47 = mongoProperties46.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass48 = mongoProperties46.getFieldNamingStrategy();
        mongoProperties46.port = 10;
        mongoProperties46.database = "hi!";
        java.lang.String str53 = mongoProperties46.getUri();
        boolean boolean54 = mongoProperties46.hasCustomCredentials();
        java.lang.String str55 = mongoProperties46.authenticationDatabase;
        char[] charArray56 = mongoProperties46.getPassword();
        mongoProperties46.setPort((java.lang.Integer) 10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass60 = mongoProperties59.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass61 = mongoProperties59.getFieldNamingStrategy();
        mongoProperties59.port = 10;
        mongoProperties59.database = "hi!";
        java.lang.String str66 = mongoProperties59.getUri();
        boolean boolean67 = mongoProperties59.hasCustomCredentials();
        mongoProperties59.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties70 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass71 = mongoProperties70.fieldNamingStrategy;
        mongoProperties70.host = "hi!";
        int int74 = mongoProperties70.getDEFAULT_PORT();
        mongoProperties70.host = "";
        mongoProperties70.setHost("hi!");
        char[] charArray83 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties70.setPassword(charArray83);
        mongoProperties59.setPassword(charArray83);
        mongoProperties46.setPassword(charArray83);
        mongoProperties0.setPassword(charArray83);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "mongodb://localhost/test" + "'", str53, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(charArray56);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "mongodb://localhost/test" + "'", str66, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 27017 + "'", int74 == 27017);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , a, a, 4]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minConnectionsPerHost((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        boolean boolean9 = mongoProperties7.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions17);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder0.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions39.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder31.socketFactory(socketFactory40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder50.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder41.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getHeartbeatSocketTimeout();
        int int73 = mongoClientOptions71.getHeartbeatFrequency();
        boolean boolean74 = mongoClientOptions71.isSocketKeepAlive();
        int int75 = mongoClientOptions71.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder63.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder20.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.connectTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties81 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass82 = mongoProperties81.fieldNamingStrategy;
        boolean boolean83 = mongoProperties81.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder84 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder88 = builder86.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder90 = builder88.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions91 = builder88.build();
        com.mongodb.MongoClient mongoClient92 = mongoProperties81.createMongoClient(mongoClientOptions91);
        java.lang.String str93 = mongoClientOptions91.getRequiredReplicaSetName();
        int int94 = mongoClientOptions91.getHeartbeatThreadCount();
        java.lang.String str95 = mongoClientOptions91.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory96 = mongoClientOptions91.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder97 = builder78.dbDecoderFactory(dBDecoderFactory96);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5000 + "'", int73 == 5000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 120000 + "'", int75 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(mongoClientOptions91);
        org.junit.Assert.assertNotNull(mongoClient92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(dBDecoderFactory96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.host;
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.socketFactory(socketFactory17);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder27.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder18.readPreference(readPreference38);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass42 = mongoProperties41.fieldNamingStrategy;
        mongoProperties41.host = "hi!";
        org.springframework.core.env.Environment environment45 = null;
        int int46 = mongoProperties41.determinePort(environment45);
        java.lang.String str47 = mongoProperties41.username;
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        boolean boolean56 = mongoClientOptions55.isSocketKeepAlive();
        boolean boolean57 = mongoClientOptions55.isSocketKeepAlive();
        int int58 = mongoClientOptions55.getHeartbeatThreadCount();
        int int59 = mongoClientOptions55.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties41.createMongoClient(mongoClientOptions55, environment60);
        java.lang.Class<?> wildcardClass62 = mongoProperties41.getFieldNamingStrategy();
        java.lang.Integer int63 = mongoProperties41.getPort();
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        javax.net.SocketFactory socketFactory72 = mongoClientOptions71.getSocketFactory();
        long long73 = mongoClientOptions71.getMaxAutoConnectRetryTime();
        java.lang.String str74 = mongoClientOptions71.getRequiredReplicaSetName();
        int int75 = mongoClientOptions71.getLocalThreshold();
        int int76 = mongoClientOptions71.getMaxConnectionIdleTime();
        int int77 = mongoClientOptions71.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient78 = mongoProperties41.createMongoClient(mongoClientOptions71);
        int int79 = mongoClientOptions71.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern80 = mongoClientOptions71.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder81 = builder40.writeConcern(writeConcern80);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 27017 + "'", int46 == 27017);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(socketFactory72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10L + "'", long73 == 10L);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20000 + "'", int77 == 20000);
        org.junit.Assert.assertNotNull(mongoClient78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 500 + "'", int79 == 500);
        org.junit.Assert.assertNotNull(writeConcern80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime(35);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder16.minHeartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getSocketTimeout();
        int int15 = mongoClientOptions7.getMinConnectionsPerHost();
        java.lang.Class<?> wildcardClass16 = mongoClientOptions7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.acceptableLatencyDifference((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        java.lang.String str9 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.port = 0;
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass11 = mongoProperties10.fieldNamingStrategy;
        boolean boolean12 = mongoProperties10.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        com.mongodb.MongoClient mongoClient21 = mongoProperties10.createMongoClient(mongoClientOptions20);
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions20.getDbEncoderFactory();
        int int23 = mongoClientOptions20.getConnectTimeout();
        int int24 = mongoClientOptions20.getMinHeartbeatFrequency();
        boolean boolean25 = mongoClientOptions20.isAutoConnectRetry();
        int int26 = mongoClientOptions20.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions20.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions7.equals((java.lang.Object) dBDecoderFactory27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean15 = mongoClientOptions13.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory16 = mongoClientOptions13.getSocketFactory();
        int int17 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions13);
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass6 = mongoProperties5.fieldNamingStrategy;
        mongoProperties5.host = "hi!";
        java.lang.String str9 = mongoProperties5.uri;
        mongoProperties5.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getLocalThreshold();
        boolean boolean21 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder22 = mongoProperties5.builder(mongoClientOptions19);
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int24 = mongoClientOptions19.getLocalThreshold();
        int int25 = mongoClientOptions19.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        int int27 = mongoClientOptions19.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions19, environment28);
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5000 + "'", int25 == 5000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb://localhost/test" + "'", str30, "mongodb://localhost/test");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectRetryFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder11.socketFactory(socketFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder6.socketFactory(socketFactory24);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder6.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean9 = mongoClientOptions7.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions7.getSocketFactory();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        int int16 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions7.getWriteConcern();
        int int18 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setGridFsDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean19 = mongoClientOptions17.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        int int21 = mongoClientOptions17.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions17, environment22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions17.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions17.getSocketFactory();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(socketFactory26);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatConnectTimeout();
        java.lang.String str11 = mongoClientOptions7.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass15;
        java.lang.String str17 = mongoProperties0.gridFsDatabase;
        char[] charArray18 = mongoProperties0.password;
        java.lang.Integer int19 = mongoProperties0.port;
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoClientOptions16.getRequiredReplicaSetName();
        int int20 = mongoClientOptions16.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions16.getSocketFactory();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions16.getWriteConcern();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(writeConcern22);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatThreadCount();
        int int18 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions14, environment19);
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int22 = mongoProperties0.getPort();
        mongoProperties0.host = "";
        char[] charArray25 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(charArray25);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean19 = mongoClientOptions17.equals((java.lang.Object) (short) 0);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        int int21 = mongoClientOptions17.getConnectionsPerHost();
        int int22 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions17.getDbDecoderFactory();
        boolean boolean24 = mongoClientOptions17.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        boolean boolean26 = mongoClientOptions17.isSocketKeepAlive();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.Integer int6 = mongoProperties0.port;
        java.lang.Integer int7 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.host = "";
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        int int4 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass8 = mongoProperties7.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass9 = mongoProperties7.getFieldNamingStrategy();
        mongoProperties7.port = 10;
        mongoProperties7.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties7.createMongoClient(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties7.createMongoClient(mongoClientOptions23, environment24);
        java.lang.String str26 = mongoProperties7.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.MongoClient mongoClient35 = mongoProperties7.createMongoClient(mongoClientOptions34);
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions34);
        int int37 = mongoClientOptions34.getAcceptableLatencyDifference();
        int int38 = mongoClientOptions34.getHeartbeatFrequency();
        long long39 = mongoClientOptions34.getMaxAutoConnectRetryTime();
        int int40 = mongoClientOptions34.getHeartbeatFrequency();
        int int41 = mongoClientOptions34.getMaxConnectionLifeTime();
        java.lang.String str42 = mongoClientOptions34.getRequiredReplicaSetName();
        java.lang.String str43 = mongoClientOptions34.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5000 + "'", int40 == 5000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionIdleTime((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder2.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        java.lang.String str3 = mongoProperties0.uri;
        mongoProperties0.setHost("");
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.database = "hi!";
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str15 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        long long26 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int27 = mongoClientOptions25.getMinConnectionsPerHost();
        boolean boolean28 = mongoClientOptions25.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions25.getDbDecoderFactory();
        long long30 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int31 = mongoClientOptions25.getHeartbeatThreadCount();
        int int32 = mongoClientOptions25.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions25.getLocalThreshold();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions25, environment34);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(mongoClient35);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectRetryFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        boolean boolean2 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions10);
        int int12 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions10.getWriteConcern();
        int int14 = mongoClientOptions10.getMaxWaitTime();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass16 = mongoProperties15.fieldNamingStrategy;
        mongoProperties15.host = "hi!";
        int int19 = mongoProperties15.getDEFAULT_PORT();
        mongoProperties15.host = "";
        java.lang.String str22 = mongoProperties15.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.acceptableLatencyDifference((int) ' ');
        java.lang.Class<?> wildcardClass32 = builder31.getClass();
        mongoProperties15.fieldNamingStrategy = wildcardClass32;
        java.lang.String str34 = mongoProperties15.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass35 = mongoProperties15.fieldNamingStrategy;
        boolean boolean36 = mongoClientOptions10.equals((java.lang.Object) wildcardClass35);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        java.lang.String str7 = mongoProperties0.getUri();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setHost("mongodb://localhost/test");
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        mongoProperties0.authenticationDatabase = "hi!";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        java.lang.String str4 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        org.springframework.core.env.Environment environment9 = null;
        int int10 = mongoProperties0.determinePort(environment9);
        java.lang.Integer int11 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions27);
        mongoProperties0.database = "";
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        char[] charArray6 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions14.isSocketKeepAlive();
        int int17 = mongoClientOptions14.getHeartbeatSocketTimeout();
        boolean boolean18 = mongoClientOptions14.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14);
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.getPassword();
        mongoProperties0.username = "";
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.Integer int42 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a, a, 4]");
        org.junit.Assert.assertNull(int42);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.heartbeatConnectTimeout(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder0.heartbeatConnectRetryFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(5000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions14);
        boolean boolean19 = mongoClientOptions14.isAlwaysUseMBeans();
        boolean boolean20 = mongoClientOptions14.isCursorFinalizerEnabled();
        boolean boolean21 = mongoClientOptions14.isAutoConnectRetry();
        int int22 = mongoClientOptions14.getHeartbeatThreadCount();
        int int23 = mongoClientOptions14.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int3 = mongoProperties0.port;
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getHeartbeatThreadCount();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        java.lang.String str13 = mongoClientOptions7.toString();
        int int14 = mongoClientOptions7.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray3 = mongoProperties0.getPassword();
        mongoProperties0.host = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.host = "";
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxAutoConnectRetryTime((long) 500);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatFrequency();
        boolean boolean19 = mongoClientOptions16.isSocketKeepAlive();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder22 = builder2.writeConcern(writeConcern21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxWaitTime((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions7.toString();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.port = 10;
        mongoProperties0.database = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions7);
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder12.heartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str2 = mongoProperties0.username;
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions10.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions10.isAutoConnectRetry();
        int int17 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder18 = mongoProperties0.builder(mongoClientOptions10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass20 = mongoProperties19.fieldNamingStrategy;
        mongoProperties19.host = "hi!";
        mongoProperties19.setUri("mongodb://localhost/test");
        mongoProperties19.authenticationDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass28 = mongoProperties27.fieldNamingStrategy;
        mongoProperties27.host = "hi!";
        mongoProperties27.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass34 = mongoProperties33.fieldNamingStrategy;
        mongoProperties33.host = "hi!";
        int int37 = mongoProperties33.getDEFAULT_PORT();
        mongoProperties33.host = "";
        mongoProperties33.setHost("hi!");
        char[] charArray46 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties33.setPassword(charArray46);
        char[] charArray48 = mongoProperties33.password;
        mongoProperties27.setPassword(charArray48);
        mongoProperties19.setPassword(charArray48);
        mongoProperties0.setPassword(charArray48);
        int int52 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 27017 + "'", int37 == 27017);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , a, a, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 27017 + "'", int52 == 27017);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.localThreshold(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass7 = mongoProperties6.fieldNamingStrategy;
        boolean boolean8 = mongoProperties6.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        com.mongodb.MongoClient mongoClient17 = mongoProperties6.createMongoClient(mongoClientOptions16);
        int int18 = mongoClientOptions16.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder3.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder3.maxConnectionLifeTime(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass12 = mongoProperties11.fieldNamingStrategy;
        mongoProperties11.host = "hi!";
        mongoProperties11.authenticationDatabase = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass18 = mongoProperties17.fieldNamingStrategy;
        mongoProperties17.host = "hi!";
        int int21 = mongoProperties17.getDEFAULT_PORT();
        mongoProperties17.host = "";
        mongoProperties17.setHost("hi!");
        char[] charArray30 = new char[] { ' ', 'a', 'a', '4' };
        mongoProperties17.setPassword(charArray30);
        char[] charArray32 = mongoProperties17.password;
        mongoProperties11.setPassword(charArray32);
        mongoProperties0.password = charArray32;
        mongoProperties0.setUri("");
        char[] charArray37 = mongoProperties0.password;
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , a, a, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a, a, 4]");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getHeartbeatThreadCount();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatConnectTimeout((int) (short) 10);
        boolean boolean27 = mongoClientOptions7.equals((java.lang.Object) builder26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxAutoConnectRetryTime((long) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions48.getSocketFactory();
        long long50 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        int int51 = mongoClientOptions48.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions48.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder38.dbEncoderFactory(dBEncoderFactory53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder31.dbEncoderFactory(dBEncoderFactory53);
        com.mongodb.MongoClientOptions.Builder builder57 = builder31.minConnectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }
}

