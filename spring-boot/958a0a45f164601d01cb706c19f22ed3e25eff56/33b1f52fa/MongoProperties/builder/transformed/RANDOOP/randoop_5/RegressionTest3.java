import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.event.CommandListener commandListener17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.addCommandListener(commandListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.clearPassword();
        char[] charArray9 = mongoProperties7.getPassword();
        mongoProperties7.setGridFsDatabase("");
        java.lang.String str12 = mongoProperties7.getUsername();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        int int30 = mongoClientOptions26.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions26.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList32 = mongoClientOptions26.getCommandListeners();
        int int33 = mongoClientOptions26.getSocketTimeout();
        java.lang.String str34 = mongoClientOptions26.getDescription();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties7.builder(mongoClientOptions26);
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions26, environment36);
        int int38 = mongoClientOptions26.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions26.getDbDecoderFactory();
        java.lang.String str40 = mongoClientOptions26.getDescription();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList41 = mongoClientOptions26.getCommandListeners();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30000 + "'", int30 == 30000);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(commandListenerList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(commandListenerList41);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getSocketTimeout();
        int int31 = mongoClientOptions25.getMaxConnectionLifeTime();
        int int32 = mongoClientOptions25.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions25);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList34 = mongoClientOptions25.getCommandListeners();
        int int35 = mongoClientOptions25.getMaxWaitTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList36 = mongoClientOptions25.getCommandListeners();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(commandListenerList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNotNull(commandListenerList36);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setUri("hi!");
        char[] charArray26 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(charArray26);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions9, environment10);
        int int12 = mongoClientOptions9.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (short) 100);
        boolean boolean25 = mongoClientOptions9.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions9);
        int int27 = mongoClientOptions9.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions9.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.setUri("hi!");
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str24 = mongoProperties0.getMongoClientDatabase();
        char[] charArray25 = mongoProperties0.password;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "test" + "'", str24, "test");
        org.junit.Assert.assertNull(charArray25);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.heartbeatSocketTimeout(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder4.connectionsPerHost((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        mongoProperties0.setUsername("");
        org.springframework.core.env.Environment environment35 = null;
        int int36 = mongoProperties0.determinePort(environment35);
        char[] charArray37 = mongoProperties0.getPassword();
        mongoProperties0.database = "hi!";
        java.lang.String str40 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 27017 + "'", int36 == 27017);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        int int9 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        int int20 = mongoClientOptions18.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions18.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder22 = mongoProperties0.builder(mongoClientOptions18);
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.port = 1;
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str11 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 120000);
        mongoProperties0.database = "test";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        java.lang.Integer int11 = mongoProperties0.port;
        org.springframework.core.env.Environment environment12 = null;
        int int13 = mongoProperties0.determinePort(environment12);
        mongoProperties0.setUsername("");
        java.lang.String str16 = mongoProperties0.database;
        java.lang.Integer int17 = mongoProperties0.port;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        char[] charArray10 = mongoProperties0.getPassword();
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setHost("test");
        char[] charArray12 = mongoProperties0.password;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray12);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.database = "mongodb://localhost/test";
        java.lang.String str10 = mongoProperties0.getUri();
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.event.CommandListener commandListener15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.addCommandListener(commandListener15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions7.isSslEnabled();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.host = "";
        mongoProperties23.username = "";
        mongoProperties23.clearPassword();
        java.lang.String str29 = mongoProperties23.getDatabase();
        java.lang.String str30 = mongoProperties23.getGridFsDatabase();
        mongoProperties23.database = "test";
        boolean boolean33 = mongoClientOptions19.equals((java.lang.Object) mongoProperties23);
        java.lang.String str34 = mongoProperties23.getDatabase();
        mongoProperties23.host = "";
        java.lang.String str37 = mongoProperties23.getAuthenticationDatabase();
        java.lang.String str38 = mongoProperties23.gridFsDatabase;
        mongoProperties23.setPort((java.lang.Integer) 500);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "test" + "'", str34, "test");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions13.getDbDecoderFactory();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(writeConcern21);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatConnectTimeout();
        int int71 = mongoClientOptions69.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions69.getReadPreference();
        com.mongodb.ReadPreference readPreference73 = mongoClientOptions69.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder74 = builder55.readPreference(readPreference73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean77 = mongoClientOptions41.equals((java.lang.Object) builder74);
        com.mongodb.ReadPreference readPreference78 = mongoClientOptions41.getReadPreference();
        boolean boolean79 = mongoClientOptions41.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory80 = mongoClientOptions41.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder81 = builder27.dbDecoderFactory(dBDecoderFactory80);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder83 = builder81.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(readPreference73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(readPreference78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        boolean boolean34 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean35 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions31);
        int int36 = mongoClientOptions31.getMinConnectionsPerHost();
        boolean boolean37 = mongoClientOptions31.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setAuthenticationDatabase("");
        boolean boolean10 = mongoProperties0.hasCustomAddress();
        java.lang.String str11 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        int int52 = mongoClientOptions51.getHeartbeatConnectTimeout();
        int int53 = mongoClientOptions51.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry54 = mongoClientOptions51.getCodecRegistry();
        boolean boolean55 = mongoClientOptions51.isSocketKeepAlive();
        int int56 = mongoClientOptions51.getMinConnectionsPerHost();
        int int57 = mongoClientOptions51.getConnectTimeout();
        int int58 = mongoClientOptions51.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory59 = mongoClientOptions51.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder31.socketFactory(socketFactory59);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(codecRegistry54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20000 + "'", int58 == 20000);
        org.junit.Assert.assertNotNull(socketFactory59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setUri("");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.Integer int9 = mongoProperties0.port;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.heartbeatConnectTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.localThreshold((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern38 = mongoClientOptions36.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder26.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        int int54 = mongoClientOptions53.getHeartbeatConnectTimeout();
        int int55 = mongoClientOptions53.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions53.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder26.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder9.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder60 = builder9.connectTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(readConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        com.mongodb.MongoClientOptions.Builder builder7 = mongoProperties0.builder(mongoClientOptions6);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionLifeTime(0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties7.createMongoClient(mongoClientOptions16, environment17);
        int int19 = mongoClientOptions16.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        int int21 = mongoClientOptions16.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions16, environment22);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(mongoClient23);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        int int22 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int24 = mongoClientOptions13.getLocalThreshold();
        int int25 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions13.getReadPreference();
        int int27 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.host = "test";
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        boolean boolean13 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.uri = "";
        java.lang.String str6 = mongoProperties0.uri;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        java.lang.String str11 = mongoProperties7.getUri();
        java.lang.Integer int12 = mongoProperties7.getPort();
        char[] charArray16 = new char[] { ' ', ' ', '4' };
        mongoProperties7.setPassword(charArray16);
        mongoProperties0.setPassword(charArray16);
        java.lang.Integer int19 = mongoProperties0.getPort();
        java.lang.String str20 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "  4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "  4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ,  , 4]");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions22.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = builder12.readConcern(readConcern24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        int int40 = mongoClientOptions39.getHeartbeatConnectTimeout();
        int int41 = mongoClientOptions39.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder12.dbDecoderFactory(dBDecoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder63.build();
        int int67 = mongoClientOptions66.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern68 = mongoClientOptions66.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder69 = builder56.readConcern(readConcern68);
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.description("");
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder80.build();
        int int84 = mongoClientOptions83.getHeartbeatConnectTimeout();
        int int85 = mongoClientOptions83.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory86 = mongoClientOptions83.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder87 = builder56.dbDecoderFactory(dBDecoderFactory86);
        com.mongodb.MongoClientOptions.Builder builder88 = builder12.dbDecoderFactory(dBDecoderFactory86);
        com.mongodb.MongoClientOptions.Builder builder90 = builder12.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder92 = builder90.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder94 = builder92.heartbeatConnectTimeout((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(readConcern68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 20000 + "'", int84 == 20000);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        int int26 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int27 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions19.getReadPreference();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(readPreference28);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("hi!");
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        java.lang.String str8 = mongoProperties0.uri;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties0.builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatSocketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.connectionsPerHost((int) 'a');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        boolean boolean26 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions19.getSocketFactory();
        int int29 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions19.getMinConnectionsPerHost();
        int int31 = mongoClientOptions19.getConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.username;
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        mongoProperties0.clearPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.host;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int13 = mongoProperties0.port;
        java.lang.Class<?> wildcardClass14 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.event.CommandListener commandListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.addCommandListener(commandListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions18.getDbDecoderFactory();
        java.lang.Object obj21 = null;
        boolean boolean22 = mongoClientOptions18.equals(obj21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        int int24 = mongoClientOptions18.getHeartbeatConnectTimeout();
        java.lang.String str25 = mongoClientOptions18.getDescription();
        int int26 = mongoClientOptions18.getHeartbeatFrequency();
        int int27 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int28 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int29 = mongoClientOptions18.getHeartbeatFrequency();
        int int30 = mongoClientOptions18.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions18);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.host;
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setDatabase("");
        java.lang.Integer int7 = mongoProperties0.getPort();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 20000;
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        mongoProperties0.setGridFsDatabase("hi!");
        boolean boolean14 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClientOptions.Builder builder12 = mongoProperties7.builder(mongoClientOptions11);
        char[] charArray13 = mongoProperties7.getPassword();
        mongoProperties7.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties7.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions29.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(15);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        mongoProperties0.port = 500;
        mongoProperties0.uri = "";
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions21);
        boolean boolean26 = mongoProperties0.hasCustomAddress();
        java.lang.String str27 = mongoProperties0.database;
        java.lang.String str28 = mongoProperties0.username;
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder4.build();
        int int10 = mongoClientOptions9.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions9.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean49 = mongoClientOptions13.equals((java.lang.Object) builder46);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.socketKeepAlive(true);
        boolean boolean59 = mongoClientOptions13.equals((java.lang.Object) builder54);
        int int60 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions13.getDbEncoderFactory();
        int int62 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 15 + "'", int60 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean12 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties11.fieldNamingStrategy = wildcardClass20;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties11.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.username = "";
        boolean boolean45 = mongoProperties0.hasCustomAddress();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties46.database = "";
        java.lang.String str49 = mongoProperties46.getUsername();
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass55 = builder54.getClass();
        mongoProperties46.fieldNamingStrategy = wildcardClass55;
        java.lang.String str57 = mongoProperties46.getHost();
        mongoProperties46.setUri("hi!");
        java.lang.Class<?> wildcardClass60 = mongoProperties46.getFieldNamingStrategy();
        mongoProperties0.fieldNamingStrategy = wildcardClass60;
        java.lang.String str62 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("");
        mongoProperties0.setPort((java.lang.Integer) (-1));
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        mongoProperties12.username = "";
        mongoProperties12.clearPassword();
        java.lang.String str18 = mongoProperties12.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setAuthenticationDatabase("hi!");
        java.lang.String str22 = mongoProperties19.getHost();
        mongoProperties19.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties19.builder(mongoClientOptions38);
        int int41 = mongoClientOptions38.getMaxConnectionIdleTime();
        int int42 = mongoClientOptions38.getConnectionsPerHost();
        int int43 = mongoClientOptions38.getSocketTimeout();
        int int44 = mongoClientOptions38.getMinHeartbeatFrequency();
        boolean boolean45 = mongoClientOptions38.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder46 = mongoProperties12.builder(mongoClientOptions38);
        int int47 = mongoClientOptions38.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList48 = mongoClientOptions38.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder49 = mongoProperties0.builder(mongoClientOptions38);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatConnectTimeout(27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 500 + "'", int44 == 500);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.host = "";
        java.lang.String str8 = mongoProperties5.getHost();
        java.lang.String str9 = mongoProperties5.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.database = "";
        java.lang.String str13 = mongoProperties10.getUsername();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass19 = builder18.getClass();
        mongoProperties10.fieldNamingStrategy = wildcardClass19;
        mongoProperties5.fieldNamingStrategy = wildcardClass19;
        mongoProperties0.fieldNamingStrategy = wildcardClass19;
        mongoProperties0.setUri("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        mongoProperties0.port = 500;
        java.lang.String str10 = mongoProperties0.getDatabase();
        int int11 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setAuthenticationDatabase("hi!");
        java.lang.String str13 = mongoProperties10.getHost();
        mongoProperties10.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties10.builder(mongoClientOptions29);
        int int32 = mongoClientOptions29.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern33 = mongoClientOptions29.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder4.readConcern(readConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions48.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions48.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList52 = mongoClientOptions48.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions48.getCodecRegistry();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder34.socketFactory(socketFactory54);
        com.mongodb.event.CommandListener commandListener56 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder57 = builder34.addCommandListener(commandListener56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(readConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(commandListenerList52);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.serverSelectionTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        java.lang.String str23 = mongoClientOptions22.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder13.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.heartbeatConnectTimeout(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        boolean boolean26 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions19.getSocketFactory();
        int int29 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions19.getMinConnectionsPerHost();
        int int31 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions19.getWriteConcern();
        int int33 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions27.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder31 = builder9.codecRegistry(codecRegistry30);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        java.lang.String str38 = mongoClientOptions37.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder9.dbEncoderFactory(dBEncoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder4.dbEncoderFactory(dBEncoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatFrequency((int) 'a');
        com.mongodb.event.CommandListener commandListener44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder41.addCommandListener(commandListener44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getDatabase();
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions23.getMaxConnectionIdleTime();
        boolean boolean26 = mongoClientOptions23.isCursorFinalizerEnabled();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions23.getDbDecoderFactory();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions23, environment28);
        int int30 = mongoClientOptions23.getMaxWaitTime();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions19.getWriteConcern();
        int int29 = mongoClientOptions19.getServerSelectionTimeout();
        boolean boolean30 = mongoClientOptions19.isSocketKeepAlive();
        int int31 = mongoClientOptions19.getSocketTimeout();
        java.lang.String str32 = mongoClientOptions19.getRequiredReplicaSetName();
        int int33 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 30000 + "'", int29 == 30000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        boolean boolean6 = mongoProperties0.hasCustomAddress();
        boolean boolean7 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder18.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder18.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setAuthenticationDatabase("hi!");
        java.lang.String str38 = mongoProperties35.getHost();
        mongoProperties35.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder56 = mongoProperties35.builder(mongoClientOptions54);
        int int57 = mongoClientOptions54.getMaxConnectionIdleTime();
        int int58 = mongoClientOptions54.getConnectionsPerHost();
        int int59 = mongoClientOptions54.getSocketTimeout();
        int int60 = mongoClientOptions54.getMinHeartbeatFrequency();
        boolean boolean61 = mongoClientOptions54.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions54);
        com.mongodb.WriteConcern writeConcern63 = mongoClientOptions54.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder64 = builder34.writeConcern(writeConcern63);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.description("");
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder75.build();
        int int79 = mongoClientOptions78.getHeartbeatConnectTimeout();
        int int80 = mongoClientOptions78.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry81 = mongoClientOptions78.getCodecRegistry();
        int int82 = mongoClientOptions78.getServerSelectionTimeout();
        int int83 = mongoClientOptions78.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern84 = mongoClientOptions78.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder85 = builder34.writeConcern(writeConcern84);
        com.mongodb.MongoClientOptions.Builder builder86 = builder18.writeConcern(writeConcern84);
        com.mongodb.MongoClientOptions.Builder builder87 = builder13.writeConcern(writeConcern84);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 500 + "'", int60 == 500);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(writeConcern63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20000 + "'", int79 == 20000);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(codecRegistry81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 30000 + "'", int82 == 30000);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(writeConcern84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 20000;
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        mongoProperties0.gridFsDatabase = "hi!";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.database = "";
        java.lang.String str29 = mongoProperties26.getDatabase();
        java.lang.String str30 = mongoProperties26.getUri();
        java.lang.Integer int31 = mongoProperties26.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setAuthenticationDatabase("hi!");
        java.lang.String str35 = mongoProperties32.getHost();
        mongoProperties32.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        int int52 = mongoClientOptions51.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder53 = mongoProperties32.builder(mongoClientOptions51);
        int int54 = mongoClientOptions51.getMaxConnectionIdleTime();
        int int55 = mongoClientOptions51.getConnectionsPerHost();
        int int56 = mongoClientOptions51.getSocketTimeout();
        int int57 = mongoClientOptions51.getMinHeartbeatFrequency();
        boolean boolean58 = mongoClientOptions51.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions51);
        int int60 = mongoClientOptions51.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder61 = mongoProperties26.builder(mongoClientOptions51);
        int int62 = mongoClientOptions51.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions51);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder71 = builder68.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder73 = builder68.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder73.build();
        boolean boolean75 = mongoClientOptions74.isAlwaysUseMBeans();
        org.bson.codecs.configuration.CodecRegistry codecRegistry76 = mongoClientOptions74.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder77 = builder63.codecRegistry(codecRegistry76);
        boolean boolean78 = mongoClientOptions19.equals((java.lang.Object) builder63);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb://localhost/test" + "'", str30, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 500 + "'", int57 == 500);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(codecRegistry76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        java.lang.String str19 = mongoClientOptions18.getRequiredReplicaSetName();
        int int20 = mongoClientOptions18.getServerSelectionTimeout();
        boolean boolean21 = mongoClientOptions18.isCursorFinalizerEnabled();
        int int22 = mongoClientOptions18.getHeartbeatConnectTimeout();
        java.lang.String str23 = mongoClientOptions18.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder(mongoClientOptions5);
        int int9 = mongoClientOptions5.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions5.getCommandListeners();
        int int11 = mongoClientOptions5.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        mongoProperties15.setUsername("hi!");
        char[] charArray20 = mongoProperties15.getPassword();
        java.lang.String str21 = mongoProperties15.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties15.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        boolean boolean41 = mongoProperties0.hasCustomAddress();
        mongoProperties0.port = 5;
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        mongoProperties20.database = "mongodb://localhost/test";
        int int29 = mongoProperties20.getDEFAULT_PORT();
        mongoProperties20.setHost("hi!");
        mongoProperties20.setUri("hi!");
        java.lang.String str34 = mongoProperties20.gridFsDatabase;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 27017 + "'", int29 == 27017);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str7 = mongoProperties0.username;
        java.lang.Integer int8 = mongoProperties0.port;
        mongoProperties0.setAuthenticationDatabase("");
        int int11 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder2.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatConnectTimeout();
        int int47 = mongoClientOptions45.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions45.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder49 = builder27.codecRegistry(codecRegistry48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        java.lang.String str56 = mongoClientOptions55.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions55.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder27.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder22.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder19.dbEncoderFactory(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry44 = mongoClientOptions41.getCodecRegistry();
        int int45 = mongoClientOptions41.getServerSelectionTimeout();
        boolean boolean46 = mongoClientOptions41.isAlwaysUseMBeans();
        int int47 = mongoClientOptions41.getConnectionsPerHost();
        int int48 = mongoClientOptions41.getMaxWaitTime();
        int int49 = mongoClientOptions41.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions41.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder27.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder18.socketFactory(socketFactory50);
        com.mongodb.event.CommandListener commandListener53 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder54 = builder18.addCommandListener(commandListener53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(codecRegistry44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 30000 + "'", int45 == 30000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 120000 + "'", int48 == 120000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str8 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.uri = "";
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.Integer int7 = mongoProperties0.getPort();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.database;
        boolean boolean10 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str14 = mongoProperties0.username;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        mongoProperties20.database = "mongodb://localhost/test";
        int int29 = mongoProperties20.getDEFAULT_PORT();
        mongoProperties20.setHost("hi!");
        mongoProperties20.gridFsDatabase = "hi!";
        mongoProperties20.database = "";
        mongoProperties20.database = "hi!";
        java.lang.Integer int38 = mongoProperties20.getPort();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 27017 + "'", int29 == 27017);
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions7.getCommandListeners();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClientOptions.Builder builder12 = mongoProperties7.builder(mongoClientOptions11);
        char[] charArray13 = mongoProperties7.getPassword();
        mongoProperties7.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties7.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions29.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime(1);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions5.isSslInvalidHostNameAllowed();
        int int9 = mongoClientOptions5.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.localThreshold((int) (byte) 100);
        boolean boolean23 = mongoClientOptions5.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.maxWaitTime(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        boolean boolean23 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions19.getWriteConcern();
        int int25 = mongoClientOptions19.getMaxWaitTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.database = "hi!";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.database;
        java.lang.Integer int14 = mongoProperties0.port;
        java.lang.String str15 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions14.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.readConcern(readConcern16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions19.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions19.getCodecRegistry();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = mongoProperties0.builder(mongoClientOptions19);
        char[] charArray27 = mongoProperties0.password;
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(charArray27);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.localThreshold(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        mongoProperties0.setUsername("");
        java.lang.String str35 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.uri = "test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        java.lang.String str33 = mongoProperties0.database;
        boolean boolean34 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setHost("test");
        mongoProperties0.port = 27017;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int29 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        int int30 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int31 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.database = "";
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int10 = mongoProperties0.port;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 20000;
        char[] charArray10 = mongoProperties0.password;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        int int26 = mongoClientOptions22.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList28 = mongoClientOptions22.getCommandListeners();
        int int29 = mongoClientOptions22.getSocketTimeout();
        int int30 = mongoClientOptions22.getMinHeartbeatFrequency();
        java.lang.Class<?> wildcardClass31 = mongoClientOptions22.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass31;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(commandListenerList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.host;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.String str12 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions26.getLocalThreshold();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions26.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties0.builder(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions34.getDbDecoderFactory();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int28 = mongoClientOptions19.getMinConnectionsPerHost();
        int int29 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        java.lang.String str33 = mongoClientOptions27.getRequiredReplicaSetName();
        boolean boolean34 = mongoClientOptions27.isSocketKeepAlive();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("hi!");
        java.lang.String str24 = mongoProperties21.getHost();
        mongoProperties21.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder42 = mongoProperties21.builder(mongoClientOptions40);
        int int43 = mongoClientOptions40.getMaxConnectionIdleTime();
        int int44 = mongoClientOptions40.getConnectionsPerHost();
        int int45 = mongoClientOptions40.getSocketTimeout();
        int int46 = mongoClientOptions40.getMinHeartbeatFrequency();
        boolean boolean47 = mongoClientOptions40.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions40);
        com.mongodb.WriteConcern writeConcern49 = mongoClientOptions40.getWriteConcern();
        int int50 = mongoClientOptions40.getMaxConnectionIdleTime();
        boolean boolean51 = mongoClientOptions13.equals((java.lang.Object) int50);
        int int52 = mongoClientOptions13.getHeartbeatFrequency();
        int int53 = mongoClientOptions13.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 500 + "'", int46 == 500);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(writeConcern49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10000 + "'", int53 == 10000);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        mongoProperties0.uri = "test";
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        java.lang.String str10 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.uri = "";
        java.lang.String str12 = mongoProperties0.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.host = "";
        mongoProperties13.username = "";
        java.lang.String str18 = mongoProperties13.getHost();
        mongoProperties13.port = 1;
        mongoProperties13.setUsername("test");
        mongoProperties13.setUri("");
        int int25 = mongoProperties13.getDEFAULT_PORT();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties26.setAuthenticationDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.database = "";
        java.lang.String str43 = mongoProperties40.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties44.host = "";
        java.lang.String str47 = mongoProperties44.getHost();
        char[] charArray49 = new char[] { ' ' };
        mongoProperties44.setPassword(charArray49);
        char[] charArray54 = new char[] { '4', '4', '#' };
        mongoProperties44.password = charArray54;
        mongoProperties40.setPassword(charArray54);
        mongoProperties26.password = charArray54;
        mongoProperties13.password = charArray54;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties59.setAuthenticationDatabase("hi!");
        java.lang.String str62 = mongoProperties59.getHost();
        java.lang.String str63 = mongoProperties59.getUri();
        mongoProperties59.gridFsDatabase = "";
        mongoProperties59.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str68 = mongoProperties59.host;
        mongoProperties59.gridFsDatabase = "mongodb://localhost/test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties71 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties71.database = "";
        java.lang.String str74 = mongoProperties71.getDatabase();
        java.lang.String str75 = mongoProperties71.getUri();
        java.lang.Class<?> wildcardClass76 = mongoProperties71.fieldNamingStrategy;
        mongoProperties71.setPort((java.lang.Integer) 120000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties79 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties79.host = "";
        java.lang.String str82 = mongoProperties79.getHost();
        char[] charArray84 = new char[] { ' ' };
        mongoProperties79.setPassword(charArray84);
        mongoProperties71.password = charArray84;
        mongoProperties59.password = charArray84;
        mongoProperties13.password = charArray84;
        mongoProperties0.setPassword(charArray84);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27017 + "'", int25 == 27017);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4, 4, #]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "mongodb://localhost/test" + "'", str63, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mongodb://localhost/test" + "'", str75, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[ ]");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        mongoProperties0.port = 10000;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder11.readConcern(readConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        int int43 = mongoClientOptions42.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions42);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern54 = mongoClientOptions52.getReadConcern();
        int int55 = mongoClientOptions52.getMaxWaitTime();
        int int56 = mongoClientOptions52.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions52.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder44.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder44.minHeartbeatFrequency((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties63 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties63.setAuthenticationDatabase("hi!");
        java.lang.String str66 = mongoProperties63.getHost();
        mongoProperties63.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.description("");
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder79.build();
        int int83 = mongoClientOptions82.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder84 = mongoProperties63.builder(mongoClientOptions82);
        int int85 = mongoClientOptions82.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern86 = mongoClientOptions82.getReadConcern();
        boolean boolean87 = mongoClientOptions82.isSslInvalidHostNameAllowed();
        boolean boolean88 = mongoClientOptions82.isSslEnabled();
        javax.net.SocketFactory socketFactory89 = mongoClientOptions82.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder90 = builder44.socketFactory(socketFactory89);
        com.mongodb.MongoClientOptions.Builder builder91 = builder30.socketFactory(socketFactory89);
        com.mongodb.MongoClientOptions.Builder builder93 = builder30.minHeartbeatFrequency((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(readConcern54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 120000 + "'", int55 == 120000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 20000 + "'", int83 == 20000);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(readConcern86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(socketFactory89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setAuthenticationDatabase("hi!");
        java.lang.String str20 = mongoProperties17.getHost();
        mongoProperties17.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties17.builder(mongoClientOptions36);
        boolean boolean39 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions36);
        int int40 = mongoClientOptions36.getServerSelectionTimeout();
        int int41 = mongoClientOptions36.getHeartbeatConnectTimeout();
        int int42 = mongoClientOptions36.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 30000 + "'", int40 == 30000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 30000 + "'", int42 == 30000);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.minConnectionsPerHost(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        char[] charArray10 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getDatabase();
        java.lang.Class<?> wildcardClass15 = mongoProperties11.fieldNamingStrategy;
        java.lang.Integer int16 = mongoProperties11.getPort();
        java.lang.String str17 = mongoProperties11.getDatabase();
        mongoProperties11.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties11.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.host = "";
        mongoProperties22.setUsername("hi!");
        mongoProperties22.port = (-1);
        char[] charArray29 = mongoProperties22.getPassword();
        java.lang.String str30 = mongoProperties22.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.host = "";
        char[] charArray35 = new char[] { '4' };
        mongoProperties31.setPassword(charArray35);
        mongoProperties22.password = charArray35;
        mongoProperties11.password = charArray35;
        mongoProperties0.password = charArray35;
        boolean boolean40 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions21);
        java.lang.String str26 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "hi!";
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions19.getCodecRegistry();
        int int28 = mongoClientOptions19.getHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        int int7 = mongoClientOptions5.getHeartbeatSocketTimeout();
        int int8 = mongoClientOptions5.getConnectionsPerHost();
        int int9 = mongoClientOptions5.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        java.lang.Object obj21 = null;
        boolean boolean22 = mongoClientOptions13.equals(obj21);
        boolean boolean23 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str26 = mongoProperties25.username;
        boolean boolean27 = mongoClientOptions19.equals((java.lang.Object) mongoProperties25);
        int int28 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int29 = mongoClientOptions19.getConnectionsPerHost();
        int int30 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int31 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setDatabase("test");
        java.lang.String str10 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.Object obj14 = null;
        boolean boolean15 = mongoClientOptions13.equals(obj14);
        int int16 = mongoClientOptions13.getHeartbeatConnectTimeout();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions22.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = builder12.readConcern(readConcern24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        int int56 = mongoClientOptions55.getHeartbeatConnectTimeout();
        int int57 = mongoClientOptions55.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions55.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder39.dbDecoderFactory(dBDecoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder29.dbDecoderFactory(dBDecoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder64 = builder60.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions13.getDbDecoderFactory();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions13.getReadPreference();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.setUri("");
        java.lang.Integer int10 = mongoProperties0.port;
        java.lang.String str11 = mongoProperties0.host;
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.username;
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.uri = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str13 = mongoProperties0.uri;
        java.lang.String str14 = mongoProperties0.uri;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        char[] charArray14 = mongoProperties0.password;
        mongoProperties0.uri = "";
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(charArray14);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(true);
        com.mongodb.event.CommandListener commandListener13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder8.addCommandListener(commandListener13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.setUri("hi!");
        java.lang.String str33 = mongoProperties0.username;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str18 = mongoProperties15.getHost();
        mongoProperties15.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties15.builder(mongoClientOptions34);
        int int37 = mongoClientOptions34.getMaxConnectionIdleTime();
        int int38 = mongoClientOptions34.getConnectionsPerHost();
        int int39 = mongoClientOptions34.getSocketTimeout();
        int int40 = mongoClientOptions34.getMinHeartbeatFrequency();
        boolean boolean41 = mongoClientOptions34.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions34);
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions34.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder6.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.connectionsPerHost(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        boolean boolean25 = mongoClientOptions19.isSslEnabled();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions17.getReadConcern();
        int int20 = mongoClientOptions17.getMaxWaitTime();
        int int21 = mongoClientOptions17.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions17.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder9.socketFactory(socketFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder9.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.event.CommandListener commandListener30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder31 = builder29.addCommandListener(commandListener30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions22.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions22, environment29);
        java.lang.String str31 = mongoClientOptions22.getRequiredReplicaSetName();
        java.lang.String str32 = mongoClientOptions22.getRequiredReplicaSetName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionIdleTime(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        java.lang.Class<?> wildcardClass7 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.event.CommandListener commandListener22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder21.addCommandListener(commandListener22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions27.getReadPreference();
        int int34 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions27.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.maxWaitTime(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        int int32 = mongoClientOptions28.getServerSelectionTimeout();
        int int33 = mongoClientOptions28.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions28.getWriteConcern();
        int int35 = mongoClientOptions28.getHeartbeatConnectTimeout();
        com.mongodb.ReadConcern readConcern36 = mongoClientOptions28.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = builder14.readConcern(readConcern36);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 30000 + "'", int32 == 30000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(readConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        java.lang.Integer int11 = mongoProperties0.port;
        org.springframework.core.env.Environment environment12 = null;
        int int13 = mongoProperties0.determinePort(environment12);
        boolean boolean14 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.port = 10000;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27017 + "'", int13 == 27017);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        int int18 = mongoClientOptions13.getConnectTimeout();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.minConnectionsPerHost((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("hi!");
        java.lang.String str12 = mongoProperties9.getHost();
        mongoProperties9.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties9.determinePort(environment15);
        mongoProperties9.authenticationDatabase = "";
        char[] charArray19 = mongoProperties9.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.String str23 = mongoProperties20.getUsername();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        mongoProperties20.fieldNamingStrategy = wildcardClass29;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.database = "";
        java.lang.String str34 = mongoProperties31.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.host = "";
        java.lang.String str38 = mongoProperties35.getHost();
        char[] charArray40 = new char[] { ' ' };
        mongoProperties35.setPassword(charArray40);
        char[] charArray45 = new char[] { '4', '4', '#' };
        mongoProperties35.password = charArray45;
        mongoProperties31.setPassword(charArray45);
        mongoProperties20.password = charArray45;
        mongoProperties9.setPassword(charArray45);
        mongoProperties0.setPassword(charArray45);
        java.lang.Integer int51 = mongoProperties0.port;
        java.lang.String str52 = mongoProperties0.username;
        int int53 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, 4, #]");
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 27017 + "'", int53 == 27017);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setAuthenticationDatabase("hi!");
        java.lang.String str38 = mongoProperties35.getHost();
        mongoProperties35.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder56 = mongoProperties35.builder(mongoClientOptions54);
        javax.net.SocketFactory socketFactory57 = mongoClientOptions54.getSocketFactory();
        boolean boolean58 = mongoClientOptions54.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder59 = mongoProperties0.builder(mongoClientOptions54);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketTimeout(5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.database;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getLocalThreshold();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30000 + "'", int18 == 30000);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions20.getReadConcern();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder12.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        int int40 = mongoClientOptions39.getHeartbeatConnectTimeout();
        int int41 = mongoClientOptions39.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = mongoClientOptions39.getCodecRegistry();
        int int43 = mongoClientOptions39.getServerSelectionTimeout();
        int int44 = mongoClientOptions39.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions39.getWriteConcern();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions39.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder12.dbEncoderFactory(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(codecRegistry42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30000 + "'", int43 == 30000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        java.lang.String str7 = mongoProperties0.database;
        mongoProperties0.setDatabase("");
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions33.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions33.getReadPreference();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder19.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        java.lang.String str50 = mongoClientOptions49.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions49.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder39.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder19.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.minHeartbeatFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        boolean boolean34 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean35 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions31);
        java.lang.String str36 = mongoClientOptions31.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        int int28 = mongoClientOptions22.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.database = "";
        java.lang.Class<?> wildcardClass32 = mongoProperties29.getFieldNamingStrategy();
        mongoProperties29.setDatabase("hi!");
        boolean boolean35 = mongoClientOptions22.equals((java.lang.Object) mongoProperties29);
        int int36 = mongoClientOptions22.getMaxWaitTime();
        java.lang.String str37 = mongoClientOptions22.getRequiredReplicaSetName();
        int int38 = mongoClientOptions22.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties0.createMongoClient(mongoClientOptions22, environment40);
        int int42 = mongoClientOptions22.getConnectTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions22.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30000 + "'", int38 == 30000);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(socketFactory43);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions27.getReadPreference();
        int int34 = mongoClientOptions27.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        java.lang.String str37 = mongoClientOptions36.getDescription();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions29.getCodecRegistry();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        boolean boolean33 = mongoClientOptions29.isSocketKeepAlive();
        int int34 = mongoClientOptions29.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        int int36 = mongoClientOptions29.getMaxWaitTime();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions29.getSocketFactory();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(socketFactory37);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("");
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int11 = mongoProperties0.getPort();
        java.lang.String str12 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList9 = mongoClientOptions7.getCommandListeners();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern58 = mongoClientOptions56.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder59 = builder46.readConcern(readConcern58);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder70.build();
        int int74 = mongoClientOptions73.getHeartbeatConnectTimeout();
        int int75 = mongoClientOptions73.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions73.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder46.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder31.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder26.dbDecoderFactory(dBDecoderFactory76);
        boolean boolean80 = mongoClientOptions7.equals((java.lang.Object) builder79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder79.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.connectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder85 = builder84.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(readConcern58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20000 + "'", int74 == 20000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setAuthenticationDatabase("hi!");
        java.lang.String str29 = mongoProperties26.getHost();
        mongoProperties26.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties26.builder(mongoClientOptions45);
        int int48 = mongoClientOptions45.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern49 = mongoClientOptions45.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder50 = builder21.readConcern(readConcern49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder18.readConcern(readConcern49);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxWaitTime(100);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.maxConnectionIdleTime((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder55.heartbeatSocketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(readConcern49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.port = 500;
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.setUri("");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder13.connectionsPerHost((int) '4');
        java.lang.Class<?> wildcardClass21 = builder20.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass21;
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions17.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions17.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions17.getCodecRegistry();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions17.getReadConcern();
        int int23 = mongoClientOptions17.getLocalThreshold();
        int int24 = mongoClientOptions17.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions17, environment25);
        java.lang.Class<?> wildcardClass27 = mongoClientOptions17.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMinConnectionsPerHost();
        boolean boolean23 = mongoClientOptions19.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions32);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions48.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry51 = mongoClientOptions48.getCodecRegistry();
        int int52 = mongoClientOptions48.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions48.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList54 = mongoClientOptions48.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory55 = mongoClientOptions48.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList56 = mongoClientOptions48.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory57 = mongoClientOptions48.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern58 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder59 = builder34.writeConcern(writeConcern58);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder73 = builder67.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("");
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder84.build();
        int int88 = mongoClientOptions87.getHeartbeatConnectTimeout();
        int int89 = mongoClientOptions87.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry90 = mongoClientOptions87.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry91 = mongoClientOptions87.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern92 = mongoClientOptions87.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory93 = mongoClientOptions87.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern94 = mongoClientOptions87.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder95 = builder73.writeConcern(writeConcern94);
        com.mongodb.MongoClientOptions.Builder builder96 = builder64.writeConcern(writeConcern94);
        com.mongodb.MongoClientOptions.Builder builder97 = builder59.writeConcern(writeConcern94);
        com.mongodb.MongoClientOptions.Builder builder98 = builder24.writeConcern(writeConcern94);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(codecRegistry51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(commandListenerList54);
        org.junit.Assert.assertNotNull(dBDecoderFactory55);
        org.junit.Assert.assertNotNull(commandListenerList56);
        org.junit.Assert.assertNotNull(dBDecoderFactory57);
        org.junit.Assert.assertNotNull(writeConcern58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 20000 + "'", int88 == 20000);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(codecRegistry90);
        org.junit.Assert.assertNotNull(codecRegistry91);
        org.junit.Assert.assertNotNull(writeConcern92);
        org.junit.Assert.assertNotNull(dBDecoderFactory93);
        org.junit.Assert.assertNotNull(writeConcern94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions13.getReadConcern();
        int int28 = mongoClientOptions13.getSocketTimeout();
        int int29 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        int int24 = mongoClientOptions20.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions33.getReadConcern();
        int int36 = mongoClientOptions33.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder25.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder12.readPreference(readPreference37);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList9 = mongoClientOptions7.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions7.getCodecRegistry();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList9);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.setPassword(charArray31);
        java.lang.String str36 = mongoProperties0.host;
        java.lang.String str37 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, #]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb://localhost/test" + "'", str37, "mongodb://localhost/test");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setHost("hi!");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.event.CommandListener commandListener23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder20.addCommandListener(commandListener23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder6 = builder2.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions19.getDbDecoderFactory();
        int int30 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.database = "";
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        java.lang.String str43 = mongoClientOptions42.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions42.getDbEncoderFactory();
        int int45 = mongoClientOptions42.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern46 = mongoClientOptions42.getReadConcern();
        boolean boolean47 = mongoClientOptions42.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties34.builder(mongoClientOptions42);
        com.mongodb.ReadConcern readConcern49 = mongoClientOptions42.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder50 = builder33.readConcern(readConcern49);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(readConcern46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(readConcern49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        boolean boolean25 = mongoClientOptions19.isSslEnabled();
        boolean boolean26 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.username = "hi!";
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.database = "test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("hi!");
        java.lang.String str21 = mongoProperties18.getHost();
        mongoProperties18.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties18.builder(mongoClientOptions37);
        int int40 = mongoClientOptions37.getMaxConnectionIdleTime();
        int int41 = mongoClientOptions37.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder17.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder10.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder10.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.socketTimeout(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder54 = builder52.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        java.lang.String str10 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        java.lang.String str18 = mongoProperties15.getHost();
        char[] charArray20 = new char[] { ' ' };
        mongoProperties15.setPassword(charArray20);
        char[] charArray25 = new char[] { '4', '4', '#' };
        mongoProperties15.password = charArray25;
        mongoProperties11.setPassword(charArray25);
        mongoProperties0.password = charArray25;
        mongoProperties0.setPort((java.lang.Integer) (-1));
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ ]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, 4, #]");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        int int21 = mongoClientOptions13.getConnectTimeout();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions13.getReadConcern();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions13.getWriteConcern();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.host = "";
        java.lang.String str28 = mongoProperties25.getHost();
        java.lang.String str29 = mongoProperties25.getHost();
        mongoProperties25.host = "hi!";
        java.lang.String str32 = mongoProperties25.gridFsDatabase;
        java.lang.Integer int33 = mongoProperties25.getPort();
        mongoProperties25.host = "mongodb://localhost/test";
        boolean boolean36 = mongoProperties25.hasCustomAddress();
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) mongoProperties25);
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClientOptions.Builder builder11 = mongoProperties6.builder(mongoClientOptions10);
        char[] charArray12 = mongoProperties6.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties6.createMongoClient(mongoClientOptions13, environment14);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.database = "";
        java.lang.String str19 = mongoProperties16.getDatabase();
        java.lang.String str20 = mongoProperties16.getUri();
        java.lang.Integer int21 = mongoProperties16.getPort();
        char[] charArray25 = new char[] { ' ', ' ', '4' };
        mongoProperties16.setPassword(charArray25);
        mongoProperties6.password = charArray25;
        mongoProperties0.password = charArray25;
        java.lang.String str29 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "  4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "  4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ,  , 4]");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setAuthenticationDatabase("hi!");
        java.lang.String str16 = mongoProperties13.getHost();
        mongoProperties13.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties13.builder(mongoClientOptions32);
        int int35 = mongoClientOptions32.getMaxConnectionIdleTime();
        int int36 = mongoClientOptions32.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions32.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder10.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.connectTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.host = "";
        mongoProperties23.username = "";
        mongoProperties23.clearPassword();
        java.lang.String str29 = mongoProperties23.getDatabase();
        java.lang.String str30 = mongoProperties23.getGridFsDatabase();
        mongoProperties23.database = "test";
        boolean boolean33 = mongoClientOptions19.equals((java.lang.Object) mongoProperties23);
        int int34 = mongoClientOptions19.getConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        java.lang.String str17 = mongoClientOptions16.getDescription();
        int int18 = mongoClientOptions16.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions16);
        int int20 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions7.getReadPreference();
        int int22 = mongoClientOptions7.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions13.getReadConcern();
        boolean boolean23 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.database = "";
        mongoProperties0.host = "hi!";
        java.lang.String str18 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.core.env.Environment environment7 = null;
        int int8 = mongoProperties0.determinePort(environment7);
        mongoProperties0.setUsername("test");
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("test");
        java.lang.String str13 = mongoProperties0.database;
        java.lang.Class<?> wildcardClass14 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions26.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.readConcern(readConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getLocalThreshold();
        int int36 = mongoClientOptions34.getSocketTimeout();
        int int37 = mongoClientOptions34.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectTimeout(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.host = "hi!";
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.getUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions19.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions19.getCodecRegistry();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions19, environment25);
        java.lang.String str27 = mongoProperties0.username;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setHost("test");
        java.lang.Class<?> wildcardClass15 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str16 = mongoProperties0.authenticationDatabase;
        mongoProperties0.database = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        java.lang.String str58 = mongoClientOptions57.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions57.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder47.dbEncoderFactory(dBEncoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder27.dbEncoderFactory(dBEncoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder16.dbEncoderFactory(dBEncoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder63 = builder7.dbEncoderFactory(dBEncoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("");
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder74.build();
        java.lang.Object obj78 = null;
        boolean boolean79 = mongoClientOptions77.equals(obj78);
        int int80 = mongoClientOptions77.getHeartbeatConnectTimeout();
        boolean boolean81 = mongoClientOptions77.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder82 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions77);
        int int83 = mongoClientOptions77.getSocketTimeout();
        int int84 = mongoClientOptions77.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern85 = mongoClientOptions77.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder86 = builder7.readConcern(readConcern85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder86.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder90 = builder88.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder92 = builder88.socketTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 20000 + "'", int80 == 20000);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 120000 + "'", int84 == 120000);
        org.junit.Assert.assertNotNull(readConcern85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.authenticationDatabase;
        java.lang.String str16 = mongoProperties0.getUsername();
        mongoProperties0.uri = "mongodb://localhost/test";
        mongoProperties0.port = 32;
        java.lang.String str21 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        java.lang.String str15 = mongoProperties12.getHost();
        char[] charArray17 = new char[] { ' ' };
        mongoProperties12.setPassword(charArray17);
        char[] charArray22 = new char[] { '4', '4', '#' };
        mongoProperties12.password = charArray22;
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.String str26 = mongoProperties12.getUri();
        java.lang.String str27 = mongoProperties12.getUsername();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions41.getCodecRegistry();
        boolean boolean44 = mongoClientOptions41.isSocketKeepAlive();
        boolean boolean45 = mongoClientOptions41.isSocketKeepAlive();
        int int46 = mongoClientOptions41.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties12.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties0.builder(mongoClientOptions41);
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.database = "";
        java.lang.String str53 = mongoProperties50.getDatabase();
        java.lang.String str54 = mongoProperties50.getUri();
        java.lang.Class<?> wildcardClass55 = mongoProperties50.fieldNamingStrategy;
        mongoProperties50.setPort((java.lang.Integer) 120000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties58 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties58.setAuthenticationDatabase("hi!");
        java.lang.String str61 = mongoProperties58.getHost();
        mongoProperties58.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment64 = null;
        int int65 = mongoProperties58.determinePort(environment64);
        mongoProperties58.authenticationDatabase = "";
        char[] charArray68 = mongoProperties58.password;
        com.mongodb.MongoClientOptions mongoClientOptions69 = null;
        org.springframework.core.env.Environment environment70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties58.createMongoClient(mongoClientOptions69, environment70);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties72 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties72.host = "";
        java.lang.String str75 = mongoProperties72.getHost();
        char[] charArray77 = new char[] { ' ' };
        mongoProperties72.setPassword(charArray77);
        char[] charArray82 = new char[] { '4', '4', '#' };
        mongoProperties72.password = charArray82;
        mongoProperties58.setPassword(charArray82);
        mongoProperties50.setPassword(charArray82);
        mongoProperties0.setPassword(charArray82);
        mongoProperties0.uri = "test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 27017 + "'", int65 == 27017);
        org.junit.Assert.assertNull(charArray68);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ ]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[4, 4, #]");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.String str14 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder4.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.minConnectionsPerHost(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setUsername("");
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.host = "";
        mongoProperties19.username = "";
        boolean boolean24 = mongoClientOptions13.equals((java.lang.Object) mongoProperties19);
        org.springframework.core.env.Environment environment25 = null;
        int int26 = mongoProperties19.determinePort(environment25);
        java.lang.String str27 = mongoProperties19.host;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 27017 + "'", int26 == 27017);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        java.lang.String str12 = mongoProperties0.username;
        char[] charArray13 = new char[] {};
        mongoProperties0.setPassword(charArray13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions28.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList32 = mongoClientOptions28.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions28.getDbDecoderFactory();
        int int34 = mongoClientOptions28.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.database = "";
        java.lang.Class<?> wildcardClass38 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.setDatabase("hi!");
        boolean boolean41 = mongoClientOptions28.equals((java.lang.Object) mongoProperties35);
        mongoProperties35.database = "mongodb://localhost/test";
        int int44 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.setAuthenticationDatabase("hi!");
        java.lang.String str50 = mongoProperties47.getHost();
        mongoProperties47.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment53 = null;
        int int54 = mongoProperties47.determinePort(environment53);
        mongoProperties47.authenticationDatabase = "";
        char[] charArray57 = mongoProperties47.password;
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties47.createMongoClient(mongoClientOptions58, environment59);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.host = "";
        java.lang.String str64 = mongoProperties61.getHost();
        char[] charArray66 = new char[] { ' ' };
        mongoProperties61.setPassword(charArray66);
        char[] charArray71 = new char[] { '4', '4', '#' };
        mongoProperties61.password = charArray71;
        mongoProperties47.setPassword(charArray71);
        mongoProperties35.password = charArray71;
        mongoProperties0.password = charArray71;
        mongoProperties0.clearPassword();
        char[] charArray77 = mongoProperties0.getPassword();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str80 = mongoProperties0.username;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(commandListenerList32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 27017 + "'", int54 == 27017);
        org.junit.Assert.assertNull(charArray57);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[\000, \000, \000]");
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str8 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions34.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry37 = mongoClientOptions34.getCodecRegistry();
        int int38 = mongoClientOptions34.getServerSelectionTimeout();
        boolean boolean39 = mongoClientOptions34.isAlwaysUseMBeans();
        boolean boolean40 = mongoClientOptions13.equals((java.lang.Object) boolean39);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int42 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(codecRegistry37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30000 + "'", int38 == 30000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 30000 + "'", int42 == 30000);
        org.junit.Assert.assertNotNull(writeConcern43);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean25 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        boolean boolean26 = mongoClientOptions19.isAlwaysUseMBeans();
        int int27 = mongoClientOptions19.getHeartbeatSocketTimeout();
        boolean boolean28 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.Object obj16 = null;
        boolean boolean17 = mongoClientOptions13.equals(obj16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        int int21 = mongoClientOptions13.getHeartbeatFrequency();
        int int22 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.event.CommandListener commandListener24 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder23.addCommandListener(commandListener24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setAuthenticationDatabase("hi!");
        java.lang.String str22 = mongoProperties19.getHost();
        mongoProperties19.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties19.builder(mongoClientOptions38);
        javax.net.SocketFactory socketFactory41 = mongoClientOptions38.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder18.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder10.socketFactory(socketFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.host = "";
        char[] charArray13 = new char[] { '4' };
        mongoProperties9.setPassword(charArray13);
        mongoProperties0.password = charArray13;
        mongoProperties0.setAuthenticationDatabase("");
        boolean boolean18 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str14 = mongoProperties0.getDatabase();
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.database = "";
        java.lang.String str7 = mongoProperties4.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties4.fieldNamingStrategy;
        java.lang.String str9 = mongoProperties4.getHost();
        java.lang.String str10 = mongoProperties4.username;
        java.lang.String str11 = mongoProperties4.gridFsDatabase;
        java.lang.String str12 = mongoProperties4.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.host = "";
        mongoProperties13.username = "";
        mongoProperties13.clearPassword();
        java.lang.String str19 = mongoProperties13.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setAuthenticationDatabase("hi!");
        java.lang.String str23 = mongoProperties20.getHost();
        mongoProperties20.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        int int40 = mongoClientOptions39.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder41 = mongoProperties20.builder(mongoClientOptions39);
        int int42 = mongoClientOptions39.getMaxConnectionIdleTime();
        int int43 = mongoClientOptions39.getConnectionsPerHost();
        int int44 = mongoClientOptions39.getSocketTimeout();
        int int45 = mongoClientOptions39.getMinHeartbeatFrequency();
        boolean boolean46 = mongoClientOptions39.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties13.builder(mongoClientOptions39);
        int int48 = mongoClientOptions39.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions39);
        com.mongodb.MongoClientOptions.Builder builder50 = mongoProperties4.builder(mongoClientOptions39);
        com.mongodb.MongoClientOptions.Builder builder51 = mongoProperties0.builder(mongoClientOptions39);
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str54 = mongoProperties0.uri;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 500 + "'", int45 == 500);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10000 + "'", int48 == 10000);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.host;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.uri;
        boolean boolean10 = mongoProperties0.hasCustomCredentials();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.host = "hi!";
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.host = "mongodb://localhost/test";
        java.lang.String str11 = mongoProperties0.getDatabase();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.host = "";
        java.lang.String str17 = mongoProperties14.getHost();
        char[] charArray19 = new char[] { ' ' };
        mongoProperties14.setPassword(charArray19);
        char[] charArray24 = new char[] { '4', '4', '#' };
        mongoProperties14.password = charArray24;
        java.lang.String str26 = mongoProperties14.username;
        char[] charArray27 = new char[] {};
        mongoProperties14.setPassword(charArray27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        int int43 = mongoClientOptions42.getHeartbeatConnectTimeout();
        int int44 = mongoClientOptions42.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions42.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList46 = mongoClientOptions42.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory47 = mongoClientOptions42.getDbDecoderFactory();
        int int48 = mongoClientOptions42.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties49.database = "";
        java.lang.Class<?> wildcardClass52 = mongoProperties49.getFieldNamingStrategy();
        mongoProperties49.setDatabase("hi!");
        boolean boolean55 = mongoClientOptions42.equals((java.lang.Object) mongoProperties49);
        mongoProperties49.database = "mongodb://localhost/test";
        int int58 = mongoProperties49.getDEFAULT_PORT();
        mongoProperties49.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.setAuthenticationDatabase("hi!");
        java.lang.String str64 = mongoProperties61.getHost();
        mongoProperties61.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment67 = null;
        int int68 = mongoProperties61.determinePort(environment67);
        mongoProperties61.authenticationDatabase = "";
        char[] charArray71 = mongoProperties61.password;
        com.mongodb.MongoClientOptions mongoClientOptions72 = null;
        org.springframework.core.env.Environment environment73 = null;
        com.mongodb.MongoClient mongoClient74 = mongoProperties61.createMongoClient(mongoClientOptions72, environment73);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties75 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties75.host = "";
        java.lang.String str78 = mongoProperties75.getHost();
        char[] charArray80 = new char[] { ' ' };
        mongoProperties75.setPassword(charArray80);
        char[] charArray85 = new char[] { '4', '4', '#' };
        mongoProperties75.password = charArray85;
        mongoProperties61.setPassword(charArray85);
        mongoProperties49.password = charArray85;
        mongoProperties14.password = charArray85;
        mongoProperties14.clearPassword();
        char[] charArray91 = mongoProperties14.getPassword();
        mongoProperties0.setPassword(charArray91);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ ]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, 4, #]");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(commandListenerList46);
        org.junit.Assert.assertNotNull(dBDecoderFactory47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 27017 + "'", int58 == 27017);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 27017 + "'", int68 == 27017);
        org.junit.Assert.assertNull(charArray71);
        org.junit.Assert.assertNotNull(mongoClient74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[ ]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[\000, \000, \000]");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions13.getCodecRegistry();
        int int21 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean25 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int26 = mongoClientOptions19.getSocketTimeout();
        int int27 = mongoClientOptions19.getConnectionsPerHost();
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions19.getSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties30.database = "";
        java.lang.String str33 = mongoProperties30.getDatabase();
        java.lang.String str34 = mongoProperties30.getUri();
        java.lang.Integer int35 = mongoProperties30.getPort();
        java.lang.String str36 = mongoProperties30.uri;
        mongoProperties30.host = "";
        mongoProperties30.username = "hi!";
        org.springframework.core.env.Environment environment41 = null;
        int int42 = mongoProperties30.determinePort(environment41);
        mongoProperties30.setDatabase("");
        mongoProperties30.setUsername("test");
        java.lang.String str47 = mongoProperties30.getDatabase();
        boolean boolean48 = mongoClientOptions19.equals((java.lang.Object) mongoProperties30);
        int int49 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 27017 + "'", int42 == 27017);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.host;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 10000);
        java.lang.String str13 = mongoProperties0.gridFsDatabase;
        java.lang.String str14 = mongoProperties0.host;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        java.lang.String str53 = mongoClientOptions52.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions52.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder43.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder36.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder23.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder58 = builder16.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder60 = builder16.connectionsPerHost(30000);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxConnectionIdleTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        char[] charArray5 = null;
        mongoProperties0.setPassword(charArray5);
        java.lang.String str7 = mongoProperties0.host;
        java.lang.String str8 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.uri = "test";
        java.lang.String str37 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass38 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb://localhost/test" + "'", str37, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        int int20 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str18 = mongoProperties15.getHost();
        mongoProperties15.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties15.builder(mongoClientOptions34);
        int int37 = mongoClientOptions34.getMaxConnectionIdleTime();
        int int38 = mongoClientOptions34.getConnectionsPerHost();
        int int39 = mongoClientOptions34.getSocketTimeout();
        int int40 = mongoClientOptions34.getMinHeartbeatFrequency();
        boolean boolean41 = mongoClientOptions34.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions34);
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions34.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder6.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.minConnectionsPerHost((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 500 + "'", int40 == 500);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions29.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder33 = builder11.codecRegistry(codecRegistry32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder4.codecRegistry(codecRegistry32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        int int54 = mongoClientOptions53.getHeartbeatConnectTimeout();
        int int55 = mongoClientOptions53.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference56 = mongoClientOptions53.getReadPreference();
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions53.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder58 = builder39.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder36.readPreference(readPreference57);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder61 = builder36.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(readPreference56);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        mongoProperties0.port = 500;
        mongoProperties0.database = "";
        mongoProperties0.host = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getLocalThreshold();
        int int15 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.alwaysUseMBeans(false);
        com.mongodb.event.CommandListener commandListener19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.addCommandListener(commandListener19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.core.env.Environment environment7 = null;
        int int8 = mongoProperties0.determinePort(environment7);
        mongoProperties0.setUri("");
        java.lang.String str11 = mongoProperties0.uri;
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.heartbeatConnectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        mongoProperties0.gridFsDatabase = "test";
        java.lang.String str12 = mongoProperties0.host;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getSocketTimeout();
        int int31 = mongoClientOptions25.getMinHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions25.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        int int34 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions25);
        mongoProperties0.username = "hi!";
        java.lang.Class<?> wildcardClass38 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        mongoProperties20.database = "mongodb://localhost/test";
        int int29 = mongoProperties20.getDEFAULT_PORT();
        mongoProperties20.setHost("hi!");
        mongoProperties20.gridFsDatabase = "hi!";
        java.lang.String str34 = mongoProperties20.getMongoClientDatabase();
        mongoProperties20.port = 30000;
        org.springframework.core.env.Environment environment37 = null;
        int int38 = mongoProperties20.determinePort(environment37);
        mongoProperties20.setGridFsDatabase("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 27017 + "'", int29 == 27017);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30000 + "'", int38 == 30000);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions26.getReadConcern();
        int int29 = mongoClientOptions26.getMaxWaitTime();
        int int30 = mongoClientOptions26.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder18.socketFactory(socketFactory31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder18.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder18.minHeartbeatFrequency((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties37.setAuthenticationDatabase("hi!");
        java.lang.String str40 = mongoProperties37.getHost();
        mongoProperties37.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder58 = mongoProperties37.builder(mongoClientOptions56);
        int int59 = mongoClientOptions56.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern60 = mongoClientOptions56.getReadConcern();
        boolean boolean61 = mongoClientOptions56.isSslInvalidHostNameAllowed();
        boolean boolean62 = mongoClientOptions56.isSslEnabled();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions56.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder18.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder6.socketFactory(socketFactory63);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20000 + "'", int57 == 20000);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(readConcern60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.database;
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4]");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.localThreshold((int) (byte) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties11.getHost();
        mongoProperties11.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        int int31 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions30);
        int int33 = mongoClientOptions30.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions30.getConnectionsPerHost();
        int int35 = mongoClientOptions30.getSocketTimeout();
        int int36 = mongoClientOptions30.getMaxConnectionLifeTime();
        int int37 = mongoClientOptions30.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = mongoClientOptions30.getCodecRegistry();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions30.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder10.readConcern(readConcern39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.connectionsPerHost((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(codecRegistry38);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions14);
        int int16 = mongoClientOptions14.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("hi!");
        java.lang.String str11 = mongoProperties8.getHost();
        java.lang.String str12 = mongoProperties8.getUri();
        mongoProperties8.gridFsDatabase = "";
        mongoProperties8.setUri("mongodb://localhost/test");
        java.lang.String str17 = mongoProperties8.authenticationDatabase;
        mongoProperties8.gridFsDatabase = "hi!";
        boolean boolean20 = mongoProperties8.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions34.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions34.getReadPreference();
        java.lang.String str38 = mongoClientOptions34.getRequiredReplicaSetName();
        boolean boolean39 = mongoClientOptions34.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties8.builder(mongoClientOptions34);
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties0.createMongoClient(mongoClientOptions34, environment41);
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions34.getReadPreference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(readPreference43);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        boolean boolean27 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.setUri("hi!");
        java.lang.Integer int33 = mongoProperties0.getPort();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        mongoProperties0.port = 10;
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions9, environment10);
        int int12 = mongoClientOptions9.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (short) 100);
        boolean boolean25 = mongoClientOptions9.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions9);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getLocalThreshold();
        int int42 = mongoClientOptions40.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder43 = com.mongodb.MongoClientOptions.builder(mongoClientOptions40);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        int int54 = mongoClientOptions53.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions53);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatConnectTimeout();
        int int71 = mongoClientOptions69.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry72 = mongoClientOptions69.getCodecRegistry();
        int int73 = mongoClientOptions69.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions69.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList75 = mongoClientOptions69.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions69.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList77 = mongoClientOptions69.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory78 = mongoClientOptions69.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern79 = mongoClientOptions69.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder80 = builder55.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder45.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder26.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.description("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(codecRegistry72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 30000 + "'", int73 == 30000);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertNotNull(commandListenerList75);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(commandListenerList77);
        org.junit.Assert.assertNotNull(dBDecoderFactory78);
        org.junit.Assert.assertNotNull(writeConcern79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.port = 5;
        int int24 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.description("");
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder71.build();
        int int75 = mongoClientOptions74.getHeartbeatConnectTimeout();
        int int76 = mongoClientOptions74.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry77 = mongoClientOptions74.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder78 = builder56.codecRegistry(codecRegistry77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder51.codecRegistry(codecRegistry77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder40.codecRegistry(codecRegistry77);
        com.mongodb.MongoClientOptions.Builder builder81 = builder27.codecRegistry(codecRegistry77);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.sslInvalidHostNameAllowed(false);
        java.lang.Class<?> wildcardClass86 = builder83.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass86;
        java.lang.String str88 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20000 + "'", int75 == 20000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(codecRegistry77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "mongodb://localhost/test" + "'", str88, "mongodb://localhost/test");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("test");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionLifeTime((int) (short) 100);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions28.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.String str20 = mongoClientOptions19.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder4.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder36.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder23.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder54 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder57 = builder23.heartbeatSocketTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder23.localThreshold((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder4.heartbeatConnectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions29.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList33 = mongoClientOptions29.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry34 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder35 = builder15.codecRegistry(codecRegistry34);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder15.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions36.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(commandListenerList33);
        org.junit.Assert.assertNotNull(codecRegistry34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(commandListenerList37);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.host = "hi!";
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.clearPassword();
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("hi!");
        java.lang.String str12 = mongoProperties9.getHost();
        mongoProperties9.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder30 = mongoProperties9.builder(mongoClientOptions28);
        int int31 = mongoClientOptions28.getMaxConnectionIdleTime();
        int int32 = mongoClientOptions28.getConnectionsPerHost();
        int int33 = mongoClientOptions28.getSocketTimeout();
        int int34 = mongoClientOptions28.getMaxConnectionLifeTime();
        int int35 = mongoClientOptions28.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry36 = mongoClientOptions28.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties0.builder(mongoClientOptions28);
        boolean boolean38 = mongoClientOptions28.isSocketKeepAlive();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        boolean boolean19 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        java.lang.String str13 = mongoProperties0.uri;
        char[] charArray14 = mongoProperties0.password;
        java.lang.String str15 = mongoProperties0.database;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        mongoProperties0.setUsername("test");
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.database;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions29.getReadConcern();
        java.lang.String str31 = mongoClientOptions29.getRequiredReplicaSetName();
        int int32 = mongoClientOptions29.getConnectTimeout();
        boolean boolean33 = mongoClientOptions29.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory52 = mongoClientOptions49.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder35.dbDecoderFactory(dBDecoderFactory52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.clearPassword();
        char[] charArray8 = mongoProperties6.getPassword();
        mongoProperties6.authenticationDatabase = "";
        java.lang.String str11 = mongoProperties6.authenticationDatabase;
        mongoProperties6.setAuthenticationDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.database = "";
        java.lang.String str17 = mongoProperties14.getUsername();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        mongoProperties14.fieldNamingStrategy = wildcardClass23;
        mongoProperties14.setPort((java.lang.Integer) 20000);
        java.lang.String str27 = mongoProperties14.database;
        java.lang.Class<?> wildcardClass28 = mongoProperties14.getFieldNamingStrategy();
        mongoProperties6.fieldNamingStrategy = wildcardClass28;
        mongoProperties0.fieldNamingStrategy = wildcardClass28;
        mongoProperties0.username = "hi!";
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.port = 500;
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.host = "hi!";
        char[] charArray10 = mongoProperties0.password;
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        java.lang.String str33 = mongoProperties0.database;
        boolean boolean34 = mongoProperties0.hasCustomAddress();
        java.lang.String str35 = mongoProperties0.host;
        java.lang.Integer int36 = mongoProperties0.getPort();
        java.lang.String str37 = mongoProperties0.getUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb://localhost/test" + "'", str37, "mongodb://localhost/test");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        mongoProperties0.clearPassword();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        java.lang.String str25 = mongoClientOptions19.getDescription();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions19.getReadPreference();
        boolean boolean27 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int28 = mongoClientOptions19.getHeartbeatConnectTimeout();
        boolean boolean29 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionLifeTime((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        mongoProperties11.username = "";
        mongoProperties11.clearPassword();
        java.lang.String str17 = mongoProperties11.getGridFsDatabase();
        java.lang.String str18 = mongoProperties11.getDatabase();
        mongoProperties11.setHost("");
        mongoProperties11.setPort((java.lang.Integer) (-1));
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.host = "";
        mongoProperties23.username = "";
        mongoProperties23.clearPassword();
        java.lang.String str29 = mongoProperties23.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties30.setAuthenticationDatabase("hi!");
        java.lang.String str33 = mongoProperties30.getHost();
        mongoProperties30.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder51 = mongoProperties30.builder(mongoClientOptions49);
        int int52 = mongoClientOptions49.getMaxConnectionIdleTime();
        int int53 = mongoClientOptions49.getConnectionsPerHost();
        int int54 = mongoClientOptions49.getSocketTimeout();
        int int55 = mongoClientOptions49.getMinHeartbeatFrequency();
        boolean boolean56 = mongoClientOptions49.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder57 = mongoProperties23.builder(mongoClientOptions49);
        int int58 = mongoClientOptions49.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList59 = mongoClientOptions49.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder60 = mongoProperties11.builder(mongoClientOptions49);
        com.mongodb.ReadConcern readConcern61 = mongoClientOptions49.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder62 = builder6.readConcern(readConcern61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 500 + "'", int55 == 500);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10000 + "'", int58 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(readConcern61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxWaitTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.host;
        java.lang.String str14 = mongoProperties0.getGridFsDatabase();
        char[] charArray15 = mongoProperties0.password;
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.Integer int11 = mongoProperties0.getPort();
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setAuthenticationDatabase("hi!");
        java.lang.String str20 = mongoProperties17.getHost();
        mongoProperties17.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties17.builder(mongoClientOptions36);
        int int39 = mongoClientOptions36.getMinConnectionsPerHost();
        boolean boolean40 = mongoClientOptions36.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.dbEncoderFactory(dBEncoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder16.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int9 = mongoProperties0.getPort();
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        mongoProperties0.uri = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        boolean boolean1 = mongoProperties0.hasCustomCredentials();
        java.lang.String str2 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxWaitTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions9, environment10);
        int int12 = mongoClientOptions9.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (short) 100);
        boolean boolean25 = mongoClientOptions9.equals((java.lang.Object) builder20);
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions9.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getHeartbeatConnectTimeout();
        int int54 = mongoClientOptions52.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry55 = mongoClientOptions52.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder56 = builder34.codecRegistry(codecRegistry55);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder59.build();
        java.lang.String str63 = mongoClientOptions62.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions62.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder34.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder29.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean69 = mongoClientOptions9.equals((java.lang.Object) builder68);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(codecRegistry55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions20.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions48.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions48.getReadPreference();
        com.mongodb.ReadPreference readPreference52 = mongoClientOptions48.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder53 = builder34.readPreference(readPreference52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean56 = mongoClientOptions20.equals((java.lang.Object) builder53);
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder58 = builder2.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.minHeartbeatFrequency(5);
        java.lang.Class<?> wildcardClass61 = builder58.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(readPreference52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder4.sslEnabled(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.host = "";
        java.lang.String str20 = mongoProperties17.getHost();
        char[] charArray22 = new char[] { ' ' };
        mongoProperties17.setPassword(charArray22);
        char[] charArray27 = new char[] { '4', '4', '#' };
        mongoProperties17.password = charArray27;
        mongoProperties17.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        int int45 = mongoClientOptions44.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties17.createMongoClient(mongoClientOptions44, environment46);
        boolean boolean48 = mongoClientOptions44.isSslEnabled();
        boolean boolean49 = mongoClientOptions44.isAlwaysUseMBeans();
        int int50 = mongoClientOptions44.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions44.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder4.socketFactory(socketFactory51);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions26);
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions50.getCodecRegistry();
        int int54 = mongoClientOptions50.getServerSelectionTimeout();
        int int55 = mongoClientOptions50.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern56 = mongoClientOptions50.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder6.writeConcern(writeConcern56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getMaxConnectionLifeTime();
        int int64 = mongoClientOptions62.getConnectionsPerHost();
        int int65 = mongoClientOptions62.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 30000 + "'", int54 == 30000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(writeConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 500 + "'", int65 == 500);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        java.lang.String str22 = mongoClientOptions21.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder11.dbEncoderFactory(dBEncoderFactory23);
        com.mongodb.MongoClientOptions.Builder builder26 = builder11.maxConnectionIdleTime(15);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setAuthenticationDatabase("hi!");
        java.lang.String str30 = mongoProperties27.getHost();
        mongoProperties27.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties27.builder(mongoClientOptions46);
        int int49 = mongoClientOptions46.getMaxConnectionIdleTime();
        int int50 = mongoClientOptions46.getConnectionsPerHost();
        int int51 = mongoClientOptions46.getSocketTimeout();
        int int52 = mongoClientOptions46.getMinHeartbeatFrequency();
        boolean boolean53 = mongoClientOptions46.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions46);
        com.mongodb.WriteConcern writeConcern55 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder56 = builder11.writeConcern(writeConcern55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.description("");
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("");
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder84.build();
        int int88 = mongoClientOptions87.getHeartbeatConnectTimeout();
        int int89 = mongoClientOptions87.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry90 = mongoClientOptions87.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry91 = mongoClientOptions87.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern92 = mongoClientOptions87.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder93 = builder73.writeConcern(writeConcern92);
        com.mongodb.MongoClientOptions.Builder builder94 = builder58.writeConcern(writeConcern92);
        com.mongodb.MongoClientOptions.Builder builder95 = builder10.writeConcern(writeConcern92);
        com.mongodb.MongoClientOptions.Builder builder97 = builder10.connectionsPerHost(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 500 + "'", int52 == 500);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(writeConcern55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 20000 + "'", int88 == 20000);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(codecRegistry90);
        org.junit.Assert.assertNotNull(codecRegistry91);
        org.junit.Assert.assertNotNull(writeConcern92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        int int27 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions19.getReadConcern();
        boolean boolean29 = mongoClientOptions19.isSslEnabled();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str8 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getConnectionsPerHost();
        int int21 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.Object obj14 = null;
        boolean boolean15 = mongoClientOptions13.equals(obj14);
        int int16 = mongoClientOptions13.getHeartbeatConnectTimeout();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        java.lang.String str15 = mongoProperties0.gridFsDatabase;
        boolean boolean16 = mongoProperties0.hasCustomAddress();
        mongoProperties0.port = 100;
        java.lang.String str19 = mongoProperties0.username;
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str9 = mongoProperties0.database;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.uri = "";
        int int7 = mongoProperties0.getDEFAULT_PORT();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions21.getCodecRegistry();
        int int25 = mongoClientOptions21.getServerSelectionTimeout();
        boolean boolean26 = mongoClientOptions21.isAlwaysUseMBeans();
        int int27 = mongoClientOptions21.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = mongoProperties0.builder(mongoClientOptions21);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold(5);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 30000 + "'", int25 == 30000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        java.lang.String str8 = mongoProperties0.host;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.database = "mongodb://localhost/test";
        java.lang.Class<?> wildcardClass15 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getSocketTimeout();
        int int31 = mongoClientOptions25.getMinHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions25.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions25.getWriteConcern();
        boolean boolean35 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        int int36 = mongoClientOptions25.getMaxWaitTime();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions25, environment37);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(mongoClient38);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions21);
        java.lang.String str26 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str27 = mongoProperties0.username;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.getHost();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[\000]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.host = "";
        java.lang.String str23 = mongoProperties20.getHost();
        char[] charArray25 = new char[] { ' ' };
        mongoProperties20.setPassword(charArray25);
        char[] charArray30 = new char[] { '4', '4', '#' };
        mongoProperties20.password = charArray30;
        mongoProperties20.setAuthenticationDatabase("");
        java.lang.String str34 = mongoProperties20.getUri();
        java.lang.String str35 = mongoProperties20.getUsername();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry51 = mongoClientOptions49.getCodecRegistry();
        boolean boolean52 = mongoClientOptions49.isSocketKeepAlive();
        boolean boolean53 = mongoClientOptions49.isSocketKeepAlive();
        int int54 = mongoClientOptions49.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder55 = mongoProperties20.builder(mongoClientOptions49);
        com.mongodb.ReadConcern readConcern56 = mongoClientOptions49.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder19.readConcern(readConcern56);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder19.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(readConcern56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties16.getHost();
        mongoProperties16.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties16.builder(mongoClientOptions35);
        int int38 = mongoClientOptions35.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions35.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder11.readConcern(readConcern39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder8.readConcern(readConcern39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder8.socketTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.host;
        mongoProperties0.database = "";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        char[] charArray10 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getDatabase();
        java.lang.Class<?> wildcardClass15 = mongoProperties11.fieldNamingStrategy;
        java.lang.Integer int16 = mongoProperties11.getPort();
        java.lang.String str17 = mongoProperties11.getDatabase();
        mongoProperties11.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties11.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.host = "";
        mongoProperties22.setUsername("hi!");
        mongoProperties22.port = (-1);
        char[] charArray29 = mongoProperties22.getPassword();
        java.lang.String str30 = mongoProperties22.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.host = "";
        char[] charArray35 = new char[] { '4' };
        mongoProperties31.setPassword(charArray35);
        mongoProperties22.password = charArray35;
        mongoProperties11.password = charArray35;
        mongoProperties0.password = charArray35;
        boolean boolean40 = mongoProperties0.hasCustomAddress();
        java.lang.String str41 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getLocalThreshold();
        int int15 = mongoClientOptions13.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder6.build();
        int int12 = mongoClientOptions11.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions28.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder49.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.description("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder60 = builder52.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.host = "";
        java.lang.String str64 = mongoProperties61.getHost();
        char[] charArray66 = new char[] { ' ' };
        mongoProperties61.setPassword(charArray66);
        char[] charArray71 = new char[] { '4', '4', '#' };
        mongoProperties61.password = charArray71;
        mongoProperties61.setAuthenticationDatabase("");
        java.lang.String str75 = mongoProperties61.getUri();
        java.lang.String str76 = mongoProperties61.getUsername();
        com.mongodb.MongoClientOptions.Builder builder77 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.description("");
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder89 = builder87.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions90 = builder87.build();
        int int91 = mongoClientOptions90.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry92 = mongoClientOptions90.getCodecRegistry();
        boolean boolean93 = mongoClientOptions90.isSocketKeepAlive();
        boolean boolean94 = mongoClientOptions90.isSocketKeepAlive();
        int int95 = mongoClientOptions90.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder96 = mongoProperties61.builder(mongoClientOptions90);
        com.mongodb.ReadConcern readConcern97 = mongoClientOptions90.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder98 = builder60.readConcern(readConcern97);
        com.mongodb.MongoClientOptions.Builder builder99 = builder36.readConcern(readConcern97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mongodb://localhost/test" + "'", str75, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(mongoClientOptions90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 20000 + "'", int91 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(readConcern97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        org.springframework.core.env.Environment environment5 = null;
        int int6 = mongoProperties0.determinePort(environment5);
        java.lang.String str7 = mongoProperties0.getDatabase();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        char[] charArray21 = new char[] { '4', '4', '#' };
        mongoProperties11.password = charArray21;
        mongoProperties7.setPassword(charArray21);
        mongoProperties0.password = charArray21;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.database = "";
        java.lang.String str28 = mongoProperties25.getUsername();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass34 = builder33.getClass();
        mongoProperties25.fieldNamingStrategy = wildcardClass34;
        mongoProperties0.fieldNamingStrategy = wildcardClass34;
        java.lang.Class<?> wildcardClass37 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.clearPassword();
        char[] charArray40 = mongoProperties38.getPassword();
        mongoProperties38.port = 0;
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions56.getReadPreference();
        int int59 = mongoClientOptions56.getMinConnectionsPerHost();
        int int60 = mongoClientOptions56.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder61 = mongoProperties38.builder(mongoClientOptions56);
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties0.createMongoClient(mongoClientOptions56, environment62);
        int int64 = mongoClientOptions56.getSocketTimeout();
        java.lang.String str65 = mongoClientOptions56.getDescription();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNull(charArray40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setAuthenticationDatabase("hi!");
        java.lang.String str38 = mongoProperties35.getHost();
        mongoProperties35.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder56 = mongoProperties35.builder(mongoClientOptions54);
        javax.net.SocketFactory socketFactory57 = mongoClientOptions54.getSocketFactory();
        boolean boolean58 = mongoClientOptions54.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder59 = mongoProperties0.builder(mongoClientOptions54);
        java.lang.String str60 = mongoProperties0.getGridFsDatabase();
        java.lang.String str61 = mongoProperties0.database;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.uri = "hi!";
        java.lang.String str9 = mongoProperties0.uri;
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.host = "";
        mongoProperties6.setUsername("hi!");
        char[] charArray11 = mongoProperties6.getPassword();
        java.lang.String str12 = mongoProperties6.uri;
        java.lang.String str13 = mongoProperties6.uri;
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass19 = builder18.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass19;
        java.lang.String str21 = mongoProperties6.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.Class<?> wildcardClass25 = mongoProperties22.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass31 = builder30.getClass();
        mongoProperties22.fieldNamingStrategy = wildcardClass31;
        mongoProperties6.fieldNamingStrategy = wildcardClass31;
        mongoProperties0.fieldNamingStrategy = wildcardClass31;
        char[] charArray35 = mongoProperties0.password;
        java.lang.String str36 = mongoProperties0.host;
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions50.getCodecRegistry();
        int int54 = mongoClientOptions50.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions50.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList56 = mongoClientOptions50.getCommandListeners();
        java.lang.String str57 = mongoClientOptions50.getDescription();
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.description("");
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getHeartbeatConnectTimeout();
        int int73 = mongoClientOptions71.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry74 = mongoClientOptions71.getCodecRegistry();
        int int75 = mongoClientOptions71.getServerSelectionTimeout();
        boolean boolean76 = mongoClientOptions71.isAlwaysUseMBeans();
        boolean boolean77 = mongoClientOptions50.equals((java.lang.Object) boolean76);
        com.mongodb.MongoClientOptions.Builder builder78 = com.mongodb.MongoClientOptions.builder(mongoClientOptions50);
        int int79 = mongoClientOptions50.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment80 = null;
        com.mongodb.MongoClient mongoClient81 = mongoProperties0.createMongoClient(mongoClientOptions50, environment80);
        java.lang.String str82 = mongoClientOptions50.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 30000 + "'", int54 == 30000);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertNotNull(commandListenerList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(codecRegistry74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 30000 + "'", int75 == 30000);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 30000 + "'", int79 == 30000);
        org.junit.Assert.assertNotNull(mongoClient81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.database;
        mongoProperties0.port = 20000;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties11.fieldNamingStrategy = wildcardClass20;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties11.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        java.lang.String str41 = mongoProperties0.username;
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000]");
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int20 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        java.lang.Object obj30 = null;
        boolean boolean31 = mongoClientOptions29.equals(obj30);
        int int32 = mongoClientOptions29.getHeartbeatConnectTimeout();
        boolean boolean33 = mongoClientOptions29.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions29);
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder15.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder4.writeConcern(writeConcern35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.host = "hi!";
        mongoProperties0.database = "";
        mongoProperties0.gridFsDatabase = "hi!";
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.Integer int14 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        boolean boolean25 = mongoClientOptions19.isSslEnabled();
        int int26 = mongoClientOptions19.getLocalThreshold();
        int int27 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        boolean boolean34 = mongoClientOptions31.isCursorFinalizerEnabled();
        boolean boolean35 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions31);
        int int36 = mongoClientOptions13.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int38 = mongoClientOptions13.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder36.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatConnectTimeout();
        int int65 = mongoClientOptions63.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory66 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder67 = builder36.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder68 = builder21.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder69 = builder12.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.event.CommandListener commandListener70 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder71 = builder12.addCommandListener(commandListener70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions13.getCodecRegistry();
        int int22 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        int int24 = mongoClientOptions20.getServerSelectionTimeout();
        int int25 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        java.lang.String str21 = mongoClientOptions13.getRequiredReplicaSetName();
        int int22 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getUsername();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str18 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(30000);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        java.lang.String str19 = mongoClientOptions18.getDescription();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions18.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder24 = builder12.codecRegistry(codecRegistry23);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions19.getDbDecoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.database;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.host = "";
        java.lang.String str11 = mongoProperties8.getHost();
        java.lang.String str12 = mongoProperties8.getHost();
        mongoProperties8.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties8.setPort((java.lang.Integer) 5);
        mongoProperties8.clearPassword();
        mongoProperties8.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.host = "";
        java.lang.String str23 = mongoProperties20.getHost();
        char[] charArray25 = new char[] { ' ' };
        mongoProperties20.setPassword(charArray25);
        char[] charArray30 = new char[] { '4', '4', '#' };
        mongoProperties20.password = charArray30;
        mongoProperties20.setAuthenticationDatabase("");
        java.lang.String str34 = mongoProperties20.getUri();
        java.lang.String str35 = mongoProperties20.getUsername();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry51 = mongoClientOptions49.getCodecRegistry();
        boolean boolean52 = mongoClientOptions49.isSocketKeepAlive();
        boolean boolean53 = mongoClientOptions49.isSocketKeepAlive();
        int int54 = mongoClientOptions49.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder55 = mongoProperties20.builder(mongoClientOptions49);
        com.mongodb.MongoClientOptions.Builder builder56 = mongoProperties8.builder(mongoClientOptions49);
        mongoProperties8.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder63.build();
        int int67 = mongoClientOptions66.getHeartbeatConnectTimeout();
        boolean boolean68 = mongoClientOptions66.isSslEnabled();
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties8.createMongoClient(mongoClientOptions66, environment69);
        com.mongodb.MongoClientOptions.Builder builder71 = mongoProperties0.builder(mongoClientOptions66);
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions66.getDbEncoderFactory();
        int int73 = mongoClientOptions66.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20000 + "'", int67 == 20000);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 20000 + "'", int73 == 20000);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions19, environment26);
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        java.lang.String str29 = mongoClientOptions19.getDescription();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getServerSelectionTimeout();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions19.getCommandListeners();
        int int26 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 30000 + "'", int23 == 30000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions5.getDbEncoderFactory();
        int int7 = mongoClientOptions5.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.description("mongodb://localhost/test");
        boolean boolean31 = mongoClientOptions13.equals((java.lang.Object) builder26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        int int11 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        int int13 = mongoClientOptions7.getConnectTimeout();
        int int14 = mongoClientOptions7.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 30000 + "'", int14 == 30000);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.serverSelectionTimeout((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder12.minConnectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minConnectionsPerHost must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        mongoProperties15.setUsername("hi!");
        char[] charArray20 = mongoProperties15.getPassword();
        java.lang.String str21 = mongoProperties15.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties15.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000]");
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder31.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder26.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder15.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder0.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder31.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder26.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder15.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder2.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.connectTimeout(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.host;
        mongoProperties0.setUri("test");
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str15 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.host = "";
        mongoProperties16.username = "";
        mongoProperties16.clearPassword();
        java.lang.String str22 = mongoProperties16.getGridFsDatabase();
        java.lang.String str23 = mongoProperties16.getDatabase();
        mongoProperties16.setUri("");
        java.lang.Integer int26 = mongoProperties16.port;
        java.lang.String str27 = mongoProperties16.host;
        mongoProperties16.setHost("");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        int int44 = mongoClientOptions43.getHeartbeatConnectTimeout();
        int int45 = mongoClientOptions43.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions43.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList47 = mongoClientOptions43.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions43.getDbDecoderFactory();
        int int49 = mongoClientOptions43.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.database = "";
        java.lang.Class<?> wildcardClass53 = mongoProperties50.getFieldNamingStrategy();
        mongoProperties50.setDatabase("hi!");
        boolean boolean56 = mongoClientOptions43.equals((java.lang.Object) mongoProperties50);
        mongoProperties50.database = "mongodb://localhost/test";
        int int59 = mongoProperties50.getDEFAULT_PORT();
        mongoProperties50.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties62.setAuthenticationDatabase("hi!");
        java.lang.String str65 = mongoProperties62.getHost();
        mongoProperties62.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment68 = null;
        int int69 = mongoProperties62.determinePort(environment68);
        mongoProperties62.authenticationDatabase = "";
        char[] charArray72 = mongoProperties62.password;
        com.mongodb.MongoClientOptions mongoClientOptions73 = null;
        org.springframework.core.env.Environment environment74 = null;
        com.mongodb.MongoClient mongoClient75 = mongoProperties62.createMongoClient(mongoClientOptions73, environment74);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties76 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties76.host = "";
        java.lang.String str79 = mongoProperties76.getHost();
        char[] charArray81 = new char[] { ' ' };
        mongoProperties76.setPassword(charArray81);
        char[] charArray86 = new char[] { '4', '4', '#' };
        mongoProperties76.password = charArray86;
        mongoProperties62.setPassword(charArray86);
        mongoProperties50.password = charArray86;
        mongoProperties16.password = charArray86;
        mongoProperties0.setPassword(charArray86);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(commandListenerList47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 27017 + "'", int59 == 27017);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 27017 + "'", int69 == 27017);
        org.junit.Assert.assertNull(charArray72);
        org.junit.Assert.assertNotNull(mongoClient75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[ ]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4, 4, #]");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions33.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions33.getReadPreference();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder19.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        java.lang.String str50 = mongoClientOptions49.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions49.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder39.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder19.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties56.setAuthenticationDatabase("hi!");
        java.lang.String str59 = mongoProperties56.getHost();
        mongoProperties56.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.description("");
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder72.build();
        int int76 = mongoClientOptions75.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder77 = mongoProperties56.builder(mongoClientOptions75);
        int int78 = mongoClientOptions75.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern79 = mongoClientOptions75.getReadConcern();
        int int80 = mongoClientOptions75.getMaxConnectionIdleTime();
        int int81 = mongoClientOptions75.getHeartbeatConnectTimeout();
        boolean boolean82 = mongoClientOptions75.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory83 = mongoClientOptions75.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory84 = mongoClientOptions75.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder85 = builder54.socketFactory(socketFactory84);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder89 = builder87.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20000 + "'", int76 == 20000);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(readConcern79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory83);
        org.junit.Assert.assertNotNull(socketFactory84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions17.getReadConcern();
        int int20 = mongoClientOptions17.getMaxWaitTime();
        int int21 = mongoClientOptions17.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions17.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder9.socketFactory(socketFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) -1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.host = "";
        mongoProperties28.username = "";
        mongoProperties28.clearPassword();
        java.lang.String str34 = mongoProperties28.getDatabase();
        java.lang.String str35 = mongoProperties28.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setAuthenticationDatabase("hi!");
        java.lang.String str39 = mongoProperties36.getHost();
        mongoProperties36.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        int int56 = mongoClientOptions55.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder57 = mongoProperties36.builder(mongoClientOptions55);
        int int58 = mongoClientOptions55.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern59 = mongoClientOptions55.getReadConcern();
        int int60 = mongoClientOptions55.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder61 = mongoProperties28.builder(mongoClientOptions55);
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions55.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder27.dbDecoderFactory(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(readConcern59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.username;
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.host = "mongodb://localhost/test";
        java.lang.Integer int11 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions33.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions33.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions33.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        int int39 = mongoClientOptions33.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.database = "";
        java.lang.Class<?> wildcardClass43 = mongoProperties40.getFieldNamingStrategy();
        mongoProperties40.setDatabase("hi!");
        boolean boolean46 = mongoClientOptions33.equals((java.lang.Object) mongoProperties40);
        int int47 = mongoClientOptions33.getMaxWaitTime();
        java.lang.String str48 = mongoClientOptions33.getRequiredReplicaSetName();
        int int49 = mongoClientOptions33.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry50 = mongoClientOptions33.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder51 = builder19.codecRegistry(codecRegistry50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(commandListenerList37);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 120000 + "'", int47 == 120000);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder5.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        int int32 = mongoClientOptions25.getConnectionsPerHost();
        int int33 = mongoClientOptions25.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.build();
        int int48 = mongoClientOptions47.getHeartbeatConnectTimeout();
        int int49 = mongoClientOptions47.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry50 = mongoClientOptions47.getCodecRegistry();
        int int51 = mongoClientOptions47.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference52 = mongoClientOptions47.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList53 = mongoClientOptions47.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions47.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList55 = mongoClientOptions47.getCommandListeners();
        int int56 = mongoClientOptions47.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder57 = com.mongodb.MongoClientOptions.builder(mongoClientOptions47);
        boolean boolean58 = mongoClientOptions25.equals((java.lang.Object) mongoClientOptions47);
        com.mongodb.MongoClientOptions.Builder builder59 = mongoProperties0.builder(mongoClientOptions47);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList60 = mongoClientOptions47.getCommandListeners();
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 30000 + "'", int33 == 30000);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(codecRegistry50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 30000 + "'", int51 == 30000);
        org.junit.Assert.assertNotNull(readPreference52);
        org.junit.Assert.assertNotNull(commandListenerList53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertNotNull(commandListenerList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(commandListenerList60);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        com.mongodb.MongoClientOptions.Builder builder7 = mongoProperties0.builder(mongoClientOptions6);
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean21 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.port = 10;
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.uri = "mongodb://localhost/test";
        int int8 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder15.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions22.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions22, environment29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        java.lang.String str47 = mongoClientOptions46.getDescription();
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties0.createMongoClient(mongoClientOptions46, environment48);
        int int50 = mongoClientOptions46.getLocalThreshold();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.database = "";
        java.lang.String str54 = mongoProperties51.getUsername();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass60 = builder59.getClass();
        mongoProperties51.fieldNamingStrategy = wildcardClass60;
        mongoProperties51.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties51.setHost("mongodb://localhost/test");
        boolean boolean66 = mongoClientOptions46.equals((java.lang.Object) "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.port = 1;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions19.getCodecRegistry();
        int int23 = mongoClientOptions19.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions19.getCommandListeners();
        int int26 = mongoClientOptions19.getSocketTimeout();
        java.lang.String str27 = mongoClientOptions19.getDescription();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties0.builder(mongoClientOptions19);
        java.lang.String str29 = mongoClientOptions19.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        int int31 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int33 = mongoClientOptions19.getLocalThreshold();
        int int34 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int35 = mongoClientOptions19.getSocketTimeout();
        int int36 = mongoClientOptions19.getMaxWaitTime();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 30000 + "'", int23 == 30000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        int int23 = mongoClientOptions13.getHeartbeatFrequency();
        int int24 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        mongoProperties0.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        char[] charArray21 = new char[] { '4', '4', '#' };
        mongoProperties11.password = charArray21;
        mongoProperties7.setPassword(charArray21);
        mongoProperties0.password = charArray21;
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 500);
        org.springframework.core.env.Environment environment28 = null;
        int int29 = mongoProperties0.determinePort(environment28);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.host = "hi!";
        mongoProperties0.database = "";
        mongoProperties0.gridFsDatabase = "hi!";
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str13 = mongoProperties0.getDatabase();
        boolean boolean14 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.database;
        java.lang.String str9 = mongoProperties0.uri;
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        int int16 = mongoClientOptions14.getConnectTimeout();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions14.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.description("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.build();
        int int60 = mongoClientOptions59.getHeartbeatConnectTimeout();
        int int61 = mongoClientOptions59.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry62 = mongoClientOptions59.getCodecRegistry();
        int int63 = mongoClientOptions59.getServerSelectionTimeout();
        int int64 = mongoClientOptions59.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern65 = mongoClientOptions59.getWriteConcern();
        com.mongodb.ReadPreference readPreference66 = mongoClientOptions59.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions59.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory68 = mongoClientOptions59.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder43.dbDecoderFactory(dBDecoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder26.dbDecoderFactory(dBDecoderFactory68);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(codecRegistry62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 30000 + "'", int63 == 30000);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(writeConcern65);
        org.junit.Assert.assertNotNull(readPreference66);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertNotNull(dBDecoderFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder(mongoClientOptions5);
        java.lang.String str9 = mongoClientOptions5.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.clearPassword();
        java.lang.String str16 = mongoProperties0.host;
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        int int22 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        int int7 = mongoClientOptions5.getHeartbeatSocketTimeout();
        int int8 = mongoClientOptions5.getConnectionsPerHost();
        int int9 = mongoClientOptions5.getServerSelectionTimeout();
        boolean boolean10 = mongoClientOptions5.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions5.getDbEncoderFactory();
        int int12 = mongoClientOptions5.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList9 = mongoClientOptions7.getCommandListeners();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        java.lang.String str14 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.serverSelectionTimeout((int) (short) -1);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        java.lang.String str8 = mongoProperties0.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.host = "";
        mongoProperties9.username = "";
        mongoProperties9.clearPassword();
        java.lang.String str15 = mongoProperties9.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties16.getHost();
        mongoProperties16.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties16.builder(mongoClientOptions35);
        int int38 = mongoClientOptions35.getMaxConnectionIdleTime();
        int int39 = mongoClientOptions35.getConnectionsPerHost();
        int int40 = mongoClientOptions35.getSocketTimeout();
        int int41 = mongoClientOptions35.getMinHeartbeatFrequency();
        boolean boolean42 = mongoClientOptions35.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder43 = mongoProperties9.builder(mongoClientOptions35);
        int int44 = mongoClientOptions35.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        com.mongodb.MongoClientOptions.Builder builder46 = mongoProperties0.builder(mongoClientOptions35);
        mongoProperties0.clearPassword();
        java.lang.String str48 = mongoProperties0.username;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10000 + "'", int44 == 10000);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatConnectTimeout();
        int int40 = mongoClientOptions38.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry41 = mongoClientOptions38.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder42 = builder20.codecRegistry(codecRegistry41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder13.codecRegistry(codecRegistry41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder4.codecRegistry(codecRegistry41);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.minHeartbeatFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(codecRegistry41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str8 = mongoProperties0.getUsername();
        mongoProperties0.uri = "";
        java.lang.String str11 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.uri = "test";
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The connection string is invalid. Connection strings must start with 'mongodb://'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClientOptions.Builder builder12 = mongoProperties7.builder(mongoClientOptions11);
        char[] charArray13 = mongoProperties7.getPassword();
        mongoProperties7.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties7.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions29.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        int int54 = mongoClientOptions53.getHeartbeatConnectTimeout();
        int int55 = mongoClientOptions53.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry56 = mongoClientOptions53.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry57 = mongoClientOptions53.getCodecRegistry();
        com.mongodb.ReadConcern readConcern58 = mongoClientOptions53.getReadConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions53.getDbDecoderFactory();
        java.lang.String str60 = mongoClientOptions53.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions53.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder37.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.event.CommandListener commandListener63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder64 = builder62.addCommandListener(commandListener63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(codecRegistry56);
        org.junit.Assert.assertNotNull(codecRegistry57);
        org.junit.Assert.assertNotNull(readConcern58);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslEnabled(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        char[] charArray25 = new char[] { '4' };
        mongoProperties21.setPassword(charArray25);
        java.lang.String str27 = mongoProperties21.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setAuthenticationDatabase("hi!");
        java.lang.String str31 = mongoProperties28.getHost();
        mongoProperties28.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.build();
        int int48 = mongoClientOptions47.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder49 = mongoProperties28.builder(mongoClientOptions47);
        int int50 = mongoClientOptions47.getMaxConnectionIdleTime();
        int int51 = mongoClientOptions47.getConnectionsPerHost();
        int int52 = mongoClientOptions47.getSocketTimeout();
        int int53 = mongoClientOptions47.getMinHeartbeatFrequency();
        boolean boolean54 = mongoClientOptions47.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder55 = mongoProperties21.builder(mongoClientOptions47);
        org.bson.codecs.configuration.CodecRegistry codecRegistry56 = mongoClientOptions47.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder57 = builder20.codecRegistry(codecRegistry56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.event.CommandListener commandListener60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder61 = builder59.addCommandListener(commandListener60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(codecRegistry56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setHost("test");
        java.lang.Class<?> wildcardClass15 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str16 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        int int27 = mongoClientOptions13.getMaxWaitTime();
        java.lang.String str28 = mongoClientOptions13.getRequiredReplicaSetName();
        int int29 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions13.getCodecRegistry();
        boolean boolean31 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean33 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties5.getHost();
        mongoProperties5.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = mongoProperties5.builder(mongoClientOptions24);
        int int27 = mongoClientOptions24.getMaxConnectionIdleTime();
        int int28 = mongoClientOptions24.getConnectionsPerHost();
        int int29 = mongoClientOptions24.getSocketTimeout();
        int int30 = mongoClientOptions24.getMinHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions50.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList54 = mongoClientOptions50.getCommandListeners();
        int int55 = mongoClientOptions50.getLocalThreshold();
        int int56 = mongoClientOptions50.getConnectionsPerHost();
        java.lang.String str57 = mongoClientOptions50.getRequiredReplicaSetName();
        int int58 = mongoClientOptions50.getConnectTimeout();
        boolean boolean59 = mongoClientOptions50.isSslEnabled();
        com.mongodb.ReadConcern readConcern60 = mongoClientOptions50.getReadConcern();
        com.mongodb.WriteConcern writeConcern61 = mongoClientOptions50.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder62 = builder36.writeConcern(writeConcern61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder4.writeConcern(writeConcern61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(commandListenerList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 15 + "'", int55 == 15);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10000 + "'", int58 == 10000);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(readConcern60);
        org.junit.Assert.assertNotNull(writeConcern61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.serverSelectionTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        int int45 = mongoClientOptions44.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern46 = mongoClientOptions44.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder47 = builder34.readConcern(readConcern46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder19.readConcern(readConcern46);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties49.host = "";
        mongoProperties49.username = "";
        mongoProperties49.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.description("");
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        int int69 = mongoClientOptions68.getHeartbeatConnectTimeout();
        int int70 = mongoClientOptions68.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference71 = mongoClientOptions68.getReadPreference();
        boolean boolean72 = mongoClientOptions68.isAlwaysUseMBeans();
        boolean boolean73 = mongoClientOptions68.isCursorFinalizerEnabled();
        int int74 = mongoClientOptions68.getConnectionsPerHost();
        org.springframework.core.env.Environment environment75 = null;
        com.mongodb.MongoClient mongoClient76 = mongoProperties49.createMongoClient(mongoClientOptions68, environment75);
        int int77 = mongoClientOptions68.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference78 = mongoClientOptions68.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder79 = builder48.readPreference(readPreference78);
        com.mongodb.MongoClientOptions.Builder builder80 = builder4.readPreference(readPreference78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(readConcern46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 20000 + "'", int69 == 20000);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(readPreference71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(mongoClient76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(readPreference78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.Object obj16 = null;
        boolean boolean17 = mongoClientOptions13.equals(obj16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str22 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions24.getDbDecoderFactory();
        java.lang.Object obj27 = null;
        boolean boolean28 = mongoClientOptions24.equals(obj27);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.Object obj20 = null;
        boolean boolean21 = mongoClientOptions19.equals(obj20);
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        java.lang.Class<?> wildcardClass25 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str28 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions26);
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions50.getCodecRegistry();
        int int54 = mongoClientOptions50.getServerSelectionTimeout();
        int int55 = mongoClientOptions50.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern56 = mongoClientOptions50.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder6.writeConcern(writeConcern56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getMaxConnectionLifeTime();
        int int64 = mongoClientOptions62.getSocketTimeout();
        java.lang.String str65 = mongoClientOptions62.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 30000 + "'", int54 == 30000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(writeConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.uri = "";
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions7.isSslEnabled();
        int int10 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions7.getDbEncoderFactory();
        int int11 = mongoClientOptions7.getSocketTimeout();
        int int12 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionLifeTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        int int22 = mongoClientOptions13.getLocalThreshold();
        int int23 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.threadsAllowedToBlockForConnectionMultiplier(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties11.getHost();
        mongoProperties11.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        int int31 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions30);
        int int33 = mongoClientOptions30.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions30.getConnectionsPerHost();
        boolean boolean35 = mongoClientOptions30.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions30);
        javax.net.SocketFactory socketFactory37 = mongoClientOptions30.getSocketFactory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(socketFactory37);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setAuthenticationDatabase("hi!");
        java.lang.String str23 = mongoProperties20.getHost();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties20.createMongoClient(mongoClientOptions29, environment30);
        boolean boolean32 = mongoClientOptions13.equals((java.lang.Object) mongoClient31);
        int int33 = mongoClientOptions13.getServerSelectionTimeout();
        int int34 = mongoClientOptions13.getConnectionsPerHost();
        int int35 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean37 = mongoClientOptions13.isSocketKeepAlive();
        boolean boolean38 = mongoClientOptions13.isSslEnabled();
        boolean boolean39 = mongoClientOptions13.isCursorFinalizerEnabled();
        java.lang.String str40 = mongoClientOptions13.getDescription();
        int int41 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 30000 + "'", int33 == 30000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder4.heartbeatConnectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions29.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList33 = mongoClientOptions29.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry34 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder35 = builder15.codecRegistry(codecRegistry34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(commandListenerList33);
        org.junit.Assert.assertNotNull(codecRegistry34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUri("test");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        int int32 = mongoClientOptions28.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions28.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList34 = mongoClientOptions28.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions28.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList36 = mongoClientOptions28.getCommandListeners();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions28.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions28.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = com.mongodb.MongoClientOptions.builder(mongoClientOptions28);
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions28.getReadConcern();
        int int41 = mongoClientOptions28.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder42 = mongoProperties0.builder(mongoClientOptions28);
        java.lang.String str43 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 30000 + "'", int32 == 30000);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(commandListenerList34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(commandListenerList36);
        org.junit.Assert.assertNotNull(commandListenerList37);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        java.lang.Integer int11 = mongoProperties0.port;
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        java.lang.String str31 = mongoClientOptions30.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder20.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder15.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        int int58 = mongoClientOptions57.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern59 = mongoClientOptions57.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder60 = builder47.readConcern(readConcern59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder34.readConcern(readConcern59);
        com.mongodb.MongoClientOptions.Builder builder63 = builder34.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("");
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder74.build();
        int int78 = mongoClientOptions77.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern79 = mongoClientOptions77.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder80 = builder63.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder8.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.description("");
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(readConcern59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
        org.junit.Assert.assertNotNull(writeConcern79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.username = "hi!";
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        mongoProperties0.database = "mongodb://localhost/test";
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern58 = mongoClientOptions56.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder59 = builder46.readConcern(readConcern58);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder70.build();
        int int74 = mongoClientOptions73.getHeartbeatConnectTimeout();
        int int75 = mongoClientOptions73.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions73.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder46.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder31.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder26.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder80 = builder10.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder10.build();
        int int82 = mongoClientOptions81.getSocketTimeout();
        int int83 = mongoClientOptions81.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory84 = mongoClientOptions81.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(readConcern58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20000 + "'", int74 == 20000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory84);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions50.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder54 = builder32.codecRegistry(codecRegistry53);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        java.lang.String str61 = mongoClientOptions60.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory62 = mongoClientOptions60.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder32.dbEncoderFactory(dBEncoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder27.dbEncoderFactory(dBEncoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = builder19.dbEncoderFactory(dBEncoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder72 = builder68.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder72.build();
        boolean boolean76 = mongoClientOptions75.isAlwaysUseMBeans();
        int int77 = mongoClientOptions75.getConnectTimeout();
        int int78 = mongoClientOptions75.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder81.build();
        java.lang.String str85 = mongoClientOptions84.getDescription();
        int int86 = mongoClientOptions84.getMaxWaitTime();
        boolean boolean87 = mongoClientOptions75.equals((java.lang.Object) mongoClientOptions84);
        int int88 = mongoClientOptions75.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference89 = mongoClientOptions75.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder90 = builder65.readPreference(readPreference89);
        com.mongodb.MongoClientOptions.Builder builder91 = builder12.readPreference(readPreference89);
        com.mongodb.MongoClientOptions.Builder builder93 = builder12.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder95 = builder93.localThreshold((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(dBEncoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10000 + "'", int77 == 10000);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 20000 + "'", int78 == 20000);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 120000 + "'", int86 == 120000);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 500 + "'", int88 == 500);
        org.junit.Assert.assertNotNull(readPreference89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties0.builder(mongoClientOptions25);
        char[] charArray33 = mongoProperties0.getPassword();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(charArray33);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions27.getSocketFactory();
        int int35 = mongoClientOptions27.getConnectionsPerHost();
        boolean boolean36 = mongoClientOptions27.isSslEnabled();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions27.getSocketFactory();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions27.getWriteConcern();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions27.getWriteConcern();
        int int40 = mongoClientOptions27.getHeartbeatFrequency();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(writeConcern39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.description("test");
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setGridFsDatabase("");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getSocketTimeout();
        int int31 = mongoClientOptions25.getMinHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions25.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder5.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder5.heartbeatConnectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int5 = mongoProperties0.port;
        java.lang.Integer int6 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int5 = mongoProperties0.port;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int8 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("hi!");
        java.lang.String str21 = mongoProperties18.getHost();
        mongoProperties18.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties18.builder(mongoClientOptions37);
        int int40 = mongoClientOptions37.getMaxConnectionIdleTime();
        int int41 = mongoClientOptions37.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder17.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder10.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder10.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.socketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.serverSelectionTimeout((int) (byte) 1);
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder15.codecRegistry(codecRegistry16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: codecRegistry can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.uri = "";
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        boolean boolean22 = mongoClientOptions20.isSslInvalidHostNameAllowed();
        int int23 = mongoClientOptions20.getConnectTimeout();
        boolean boolean24 = mongoClientOptions20.isSocketKeepAlive();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20, environment25);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mongoClient26);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder31.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder26.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder15.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder2.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.connectTimeout(10000);
        com.mongodb.WriteConcern writeConcern61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder62 = builder58.writeConcern(writeConcern61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: writeConcern can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold((int) (short) 100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.build();
        int int43 = mongoClientOptions42.getHeartbeatConnectTimeout();
        int int44 = mongoClientOptions42.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions42.getCodecRegistry();
        int int46 = mongoClientOptions42.getServerSelectionTimeout();
        int int47 = mongoClientOptions42.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions42.getWriteConcern();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions42.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder28.dbEncoderFactory(dBEncoderFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder4.dbEncoderFactory(dBEncoderFactory50);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.maxConnectionIdleTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30000 + "'", int46 == 30000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.Integer int15 = mongoProperties0.port;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder17 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        char[] charArray24 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions32);
        int int35 = mongoClientOptions32.getHeartbeatSocketTimeout();
        int int36 = mongoClientOptions32.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.String str20 = mongoClientOptions19.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder4.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        int int39 = mongoClientOptions37.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions37.getCodecRegistry();
        int int41 = mongoClientOptions37.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions37.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList43 = mongoClientOptions37.getCommandListeners();
        java.lang.String str44 = mongoClientOptions37.getDescription();
        java.lang.Object obj45 = null;
        boolean boolean46 = mongoClientOptions37.equals(obj45);
        com.mongodb.ReadPreference readPreference47 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder48 = builder4.readPreference(readPreference47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder4.minConnectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(commandListenerList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(readPreference47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getDatabase();
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions23.getMaxConnectionIdleTime();
        boolean boolean26 = mongoClientOptions23.isCursorFinalizerEnabled();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions23.getDbDecoderFactory();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions23, environment28);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions23);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.host = "";
        char[] charArray8 = new char[] { '4' };
        mongoProperties4.setPassword(charArray8);
        mongoProperties0.password = charArray8;
        mongoProperties0.setUsername("");
        java.lang.String str13 = mongoProperties0.database;
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties45.setAuthenticationDatabase("hi!");
        java.lang.String str48 = mongoProperties45.getHost();
        mongoProperties45.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("");
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        int int65 = mongoClientOptions64.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder66 = mongoProperties45.builder(mongoClientOptions64);
        int int67 = mongoClientOptions64.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern68 = mongoClientOptions64.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder69 = builder40.readConcern(readConcern68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder37.readConcern(readConcern68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder18.readConcern(readConcern68);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder18.build();
        int int73 = mongoClientOptions72.getConnectionsPerHost();
        org.springframework.core.env.Environment environment74 = null;
        com.mongodb.MongoClient mongoClient75 = mongoProperties0.createMongoClient(mongoClientOptions72, environment74);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(readConcern68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(mongoClient75);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.setPassword(charArray31);
        java.lang.String str36 = mongoProperties0.host;
        boolean boolean37 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        int int31 = mongoClientOptions27.getHeartbeatFrequency();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        java.lang.String str25 = mongoClientOptions19.getDescription();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions19.getReadPreference();
        boolean boolean27 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int28 = mongoClientOptions19.getHeartbeatConnectTimeout();
        boolean boolean29 = mongoClientOptions19.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        int int23 = mongoClientOptions13.getConnectTimeout();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions13.getSocketFactory();
        int int25 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean26 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        int int20 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int21 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        java.lang.String str8 = mongoProperties0.uri;
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.uri;
        java.lang.String str11 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.String str14 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder3.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxWaitTime(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        int int24 = mongoClientOptions20.getServerSelectionTimeout();
        int int25 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder4.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder4.requiredReplicaSetName("test");
        com.mongodb.event.CommandListener commandListener32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder4.addCommandListener(commandListener32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.username = "test";
        boolean boolean10 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int11 = mongoProperties0.port;
        mongoProperties0.database = "";
        java.lang.String str14 = mongoProperties0.getDatabase();
        mongoProperties0.uri = "hi!";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties16.getHost();
        mongoProperties16.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties16.builder(mongoClientOptions35);
        int int38 = mongoClientOptions35.getMaxConnectionIdleTime();
        int int39 = mongoClientOptions35.getConnectionsPerHost();
        int int40 = mongoClientOptions35.getSocketTimeout();
        int int41 = mongoClientOptions35.getMinHeartbeatFrequency();
        boolean boolean42 = mongoClientOptions35.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions35.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder45 = builder15.writeConcern(writeConcern44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder8.writeConcern(writeConcern44);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.minConnectionsPerHost((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.authenticationDatabase;
        char[] charArray16 = mongoProperties0.password;
        mongoProperties0.username = "";
        int int19 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions28.getCodecRegistry();
        com.mongodb.ReadConcern readConcern33 = mongoClientOptions28.getReadConcern();
        int int34 = mongoClientOptions28.getLocalThreshold();
        org.bson.codecs.configuration.CodecRegistry codecRegistry35 = mongoClientOptions28.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder36 = builder14.codecRegistry(codecRegistry35);
        javax.net.SocketFactory socketFactory37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketFactory(socketFactory37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(readConcern33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
        org.junit.Assert.assertNotNull(codecRegistry35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.setDatabase("hi!");
        java.lang.String str13 = mongoProperties0.gridFsDatabase;
        mongoProperties0.uri = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.database = "hi!";
        java.lang.String str8 = mongoProperties0.username;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList9 = mongoClientOptions7.getCommandListeners();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setUri("hi!");
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        int int27 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean28 = mongoClientOptions13.isAlwaysUseMBeans();
        int int29 = mongoClientOptions13.getConnectTimeout();
        int int30 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.host = "hi!";
        mongoProperties0.setDatabase("");
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setAuthenticationDatabase("hi!");
        java.lang.String str23 = mongoProperties20.getHost();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties20.createMongoClient(mongoClientOptions29, environment30);
        boolean boolean32 = mongoClientOptions13.equals((java.lang.Object) mongoClient31);
        java.lang.String str33 = mongoClientOptions13.getRequiredReplicaSetName();
        int int34 = mongoClientOptions13.getConnectionsPerHost();
        int int35 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        char[] charArray21 = new char[] { '4', '4', '#' };
        mongoProperties11.password = charArray21;
        mongoProperties0.password = charArray21;
        java.lang.String str24 = mongoProperties0.getUsername();
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, 4, #]");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getUri();
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.getUsername();
        char[] charArray7 = mongoProperties0.password;
        java.lang.String str8 = mongoProperties0.uri;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.host = "";
        mongoProperties9.setUsername("hi!");
        java.lang.String str14 = mongoProperties9.getUsername();
        mongoProperties9.setHost("test");
        java.lang.String str17 = mongoProperties9.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.host = "";
        mongoProperties18.username = "";
        java.lang.String str23 = mongoProperties18.getHost();
        mongoProperties18.port = 1;
        mongoProperties18.setUsername("test");
        mongoProperties18.setUri("");
        int int30 = mongoProperties18.getDEFAULT_PORT();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.host = "";
        java.lang.String str34 = mongoProperties31.getHost();
        char[] charArray36 = new char[] { ' ' };
        mongoProperties31.setPassword(charArray36);
        char[] charArray41 = new char[] { '4', '4', '#' };
        mongoProperties31.password = charArray41;
        mongoProperties31.setAuthenticationDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties45.database = "";
        java.lang.String str48 = mongoProperties45.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties49.host = "";
        java.lang.String str52 = mongoProperties49.getHost();
        char[] charArray54 = new char[] { ' ' };
        mongoProperties49.setPassword(charArray54);
        char[] charArray59 = new char[] { '4', '4', '#' };
        mongoProperties49.password = charArray59;
        mongoProperties45.setPassword(charArray59);
        mongoProperties31.password = charArray59;
        mongoProperties18.password = charArray59;
        mongoProperties9.password = charArray59;
        mongoProperties0.setPassword(charArray59);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 27017 + "'", int30 == 27017);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[4, 4, #]");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        int int27 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions19.getReadConcern();
        int int29 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions19.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions19.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions19.getDbDecoderFactory();
        int int34 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        int int8 = mongoClientOptions5.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions5.getReadConcern();
        int int10 = mongoClientOptions5.getMinConnectionsPerHost();
        int int11 = mongoClientOptions5.getMinConnectionsPerHost();
        int int12 = mongoClientOptions5.getMaxWaitTime();
        int int13 = mongoClientOptions5.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        java.lang.String str10 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        java.lang.String str18 = mongoProperties15.getHost();
        char[] charArray20 = new char[] { ' ' };
        mongoProperties15.setPassword(charArray20);
        char[] charArray25 = new char[] { '4', '4', '#' };
        mongoProperties15.password = charArray25;
        mongoProperties11.setPassword(charArray25);
        mongoProperties0.password = charArray25;
        mongoProperties0.setPort((java.lang.Integer) (-1));
        java.lang.String str31 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("");
        java.lang.String str35 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ ]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(writeConcern15);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions9, environment10);
        int int12 = mongoClientOptions9.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (short) 100);
        boolean boolean25 = mongoClientOptions9.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions9);
        int int27 = mongoClientOptions9.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions9.getLocalThreshold();
        int int29 = mongoClientOptions9.getLocalThreshold();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions20.getCodecRegistry();
        int int23 = mongoClientOptions20.getMinConnectionsPerHost();
        java.lang.String str24 = mongoClientOptions20.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder6.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionLifeTime((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.setUri("");
        boolean boolean10 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        int int10 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        char[] charArray24 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions32);
        mongoProperties0.authenticationDatabase = "test";
        org.springframework.core.env.Environment environment37 = null;
        int int38 = mongoProperties0.determinePort(environment37);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27017 + "'", int38 == 27017);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties0.determinePort(environment15);
        mongoProperties0.username = "";
        char[] charArray19 = mongoProperties0.getPassword();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(charArray19);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getLocalThreshold();
        int int17 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.String str20 = mongoClientOptions19.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder4.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder36.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder23.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder54 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder23.build();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder58 = builder23.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        int int7 = mongoClientOptions5.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions5.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder(mongoClientOptions5);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatConnectTimeout();
        int int40 = mongoClientOptions38.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry41 = mongoClientOptions38.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = mongoClientOptions38.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder43 = builder24.codecRegistry(codecRegistry42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder9.codecRegistry(codecRegistry42);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder59 = builder53.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.description("");
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder72.build();
        int int76 = mongoClientOptions75.getHeartbeatConnectTimeout();
        int int77 = mongoClientOptions75.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry78 = mongoClientOptions75.getCodecRegistry();
        int int79 = mongoClientOptions75.getServerSelectionTimeout();
        int int80 = mongoClientOptions75.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern81 = mongoClientOptions75.getWriteConcern();
        com.mongodb.ReadPreference readPreference82 = mongoClientOptions75.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry83 = mongoClientOptions75.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder84 = builder61.codecRegistry(codecRegistry83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder9.codecRegistry(codecRegistry83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(codecRegistry41);
        org.junit.Assert.assertNotNull(codecRegistry42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20000 + "'", int76 == 20000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(codecRegistry78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 30000 + "'", int79 == 30000);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(writeConcern81);
        org.junit.Assert.assertNotNull(readPreference82);
        org.junit.Assert.assertNotNull(codecRegistry83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        java.lang.String str13 = mongoProperties0.uri;
        java.lang.String str14 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern56 = mongoClientOptions54.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder44.readConcern(readConcern56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder66.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder71 = builder66.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("");
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder84.build();
        int int88 = mongoClientOptions87.getHeartbeatConnectTimeout();
        int int89 = mongoClientOptions87.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory90 = mongoClientOptions87.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder91 = builder71.dbDecoderFactory(dBDecoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder61.dbDecoderFactory(dBDecoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder93 = builder29.dbDecoderFactory(dBDecoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder95 = builder29.minHeartbeatFrequency((int) (short) 10);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(readConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 20000 + "'", int88 == 20000);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList28 = mongoClientOptions24.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.dbDecoderFactory(dBDecoderFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder10.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(commandListenerList28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.host = "";
        java.lang.String str7 = mongoProperties4.getHost();
        char[] charArray9 = new char[] { ' ' };
        mongoProperties4.setPassword(charArray9);
        char[] charArray14 = new char[] { '4', '4', '#' };
        mongoProperties4.password = charArray14;
        mongoProperties0.setPassword(charArray14);
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str19 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, 4, #]");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        boolean boolean25 = mongoClientOptions21.isAlwaysUseMBeans();
        boolean boolean26 = mongoClientOptions21.isCursorFinalizerEnabled();
        int int27 = mongoClientOptions21.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions21);
        int int29 = mongoClientOptions21.getConnectTimeout();
        int int30 = mongoClientOptions21.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions21, environment31);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions21.getDbDecoderFactory();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getSocketTimeout();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 1);
        boolean boolean8 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions13.getReadConcern();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getSocketTimeout();
        int int31 = mongoClientOptions25.getMinHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions25.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        int int34 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions25);
        int int36 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int37 = mongoClientOptions25.getMaxWaitTime();
        int int38 = mongoClientOptions25.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions25.getWriteConcern();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 120000 + "'", int38 == 120000);
        org.junit.Assert.assertNotNull(writeConcern39);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        int int15 = mongoClientOptions14.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions14.getReadConcern();
        int int17 = mongoClientOptions14.getMaxWaitTime();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(mongoClient19);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getUsername();
        mongoProperties0.username = "hi!";
        java.lang.String str18 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.database = "";
        boolean boolean16 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        char[] charArray13 = mongoProperties0.password;
        org.springframework.core.env.Environment environment14 = null;
        int int15 = mongoProperties0.determinePort(environment14);
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        char[] charArray17 = mongoProperties0.getPassword();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.host = "";
        java.lang.String str23 = mongoProperties20.getHost();
        java.lang.Class<?> wildcardClass24 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setUri("");
        mongoProperties20.port = 10000;
        java.lang.String str29 = mongoProperties20.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties30.host = "";
        mongoProperties30.username = "";
        java.lang.String str35 = mongoProperties30.getHost();
        mongoProperties30.port = 1;
        mongoProperties30.setUsername("test");
        mongoProperties30.setUri("");
        int int42 = mongoProperties30.getDEFAULT_PORT();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties43.host = "";
        java.lang.String str46 = mongoProperties43.getHost();
        char[] charArray48 = new char[] { ' ' };
        mongoProperties43.setPassword(charArray48);
        char[] charArray53 = new char[] { '4', '4', '#' };
        mongoProperties43.password = charArray53;
        mongoProperties43.setAuthenticationDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties57.database = "";
        java.lang.String str60 = mongoProperties57.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.host = "";
        java.lang.String str64 = mongoProperties61.getHost();
        char[] charArray66 = new char[] { ' ' };
        mongoProperties61.setPassword(charArray66);
        char[] charArray71 = new char[] { '4', '4', '#' };
        mongoProperties61.password = charArray71;
        mongoProperties57.setPassword(charArray71);
        mongoProperties43.password = charArray71;
        mongoProperties30.password = charArray71;
        mongoProperties20.password = charArray71;
        mongoProperties0.password = charArray71;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 27017 + "'", int42 == 27017);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ ]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, 4, #]");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getDatabase();
        java.lang.String str10 = mongoProperties6.getUri();
        java.lang.Integer int11 = mongoProperties6.getPort();
        mongoProperties6.database = "";
        mongoProperties6.port = 500;
        java.lang.String str16 = mongoProperties6.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.password = charArray31;
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, #]");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        int int5 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.host;
        java.lang.String str8 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.setDatabase("");
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        char[] charArray13 = mongoProperties0.password;
        mongoProperties0.port = 10000;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions27.getReadPreference();
        int int34 = mongoClientOptions27.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry35 = mongoClientOptions27.getCodecRegistry();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(codecRegistry35);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.setAuthenticationDatabase("hi!");
        java.lang.String str23 = mongoProperties20.getHost();
        mongoProperties20.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        int int40 = mongoClientOptions39.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder41 = mongoProperties20.builder(mongoClientOptions39);
        int int42 = mongoClientOptions39.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern43 = mongoClientOptions39.getReadConcern();
        int int44 = mongoClientOptions39.getMaxConnectionIdleTime();
        java.lang.String str45 = mongoClientOptions39.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern46 = mongoClientOptions39.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder47 = builder19.readConcern(readConcern46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder11.readConcern(readConcern46);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(readConcern43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(readConcern46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        char[] charArray10 = mongoProperties0.getPassword();
        boolean boolean11 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        boolean boolean26 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions19.getSocketFactory();
        int int29 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions19.getMinConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions19.getCodecRegistry();
        boolean boolean32 = mongoClientOptions19.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions27.getReadPreference();
        int int34 = mongoClientOptions27.getSocketTimeout();
        int int35 = mongoClientOptions27.getLocalThreshold();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str13 = mongoProperties0.uri;
        char[] charArray14 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str18 = mongoProperties15.getHost();
        java.lang.String str19 = mongoProperties15.getUri();
        mongoProperties15.gridFsDatabase = "";
        mongoProperties15.setUri("mongodb://localhost/test");
        mongoProperties15.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties15.password = charArray36;
        mongoProperties0.password = charArray36;
        mongoProperties0.username = "mongodb://localhost/test";
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getSocketTimeout();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        boolean boolean22 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder2.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder2.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        int int16 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions13.getMinHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        java.lang.String str22 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.username = "hi!";
        java.lang.String str5 = mongoProperties0.host;
        java.lang.String str6 = mongoProperties0.getUsername();
        int int7 = mongoProperties0.getDEFAULT_PORT();
        int int8 = mongoProperties0.getDEFAULT_PORT();
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.database = "";
        java.lang.String str22 = mongoProperties19.getDatabase();
        java.lang.Class<?> wildcardClass23 = mongoProperties19.fieldNamingStrategy;
        java.lang.String str24 = mongoProperties19.getHost();
        java.lang.String str25 = mongoProperties19.username;
        char[] charArray26 = mongoProperties19.password;
        mongoProperties19.database = "hi!";
        mongoProperties19.setGridFsDatabase("test");
        mongoProperties19.setHost("");
        boolean boolean33 = mongoClientOptions18.equals((java.lang.Object) "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        int int34 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions27.getServerSelectionTimeout();
        int int36 = mongoClientOptions27.getHeartbeatConnectTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 30000 + "'", int35 == 30000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("");
        mongoProperties0.uri = "";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        java.lang.String str15 = mongoProperties12.getHost();
        char[] charArray17 = new char[] { ' ' };
        mongoProperties12.setPassword(charArray17);
        char[] charArray22 = new char[] { '4', '4', '#' };
        mongoProperties12.password = charArray22;
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.String str26 = mongoProperties12.getUri();
        java.lang.String str27 = mongoProperties12.getUsername();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions41.getCodecRegistry();
        boolean boolean44 = mongoClientOptions41.isSocketKeepAlive();
        boolean boolean45 = mongoClientOptions41.isSocketKeepAlive();
        int int46 = mongoClientOptions41.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties12.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties0.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.requiredReplicaSetName("test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.host = "hi!";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder5.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.socketTimeout((int) '4');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.database = "";
        java.lang.String str31 = mongoProperties28.getDatabase();
        java.lang.Class<?> wildcardClass32 = mongoProperties28.fieldNamingStrategy;
        java.lang.String str33 = mongoProperties28.getHost();
        java.lang.String str34 = mongoProperties28.username;
        java.lang.String str35 = mongoProperties28.gridFsDatabase;
        java.lang.String str36 = mongoProperties28.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties37.host = "";
        mongoProperties37.username = "";
        mongoProperties37.clearPassword();
        java.lang.String str43 = mongoProperties37.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties44.setAuthenticationDatabase("hi!");
        java.lang.String str47 = mongoProperties44.getHost();
        mongoProperties44.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder65 = mongoProperties44.builder(mongoClientOptions63);
        int int66 = mongoClientOptions63.getMaxConnectionIdleTime();
        int int67 = mongoClientOptions63.getConnectionsPerHost();
        int int68 = mongoClientOptions63.getSocketTimeout();
        int int69 = mongoClientOptions63.getMinHeartbeatFrequency();
        boolean boolean70 = mongoClientOptions63.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder71 = mongoProperties37.builder(mongoClientOptions63);
        int int72 = mongoClientOptions63.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions63);
        com.mongodb.MongoClientOptions.Builder builder74 = mongoProperties28.builder(mongoClientOptions63);
        boolean boolean75 = mongoClientOptions63.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference77 = mongoClientOptions63.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder78 = builder27.readPreference(readPreference77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder10.readPreference(readPreference77);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 500 + "'", int69 == 500);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10000 + "'", int72 == 10000);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(readPreference77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder7.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder48.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder53 = builder48.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions56.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder41.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder30.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder60.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder60.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder78 = builder74.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder81.build();
        java.lang.String str85 = mongoClientOptions84.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory86 = mongoClientOptions84.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder87 = builder74.dbEncoderFactory(dBEncoderFactory86);
        com.mongodb.MongoClientOptions.Builder builder88 = builder71.dbEncoderFactory(dBEncoderFactory86);
        com.mongodb.MongoClientOptions.Builder builder89 = builder70.dbEncoderFactory(dBEncoderFactory86);
        com.mongodb.MongoClientOptions.Builder builder90 = builder30.dbEncoderFactory(dBEncoderFactory86);
        java.lang.Class<?> wildcardClass91 = builder90.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(dBEncoderFactory86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.host;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("hi!");
        java.lang.String str24 = mongoProperties21.getHost();
        mongoProperties21.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder42 = mongoProperties21.builder(mongoClientOptions40);
        int int43 = mongoClientOptions40.getMaxConnectionIdleTime();
        int int44 = mongoClientOptions40.getConnectionsPerHost();
        int int45 = mongoClientOptions40.getSocketTimeout();
        int int46 = mongoClientOptions40.getMinHeartbeatFrequency();
        boolean boolean47 = mongoClientOptions40.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions40);
        com.mongodb.WriteConcern writeConcern49 = mongoClientOptions40.getWriteConcern();
        int int50 = mongoClientOptions40.getMaxConnectionIdleTime();
        boolean boolean51 = mongoClientOptions13.equals((java.lang.Object) int50);
        java.lang.String str52 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 500 + "'", int46 == 500);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(writeConcern49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str19 = mongoClientOptions13.getDescription();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(commandListenerList20);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minHeartbeatFrequency((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int20 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions13.getDbEncoderFactory();
        int int23 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslInvalidHostNameAllowed(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.host = "";
        java.lang.String str12 = mongoProperties9.getHost();
        char[] charArray14 = new char[] { ' ' };
        mongoProperties9.setPassword(charArray14);
        mongoProperties9.clearPassword();
        java.lang.String str17 = mongoProperties9.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions31.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList35 = mongoClientOptions31.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions31.getDbDecoderFactory();
        boolean boolean37 = mongoClientOptions31.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties9.createMongoClient(mongoClientOptions31, environment38);
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions31.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder41 = builder8.codecRegistry(codecRegistry40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000]");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(commandListenerList35);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.host;
        mongoProperties0.setUri("test");
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str15 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.gridFsDatabase = "hi!";
        char[] charArray18 = mongoProperties0.getPassword();
        java.lang.String str19 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str10 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setHost("test");
        java.lang.Class<?> wildcardClass15 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.username = "hi!";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.Object obj16 = null;
        boolean boolean17 = mongoClientOptions13.equals(obj16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions13.getSocketTimeout();
        boolean boolean23 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions29.getCodecRegistry();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        boolean boolean33 = mongoClientOptions29.isSocketKeepAlive();
        int int34 = mongoClientOptions29.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        mongoProperties0.setDatabase("hi!");
        java.lang.String str38 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.host = "";
        mongoProperties39.username = "";
        mongoProperties39.clearPassword();
        java.lang.String str45 = mongoProperties39.getGridFsDatabase();
        java.lang.String str46 = mongoProperties39.getDatabase();
        mongoProperties39.setHost("");
        mongoProperties39.setPort((java.lang.Integer) (-1));
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties51 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties51.host = "";
        mongoProperties51.username = "";
        mongoProperties51.clearPassword();
        java.lang.String str57 = mongoProperties51.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties58 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties58.setAuthenticationDatabase("hi!");
        java.lang.String str61 = mongoProperties58.getHost();
        mongoProperties58.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("");
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder74.build();
        int int78 = mongoClientOptions77.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder79 = mongoProperties58.builder(mongoClientOptions77);
        int int80 = mongoClientOptions77.getMaxConnectionIdleTime();
        int int81 = mongoClientOptions77.getConnectionsPerHost();
        int int82 = mongoClientOptions77.getSocketTimeout();
        int int83 = mongoClientOptions77.getMinHeartbeatFrequency();
        boolean boolean84 = mongoClientOptions77.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder85 = mongoProperties51.builder(mongoClientOptions77);
        int int86 = mongoClientOptions77.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList87 = mongoClientOptions77.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder88 = mongoProperties39.builder(mongoClientOptions77);
        com.mongodb.ReadConcern readConcern89 = mongoClientOptions77.getReadConcern();
        org.springframework.core.env.Environment environment90 = null;
        com.mongodb.MongoClient mongoClient91 = mongoProperties0.createMongoClient(mongoClientOptions77, environment90);
        com.mongodb.WriteConcern writeConcern92 = mongoClientOptions77.getWriteConcern();
        int int93 = mongoClientOptions77.getHeartbeatFrequency();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 20000 + "'", int78 == 20000);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 500 + "'", int83 == 500);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(readConcern89);
        org.junit.Assert.assertNotNull(mongoClient91);
        org.junit.Assert.assertNotNull(writeConcern92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10000 + "'", int93 == 10000);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        int int25 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions19.getReadConcern();
        int int28 = mongoClientOptions19.getLocalThreshold();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getHeartbeatConnectTimeout();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder31.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder26.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder15.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder2.codecRegistry(codecRegistry52);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder58 = builder2.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minConnectionsPerHost must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20000 + "'", int50 == 20000);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(writeConcern11);
    }
}

